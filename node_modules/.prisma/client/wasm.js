
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  email: 'email',
  password: 'password',
  fullName: 'fullName',
  role: 'role',
  isActive: 'isActive',
  team: 'team',
  lastLogin: 'lastLogin',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TaskScalarFieldEnum = {
  id: 'id',
  uin: 'uin',
  title: 'title',
  description: 'description',
  taskType: 'taskType',
  status: 'status',
  expectedPublishDate: 'expectedPublishDate',
  platform: 'platform',
  category: 'category',
  remarks: 'remarks',
  approvalDate: 'approvalDate',
  expiryDate: 'expiryDate',
  approvalProofUrl: 'approvalProofUrl',
  publishDate: 'publishDate',
  publishedCopyUrl: 'publishedCopyUrl',
  closureComments: 'closureComments',
  closureDate: 'closureDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdBy: 'createdBy',
  assignedProductIds: 'assignedProductIds',
  assignedComplianceId: 'assignedComplianceId'
};

exports.Prisma.VersionScalarFieldEnum = {
  id: 'id',
  versionNumber: 'versionNumber',
  fileUrls: 'fileUrls',
  remarks: 'remarks',
  uploadedAt: 'uploadedAt',
  taskId: 'taskId',
  uploadedById: 'uploadedById'
};

exports.Prisma.CommentScalarFieldEnum = {
  id: 'id',
  content: 'content',
  attachments: 'attachments',
  isGlobal: 'isGlobal',
  createdAt: 'createdAt',
  taskId: 'taskId',
  versionId: 'versionId',
  authorId: 'authorId'
};

exports.Prisma.ExchangeApprovalScalarFieldEnum = {
  id: 'id',
  exchangeName: 'exchangeName',
  typeOfContent: 'typeOfContent',
  approvalStatus: 'approvalStatus',
  approvalDate: 'approvalDate',
  expiryDate: 'expiryDate',
  referenceNumber: 'referenceNumber',
  approvalEmailUrl: 'approvalEmailUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  taskId: 'taskId',
  updatedById: 'updatedById'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  title: 'title',
  message: 'message',
  type: 'type',
  isRead: 'isRead',
  createdAt: 'createdAt',
  userId: 'userId',
  taskId: 'taskId'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  action: 'action',
  details: 'details',
  timestamp: 'timestamp',
  performedBy: 'performedBy',
  taskId: 'taskId'
};

exports.Prisma.AbsenceScalarFieldEnum = {
  id: 'id',
  fromDate: 'fromDate',
  toDate: 'toDate',
  reason: 'reason',
  createdAt: 'createdAt',
  userId: 'userId',
  createdById: 'createdById'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};
exports.Role = exports.$Enums.Role = {
  PRODUCT_USER: 'PRODUCT_USER',
  PRODUCT_ADMIN: 'PRODUCT_ADMIN',
  COMPLIANCE_USER: 'COMPLIANCE_USER',
  COMPLIANCE_ADMIN: 'COMPLIANCE_ADMIN',
  SENIOR_MANAGER: 'SENIOR_MANAGER',
  ADMIN: 'ADMIN'
};

exports.TaskType = exports.$Enums.TaskType = {
  INTERNAL: 'INTERNAL',
  EXCHANGE: 'EXCHANGE'
};

exports.TaskStatus = exports.$Enums.TaskStatus = {
  OPEN: 'OPEN',
  COMPLIANCE_REVIEW: 'COMPLIANCE_REVIEW',
  PRODUCT_REVIEW: 'PRODUCT_REVIEW',
  APPROVED: 'APPROVED',
  PUBLISHED: 'PUBLISHED',
  CLOSED_INTERNAL: 'CLOSED_INTERNAL',
  CLOSED_EXCHANGE: 'CLOSED_EXCHANGE',
  EXPIRED: 'EXPIRED'
};

exports.ExchangeApprovalStatus = exports.$Enums.ExchangeApprovalStatus = {
  APPROVED: 'APPROVED',
  PENDING: 'PENDING',
  REJECTED: 'REJECTED',
  NOT_SENT: 'NOT_SENT'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  TASK_ASSIGNED: 'TASK_ASSIGNED',
  COMMENT_ADDED: 'COMMENT_ADDED',
  VERSION_UPLOADED: 'VERSION_UPLOADED',
  TASK_APPROVED: 'TASK_APPROVED',
  TASK_REJECTED: 'TASK_REJECTED',
  TASK_PUBLISHED: 'TASK_PUBLISHED',
  EXPIRY_WARNING: 'EXPIRY_WARNING',
  FOLLOW_UP: 'FOLLOW_UP'
};

exports.Prisma.ModelName = {
  User: 'User',
  Task: 'Task',
  Version: 'Version',
  Comment: 'Comment',
  ExchangeApproval: 'ExchangeApproval',
  Notification: 'Notification',
  AuditLog: 'AuditLog',
  Absence: 'Absence'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
