// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  PRODUCT_USER
  PRODUCT_ADMIN
  COMPLIANCE_USER
  COMPLIANCE_ADMIN
  SENIOR_MANAGER
  ADMIN
}

enum TaskType {
  INTERNAL
  EXCHANGE
}

enum TaskStatus {
  OPEN
  COMPLIANCE_REVIEW
  PRODUCT_REVIEW
  APPROVED
  PUBLISHED
  CLOSED_INTERNAL
  CLOSED_EXCHANGE
  EXPIRED
}

enum ExchangeApprovalStatus {
  APPROVED
  PENDING
  REJECTED
  NOT_SENT
}

enum NotificationType {
  TASK_ASSIGNED
  COMMENT_ADDED
  VERSION_UPLOADED
  TASK_APPROVED
  TASK_REJECTED
  TASK_PUBLISHED
  EXPIRY_WARNING
  FOLLOW_UP
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  username  String    @unique
  email     String    @unique
  password  String
  fullName  String
  role      Role
  isActive  Boolean   @default(true)
  team      String?
  lastLogin DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  createdTasks      Task[]             @relation("CreatedBy")
  complianceTasks   Task[]             @relation("AssignedToCompliance")
  comments          Comment[]
  versions          Version[]
  auditLogs         AuditLog[]
  notifications     Notification[]
  absences          Absence[]          @relation("AbsentUser")
  createdAbsences   Absence[]          @relation("CreatedAbsenceBy")
  exchangeApprovals ExchangeApproval[]

  @@map("users")
}

model Task {
  id                  String     @id @default(auto()) @map("_id") @db.ObjectId
  uin                 String     @unique // Auto-generated unique task ID
  title               String
  description         String?
  taskType            TaskType?
  status              TaskStatus @default(OPEN)
  expectedPublishDate DateTime?
  platform            String?
  category            String?
  remarks             String?

  // Approval fields
  approvalDate     DateTime?
  expiryDate       DateTime?
  approvalProofUrl String?

  // Publishing fields
  publishDate      DateTime?
  publishedCopyUrl String?

  // Closure fields
  closureComments String?
  closureDate     DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  createdBy String @db.ObjectId
  creator   User   @relation("CreatedBy", fields: [createdBy], references: [id])

  // Many-to-many relationship using array of ObjectIds
  assignedProductIds String[] @db.ObjectId

  assignedComplianceId String? @db.ObjectId
  assignedCompliance   User?   @relation("AssignedToCompliance", fields: [assignedComplianceId], references: [id])

  versions          Version[]
  comments          Comment[]
  exchangeApprovals ExchangeApproval[]
  auditLogs         AuditLog[]
  notifications     Notification[]

  @@map("tasks")
}

model Version {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  versionNumber String // e.g., "1.0", "1.1", "1.2"
  fileUrls      String[] // Array of file URLs
  remarks       String?
  uploadedAt    DateTime @default(now())

  // Relations
  taskId String @db.ObjectId
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  uploadedById String @db.ObjectId
  uploadedBy   User   @relation(fields: [uploadedById], references: [id])

  comments Comment[]

  @@map("versions")
}

model Comment {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  content     String
  attachments String[] // Array of file URLs
  isGlobal    Boolean  @default(false) // Global comment or version-specific
  createdAt   DateTime @default(now())

  // Relations
  taskId String @db.ObjectId
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  versionId String?  @db.ObjectId
  version   Version? @relation(fields: [versionId], references: [id], onDelete: Cascade)

  authorId String @db.ObjectId
  author   User   @relation(fields: [authorId], references: [id])

  @@map("comments")
}

model ExchangeApproval {
  id               String                 @id @default(auto()) @map("_id") @db.ObjectId
  exchangeName     String // NSE, BSE, MCX, NCDEX
  typeOfContent    String
  approvalStatus   ExchangeApprovalStatus @default(NOT_SENT)
  approvalDate     DateTime?
  expiryDate       DateTime?
  referenceNumber  String?
  approvalEmailUrl String? // URL to uploaded email copy
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt

  // Relations
  taskId String @db.ObjectId
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  updatedById String? @db.ObjectId
  updatedBy   User?   @relation(fields: [updatedById], references: [id])

  @@map("exchange_approvals")
}

model Notification {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  message   String
  type      NotificationType
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  // Relations
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  taskId String? @db.ObjectId
  task   Task?   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model AuditLog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  action    String // e.g., "TASK_CREATED", "VERSION_UPLOADED", "STATUS_CHANGED"
  details   String // Detailed description
  timestamp DateTime @default(now())

  // Relations
  performedBy     String @db.ObjectId
  performedByUser User   @relation(fields: [performedBy], references: [id])

  taskId String? @db.ObjectId
  task   Task?   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("audit_logs")
}

model Absence {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  fromDate  DateTime
  toDate    DateTime
  reason    String?
  createdAt DateTime @default(now())

  // Relations
  userId String @db.ObjectId
  user   User   @relation("AbsentUser", fields: [userId], references: [id], onDelete: Cascade)

  createdById String @db.ObjectId
  createdBy   User   @relation("CreatedAbsenceBy", fields: [createdById], references: [id])

  @@map("absences")
}
