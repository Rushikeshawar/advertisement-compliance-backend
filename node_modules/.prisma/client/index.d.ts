
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Task
 * 
 */
export type Task = $Result.DefaultSelection<Prisma.$TaskPayload>
/**
 * Model Version
 * 
 */
export type Version = $Result.DefaultSelection<Prisma.$VersionPayload>
/**
 * Model Comment
 * 
 */
export type Comment = $Result.DefaultSelection<Prisma.$CommentPayload>
/**
 * Model ExchangeApproval
 * 
 */
export type ExchangeApproval = $Result.DefaultSelection<Prisma.$ExchangeApprovalPayload>
/**
 * Model Notification
 * 
 */
export type Notification = $Result.DefaultSelection<Prisma.$NotificationPayload>
/**
 * Model AuditLog
 * 
 */
export type AuditLog = $Result.DefaultSelection<Prisma.$AuditLogPayload>
/**
 * Model Absence
 * 
 */
export type Absence = $Result.DefaultSelection<Prisma.$AbsencePayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  PRODUCT_USER: 'PRODUCT_USER',
  PRODUCT_ADMIN: 'PRODUCT_ADMIN',
  COMPLIANCE_USER: 'COMPLIANCE_USER',
  COMPLIANCE_ADMIN: 'COMPLIANCE_ADMIN',
  SENIOR_MANAGER: 'SENIOR_MANAGER',
  ADMIN: 'ADMIN'
};

export type Role = (typeof Role)[keyof typeof Role]


export const TaskType: {
  INTERNAL: 'INTERNAL',
  EXCHANGE: 'EXCHANGE'
};

export type TaskType = (typeof TaskType)[keyof typeof TaskType]


export const TaskStatus: {
  OPEN: 'OPEN',
  COMPLIANCE_REVIEW: 'COMPLIANCE_REVIEW',
  PRODUCT_REVIEW: 'PRODUCT_REVIEW',
  APPROVED: 'APPROVED',
  PUBLISHED: 'PUBLISHED',
  CLOSED_INTERNAL: 'CLOSED_INTERNAL',
  CLOSED_EXCHANGE: 'CLOSED_EXCHANGE',
  EXPIRED: 'EXPIRED'
};

export type TaskStatus = (typeof TaskStatus)[keyof typeof TaskStatus]


export const ExchangeApprovalStatus: {
  APPROVED: 'APPROVED',
  PENDING: 'PENDING',
  REJECTED: 'REJECTED',
  NOT_SENT: 'NOT_SENT'
};

export type ExchangeApprovalStatus = (typeof ExchangeApprovalStatus)[keyof typeof ExchangeApprovalStatus]


export const NotificationType: {
  TASK_ASSIGNED: 'TASK_ASSIGNED',
  COMMENT_ADDED: 'COMMENT_ADDED',
  VERSION_UPLOADED: 'VERSION_UPLOADED',
  TASK_APPROVED: 'TASK_APPROVED',
  TASK_REJECTED: 'TASK_REJECTED',
  TASK_PUBLISHED: 'TASK_PUBLISHED',
  EXPIRY_WARNING: 'EXPIRY_WARNING',
  FOLLOW_UP: 'FOLLOW_UP'
};

export type NotificationType = (typeof NotificationType)[keyof typeof NotificationType]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type TaskType = $Enums.TaskType

export const TaskType: typeof $Enums.TaskType

export type TaskStatus = $Enums.TaskStatus

export const TaskStatus: typeof $Enums.TaskStatus

export type ExchangeApprovalStatus = $Enums.ExchangeApprovalStatus

export const ExchangeApprovalStatus: typeof $Enums.ExchangeApprovalStatus

export type NotificationType = $Enums.NotificationType

export const NotificationType: typeof $Enums.NotificationType

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P]): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number }): $Utils.JsPromise<R>

  /**
   * Executes a raw MongoDB command and returns the result of it.
   * @example
   * ```
   * const user = await prisma.$runCommandRaw({
   *   aggregate: 'User',
   *   pipeline: [{ $match: { name: 'Bob' } }, { $project: { email: true, _id: false } }],
   *   explain: false,
   * })
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $runCommandRaw(command: Prisma.InputJsonObject): Prisma.PrismaPromise<Prisma.JsonObject>

  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.task`: Exposes CRUD operations for the **Task** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tasks
    * const tasks = await prisma.task.findMany()
    * ```
    */
  get task(): Prisma.TaskDelegate<ExtArgs>;

  /**
   * `prisma.version`: Exposes CRUD operations for the **Version** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Versions
    * const versions = await prisma.version.findMany()
    * ```
    */
  get version(): Prisma.VersionDelegate<ExtArgs>;

  /**
   * `prisma.comment`: Exposes CRUD operations for the **Comment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comments
    * const comments = await prisma.comment.findMany()
    * ```
    */
  get comment(): Prisma.CommentDelegate<ExtArgs>;

  /**
   * `prisma.exchangeApproval`: Exposes CRUD operations for the **ExchangeApproval** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ExchangeApprovals
    * const exchangeApprovals = await prisma.exchangeApproval.findMany()
    * ```
    */
  get exchangeApproval(): Prisma.ExchangeApprovalDelegate<ExtArgs>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<ExtArgs>;

  /**
   * `prisma.auditLog`: Exposes CRUD operations for the **AuditLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AuditLogs
    * const auditLogs = await prisma.auditLog.findMany()
    * ```
    */
  get auditLog(): Prisma.AuditLogDelegate<ExtArgs>;

  /**
   * `prisma.absence`: Exposes CRUD operations for the **Absence** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Absences
    * const absences = await prisma.absence.findMany()
    * ```
    */
  get absence(): Prisma.AbsenceDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Task: 'Task',
    Version: 'Version',
    Comment: 'Comment',
    ExchangeApproval: 'ExchangeApproval',
    Notification: 'Notification',
    AuditLog: 'AuditLog',
    Absence: 'Absence'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "task" | "version" | "comment" | "exchangeApproval" | "notification" | "auditLog" | "absence"
      txIsolationLevel: never
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.UserFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.UserAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Task: {
        payload: Prisma.$TaskPayload<ExtArgs>
        fields: Prisma.TaskFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TaskFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TaskFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          findFirst: {
            args: Prisma.TaskFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TaskFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          findMany: {
            args: Prisma.TaskFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>[]
          }
          create: {
            args: Prisma.TaskCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          createMany: {
            args: Prisma.TaskCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.TaskDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          update: {
            args: Prisma.TaskUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          deleteMany: {
            args: Prisma.TaskDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TaskUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TaskUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          aggregate: {
            args: Prisma.TaskAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTask>
          }
          groupBy: {
            args: Prisma.TaskGroupByArgs<ExtArgs>
            result: $Utils.Optional<TaskGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.TaskFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.TaskAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.TaskCountArgs<ExtArgs>
            result: $Utils.Optional<TaskCountAggregateOutputType> | number
          }
        }
      }
      Version: {
        payload: Prisma.$VersionPayload<ExtArgs>
        fields: Prisma.VersionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VersionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VersionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VersionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VersionPayload>
          }
          findFirst: {
            args: Prisma.VersionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VersionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VersionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VersionPayload>
          }
          findMany: {
            args: Prisma.VersionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VersionPayload>[]
          }
          create: {
            args: Prisma.VersionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VersionPayload>
          }
          createMany: {
            args: Prisma.VersionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.VersionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VersionPayload>
          }
          update: {
            args: Prisma.VersionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VersionPayload>
          }
          deleteMany: {
            args: Prisma.VersionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VersionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.VersionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VersionPayload>
          }
          aggregate: {
            args: Prisma.VersionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVersion>
          }
          groupBy: {
            args: Prisma.VersionGroupByArgs<ExtArgs>
            result: $Utils.Optional<VersionGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.VersionFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.VersionAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.VersionCountArgs<ExtArgs>
            result: $Utils.Optional<VersionCountAggregateOutputType> | number
          }
        }
      }
      Comment: {
        payload: Prisma.$CommentPayload<ExtArgs>
        fields: Prisma.CommentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CommentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CommentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findFirst: {
            args: Prisma.CommentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CommentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findMany: {
            args: Prisma.CommentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          create: {
            args: Prisma.CommentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          createMany: {
            args: Prisma.CommentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CommentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          update: {
            args: Prisma.CommentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          deleteMany: {
            args: Prisma.CommentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CommentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CommentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          aggregate: {
            args: Prisma.CommentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateComment>
          }
          groupBy: {
            args: Prisma.CommentGroupByArgs<ExtArgs>
            result: $Utils.Optional<CommentGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.CommentFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.CommentAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.CommentCountArgs<ExtArgs>
            result: $Utils.Optional<CommentCountAggregateOutputType> | number
          }
        }
      }
      ExchangeApproval: {
        payload: Prisma.$ExchangeApprovalPayload<ExtArgs>
        fields: Prisma.ExchangeApprovalFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ExchangeApprovalFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExchangeApprovalPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ExchangeApprovalFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExchangeApprovalPayload>
          }
          findFirst: {
            args: Prisma.ExchangeApprovalFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExchangeApprovalPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ExchangeApprovalFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExchangeApprovalPayload>
          }
          findMany: {
            args: Prisma.ExchangeApprovalFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExchangeApprovalPayload>[]
          }
          create: {
            args: Prisma.ExchangeApprovalCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExchangeApprovalPayload>
          }
          createMany: {
            args: Prisma.ExchangeApprovalCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ExchangeApprovalDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExchangeApprovalPayload>
          }
          update: {
            args: Prisma.ExchangeApprovalUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExchangeApprovalPayload>
          }
          deleteMany: {
            args: Prisma.ExchangeApprovalDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ExchangeApprovalUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ExchangeApprovalUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExchangeApprovalPayload>
          }
          aggregate: {
            args: Prisma.ExchangeApprovalAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateExchangeApproval>
          }
          groupBy: {
            args: Prisma.ExchangeApprovalGroupByArgs<ExtArgs>
            result: $Utils.Optional<ExchangeApprovalGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.ExchangeApprovalFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.ExchangeApprovalAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.ExchangeApprovalCountArgs<ExtArgs>
            result: $Utils.Optional<ExchangeApprovalCountAggregateOutputType> | number
          }
        }
      }
      Notification: {
        payload: Prisma.$NotificationPayload<ExtArgs>
        fields: Prisma.NotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findFirst: {
            args: Prisma.NotificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findMany: {
            args: Prisma.NotificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          create: {
            args: Prisma.NotificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          createMany: {
            args: Prisma.NotificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.NotificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          update: {
            args: Prisma.NotificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          deleteMany: {
            args: Prisma.NotificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NotificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotification>
          }
          groupBy: {
            args: Prisma.NotificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.NotificationFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.NotificationAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.NotificationCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationCountAggregateOutputType> | number
          }
        }
      }
      AuditLog: {
        payload: Prisma.$AuditLogPayload<ExtArgs>
        fields: Prisma.AuditLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AuditLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuditLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findFirst: {
            args: Prisma.AuditLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuditLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findMany: {
            args: Prisma.AuditLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          create: {
            args: Prisma.AuditLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          createMany: {
            args: Prisma.AuditLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AuditLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          update: {
            args: Prisma.AuditLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          deleteMany: {
            args: Prisma.AuditLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AuditLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AuditLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          aggregate: {
            args: Prisma.AuditLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAuditLog>
          }
          groupBy: {
            args: Prisma.AuditLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<AuditLogGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.AuditLogFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.AuditLogAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.AuditLogCountArgs<ExtArgs>
            result: $Utils.Optional<AuditLogCountAggregateOutputType> | number
          }
        }
      }
      Absence: {
        payload: Prisma.$AbsencePayload<ExtArgs>
        fields: Prisma.AbsenceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AbsenceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AbsencePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AbsenceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AbsencePayload>
          }
          findFirst: {
            args: Prisma.AbsenceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AbsencePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AbsenceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AbsencePayload>
          }
          findMany: {
            args: Prisma.AbsenceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AbsencePayload>[]
          }
          create: {
            args: Prisma.AbsenceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AbsencePayload>
          }
          createMany: {
            args: Prisma.AbsenceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AbsenceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AbsencePayload>
          }
          update: {
            args: Prisma.AbsenceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AbsencePayload>
          }
          deleteMany: {
            args: Prisma.AbsenceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AbsenceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AbsenceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AbsencePayload>
          }
          aggregate: {
            args: Prisma.AbsenceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAbsence>
          }
          groupBy: {
            args: Prisma.AbsenceGroupByArgs<ExtArgs>
            result: $Utils.Optional<AbsenceGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.AbsenceFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.AbsenceAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.AbsenceCountArgs<ExtArgs>
            result: $Utils.Optional<AbsenceCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $runCommandRaw: {
          args: Prisma.InputJsonObject,
          result: Prisma.JsonObject
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    createdTasks: number
    complianceTasks: number
    comments: number
    versions: number
    auditLogs: number
    notifications: number
    absences: number
    createdAbsences: number
    exchangeApprovals: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdTasks?: boolean | UserCountOutputTypeCountCreatedTasksArgs
    complianceTasks?: boolean | UserCountOutputTypeCountComplianceTasksArgs
    comments?: boolean | UserCountOutputTypeCountCommentsArgs
    versions?: boolean | UserCountOutputTypeCountVersionsArgs
    auditLogs?: boolean | UserCountOutputTypeCountAuditLogsArgs
    notifications?: boolean | UserCountOutputTypeCountNotificationsArgs
    absences?: boolean | UserCountOutputTypeCountAbsencesArgs
    createdAbsences?: boolean | UserCountOutputTypeCountCreatedAbsencesArgs
    exchangeApprovals?: boolean | UserCountOutputTypeCountExchangeApprovalsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountComplianceTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountVersionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VersionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAuditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAbsencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AbsenceWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedAbsencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AbsenceWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountExchangeApprovalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExchangeApprovalWhereInput
  }


  /**
   * Count Type TaskCountOutputType
   */

  export type TaskCountOutputType = {
    versions: number
    comments: number
    exchangeApprovals: number
    auditLogs: number
    notifications: number
  }

  export type TaskCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    versions?: boolean | TaskCountOutputTypeCountVersionsArgs
    comments?: boolean | TaskCountOutputTypeCountCommentsArgs
    exchangeApprovals?: boolean | TaskCountOutputTypeCountExchangeApprovalsArgs
    auditLogs?: boolean | TaskCountOutputTypeCountAuditLogsArgs
    notifications?: boolean | TaskCountOutputTypeCountNotificationsArgs
  }

  // Custom InputTypes
  /**
   * TaskCountOutputType without action
   */
  export type TaskCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskCountOutputType
     */
    select?: TaskCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TaskCountOutputType without action
   */
  export type TaskCountOutputTypeCountVersionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VersionWhereInput
  }

  /**
   * TaskCountOutputType without action
   */
  export type TaskCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }

  /**
   * TaskCountOutputType without action
   */
  export type TaskCountOutputTypeCountExchangeApprovalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExchangeApprovalWhereInput
  }

  /**
   * TaskCountOutputType without action
   */
  export type TaskCountOutputTypeCountAuditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
  }

  /**
   * TaskCountOutputType without action
   */
  export type TaskCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }


  /**
   * Count Type VersionCountOutputType
   */

  export type VersionCountOutputType = {
    comments: number
  }

  export type VersionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    comments?: boolean | VersionCountOutputTypeCountCommentsArgs
  }

  // Custom InputTypes
  /**
   * VersionCountOutputType without action
   */
  export type VersionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VersionCountOutputType
     */
    select?: VersionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * VersionCountOutputType without action
   */
  export type VersionCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    username: string | null
    email: string | null
    password: string | null
    fullName: string | null
    role: $Enums.Role | null
    isActive: boolean | null
    team: string | null
    lastLogin: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    username: string | null
    email: string | null
    password: string | null
    fullName: string | null
    role: $Enums.Role | null
    isActive: boolean | null
    team: string | null
    lastLogin: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    username: number
    email: number
    password: number
    fullName: number
    role: number
    isActive: number
    team: number
    lastLogin: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    username?: true
    email?: true
    password?: true
    fullName?: true
    role?: true
    isActive?: true
    team?: true
    lastLogin?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    username?: true
    email?: true
    password?: true
    fullName?: true
    role?: true
    isActive?: true
    team?: true
    lastLogin?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    username?: true
    email?: true
    password?: true
    fullName?: true
    role?: true
    isActive?: true
    team?: true
    lastLogin?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    username: string
    email: string
    password: string
    fullName: string
    role: $Enums.Role
    isActive: boolean
    team: string | null
    lastLogin: Date | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    fullName?: boolean
    role?: boolean
    isActive?: boolean
    team?: boolean
    lastLogin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdTasks?: boolean | User$createdTasksArgs<ExtArgs>
    complianceTasks?: boolean | User$complianceTasksArgs<ExtArgs>
    comments?: boolean | User$commentsArgs<ExtArgs>
    versions?: boolean | User$versionsArgs<ExtArgs>
    auditLogs?: boolean | User$auditLogsArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    absences?: boolean | User$absencesArgs<ExtArgs>
    createdAbsences?: boolean | User$createdAbsencesArgs<ExtArgs>
    exchangeApprovals?: boolean | User$exchangeApprovalsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>


  export type UserSelectScalar = {
    id?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    fullName?: boolean
    role?: boolean
    isActive?: boolean
    team?: boolean
    lastLogin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdTasks?: boolean | User$createdTasksArgs<ExtArgs>
    complianceTasks?: boolean | User$complianceTasksArgs<ExtArgs>
    comments?: boolean | User$commentsArgs<ExtArgs>
    versions?: boolean | User$versionsArgs<ExtArgs>
    auditLogs?: boolean | User$auditLogsArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    absences?: boolean | User$absencesArgs<ExtArgs>
    createdAbsences?: boolean | User$createdAbsencesArgs<ExtArgs>
    exchangeApprovals?: boolean | User$exchangeApprovalsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      createdTasks: Prisma.$TaskPayload<ExtArgs>[]
      complianceTasks: Prisma.$TaskPayload<ExtArgs>[]
      comments: Prisma.$CommentPayload<ExtArgs>[]
      versions: Prisma.$VersionPayload<ExtArgs>[]
      auditLogs: Prisma.$AuditLogPayload<ExtArgs>[]
      notifications: Prisma.$NotificationPayload<ExtArgs>[]
      absences: Prisma.$AbsencePayload<ExtArgs>[]
      createdAbsences: Prisma.$AbsencePayload<ExtArgs>[]
      exchangeApprovals: Prisma.$ExchangeApprovalPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      username: string
      email: string
      password: string
      fullName: string
      role: $Enums.Role
      isActive: boolean
      team: string | null
      lastLogin: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * @param {UserFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const user = await prisma.user.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
     */
    findRaw(args?: UserFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a User.
     * @param {UserAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const user = await prisma.user.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: UserAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    createdTasks<T extends User$createdTasksArgs<ExtArgs> = {}>(args?: Subset<T, User$createdTasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findMany"> | Null>
    complianceTasks<T extends User$complianceTasksArgs<ExtArgs> = {}>(args?: Subset<T, User$complianceTasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findMany"> | Null>
    comments<T extends User$commentsArgs<ExtArgs> = {}>(args?: Subset<T, User$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany"> | Null>
    versions<T extends User$versionsArgs<ExtArgs> = {}>(args?: Subset<T, User$versionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VersionPayload<ExtArgs>, T, "findMany"> | Null>
    auditLogs<T extends User$auditLogsArgs<ExtArgs> = {}>(args?: Subset<T, User$auditLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany"> | Null>
    notifications<T extends User$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, User$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany"> | Null>
    absences<T extends User$absencesArgs<ExtArgs> = {}>(args?: Subset<T, User$absencesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AbsencePayload<ExtArgs>, T, "findMany"> | Null>
    createdAbsences<T extends User$createdAbsencesArgs<ExtArgs> = {}>(args?: Subset<T, User$createdAbsencesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AbsencePayload<ExtArgs>, T, "findMany"> | Null>
    exchangeApprovals<T extends User$exchangeApprovalsArgs<ExtArgs> = {}>(args?: Subset<T, User$exchangeApprovalsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExchangeApprovalPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly fullName: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'Role'>
    readonly isActive: FieldRef<"User", 'Boolean'>
    readonly team: FieldRef<"User", 'String'>
    readonly lastLogin: FieldRef<"User", 'DateTime'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User findRaw
   */
  export type UserFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * User aggregateRaw
   */
  export type UserAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * User.createdTasks
   */
  export type User$createdTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    where?: TaskWhereInput
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    cursor?: TaskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * User.complianceTasks
   */
  export type User$complianceTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    where?: TaskWhereInput
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    cursor?: TaskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * User.comments
   */
  export type User$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * User.versions
   */
  export type User$versionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Version
     */
    select?: VersionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VersionInclude<ExtArgs> | null
    where?: VersionWhereInput
    orderBy?: VersionOrderByWithRelationInput | VersionOrderByWithRelationInput[]
    cursor?: VersionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VersionScalarFieldEnum | VersionScalarFieldEnum[]
  }

  /**
   * User.auditLogs
   */
  export type User$auditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    cursor?: AuditLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * User.notifications
   */
  export type User$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * User.absences
   */
  export type User$absencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Absence
     */
    select?: AbsenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AbsenceInclude<ExtArgs> | null
    where?: AbsenceWhereInput
    orderBy?: AbsenceOrderByWithRelationInput | AbsenceOrderByWithRelationInput[]
    cursor?: AbsenceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AbsenceScalarFieldEnum | AbsenceScalarFieldEnum[]
  }

  /**
   * User.createdAbsences
   */
  export type User$createdAbsencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Absence
     */
    select?: AbsenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AbsenceInclude<ExtArgs> | null
    where?: AbsenceWhereInput
    orderBy?: AbsenceOrderByWithRelationInput | AbsenceOrderByWithRelationInput[]
    cursor?: AbsenceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AbsenceScalarFieldEnum | AbsenceScalarFieldEnum[]
  }

  /**
   * User.exchangeApprovals
   */
  export type User$exchangeApprovalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExchangeApproval
     */
    select?: ExchangeApprovalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExchangeApprovalInclude<ExtArgs> | null
    where?: ExchangeApprovalWhereInput
    orderBy?: ExchangeApprovalOrderByWithRelationInput | ExchangeApprovalOrderByWithRelationInput[]
    cursor?: ExchangeApprovalWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExchangeApprovalScalarFieldEnum | ExchangeApprovalScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Task
   */

  export type AggregateTask = {
    _count: TaskCountAggregateOutputType | null
    _min: TaskMinAggregateOutputType | null
    _max: TaskMaxAggregateOutputType | null
  }

  export type TaskMinAggregateOutputType = {
    id: string | null
    uin: string | null
    title: string | null
    description: string | null
    taskType: $Enums.TaskType | null
    status: $Enums.TaskStatus | null
    expectedPublishDate: Date | null
    platform: string | null
    category: string | null
    remarks: string | null
    approvalDate: Date | null
    expiryDate: Date | null
    approvalProofUrl: string | null
    publishDate: Date | null
    publishedCopyUrl: string | null
    closureComments: string | null
    closureDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    createdBy: string | null
    assignedComplianceId: string | null
  }

  export type TaskMaxAggregateOutputType = {
    id: string | null
    uin: string | null
    title: string | null
    description: string | null
    taskType: $Enums.TaskType | null
    status: $Enums.TaskStatus | null
    expectedPublishDate: Date | null
    platform: string | null
    category: string | null
    remarks: string | null
    approvalDate: Date | null
    expiryDate: Date | null
    approvalProofUrl: string | null
    publishDate: Date | null
    publishedCopyUrl: string | null
    closureComments: string | null
    closureDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    createdBy: string | null
    assignedComplianceId: string | null
  }

  export type TaskCountAggregateOutputType = {
    id: number
    uin: number
    title: number
    description: number
    taskType: number
    status: number
    expectedPublishDate: number
    platform: number
    category: number
    remarks: number
    approvalDate: number
    expiryDate: number
    approvalProofUrl: number
    publishDate: number
    publishedCopyUrl: number
    closureComments: number
    closureDate: number
    createdAt: number
    updatedAt: number
    createdBy: number
    assignedProductIds: number
    assignedComplianceId: number
    _all: number
  }


  export type TaskMinAggregateInputType = {
    id?: true
    uin?: true
    title?: true
    description?: true
    taskType?: true
    status?: true
    expectedPublishDate?: true
    platform?: true
    category?: true
    remarks?: true
    approvalDate?: true
    expiryDate?: true
    approvalProofUrl?: true
    publishDate?: true
    publishedCopyUrl?: true
    closureComments?: true
    closureDate?: true
    createdAt?: true
    updatedAt?: true
    createdBy?: true
    assignedComplianceId?: true
  }

  export type TaskMaxAggregateInputType = {
    id?: true
    uin?: true
    title?: true
    description?: true
    taskType?: true
    status?: true
    expectedPublishDate?: true
    platform?: true
    category?: true
    remarks?: true
    approvalDate?: true
    expiryDate?: true
    approvalProofUrl?: true
    publishDate?: true
    publishedCopyUrl?: true
    closureComments?: true
    closureDate?: true
    createdAt?: true
    updatedAt?: true
    createdBy?: true
    assignedComplianceId?: true
  }

  export type TaskCountAggregateInputType = {
    id?: true
    uin?: true
    title?: true
    description?: true
    taskType?: true
    status?: true
    expectedPublishDate?: true
    platform?: true
    category?: true
    remarks?: true
    approvalDate?: true
    expiryDate?: true
    approvalProofUrl?: true
    publishDate?: true
    publishedCopyUrl?: true
    closureComments?: true
    closureDate?: true
    createdAt?: true
    updatedAt?: true
    createdBy?: true
    assignedProductIds?: true
    assignedComplianceId?: true
    _all?: true
  }

  export type TaskAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Task to aggregate.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tasks
    **/
    _count?: true | TaskCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TaskMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TaskMaxAggregateInputType
  }

  export type GetTaskAggregateType<T extends TaskAggregateArgs> = {
        [P in keyof T & keyof AggregateTask]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTask[P]>
      : GetScalarType<T[P], AggregateTask[P]>
  }




  export type TaskGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskWhereInput
    orderBy?: TaskOrderByWithAggregationInput | TaskOrderByWithAggregationInput[]
    by: TaskScalarFieldEnum[] | TaskScalarFieldEnum
    having?: TaskScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TaskCountAggregateInputType | true
    _min?: TaskMinAggregateInputType
    _max?: TaskMaxAggregateInputType
  }

  export type TaskGroupByOutputType = {
    id: string
    uin: string
    title: string
    description: string | null
    taskType: $Enums.TaskType | null
    status: $Enums.TaskStatus
    expectedPublishDate: Date | null
    platform: string | null
    category: string | null
    remarks: string | null
    approvalDate: Date | null
    expiryDate: Date | null
    approvalProofUrl: string | null
    publishDate: Date | null
    publishedCopyUrl: string | null
    closureComments: string | null
    closureDate: Date | null
    createdAt: Date
    updatedAt: Date
    createdBy: string
    assignedProductIds: string[]
    assignedComplianceId: string | null
    _count: TaskCountAggregateOutputType | null
    _min: TaskMinAggregateOutputType | null
    _max: TaskMaxAggregateOutputType | null
  }

  type GetTaskGroupByPayload<T extends TaskGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TaskGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TaskGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TaskGroupByOutputType[P]>
            : GetScalarType<T[P], TaskGroupByOutputType[P]>
        }
      >
    >


  export type TaskSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    uin?: boolean
    title?: boolean
    description?: boolean
    taskType?: boolean
    status?: boolean
    expectedPublishDate?: boolean
    platform?: boolean
    category?: boolean
    remarks?: boolean
    approvalDate?: boolean
    expiryDate?: boolean
    approvalProofUrl?: boolean
    publishDate?: boolean
    publishedCopyUrl?: boolean
    closureComments?: boolean
    closureDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean
    assignedProductIds?: boolean
    assignedComplianceId?: boolean
    creator?: boolean | UserDefaultArgs<ExtArgs>
    assignedCompliance?: boolean | Task$assignedComplianceArgs<ExtArgs>
    versions?: boolean | Task$versionsArgs<ExtArgs>
    comments?: boolean | Task$commentsArgs<ExtArgs>
    exchangeApprovals?: boolean | Task$exchangeApprovalsArgs<ExtArgs>
    auditLogs?: boolean | Task$auditLogsArgs<ExtArgs>
    notifications?: boolean | Task$notificationsArgs<ExtArgs>
    _count?: boolean | TaskCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["task"]>


  export type TaskSelectScalar = {
    id?: boolean
    uin?: boolean
    title?: boolean
    description?: boolean
    taskType?: boolean
    status?: boolean
    expectedPublishDate?: boolean
    platform?: boolean
    category?: boolean
    remarks?: boolean
    approvalDate?: boolean
    expiryDate?: boolean
    approvalProofUrl?: boolean
    publishDate?: boolean
    publishedCopyUrl?: boolean
    closureComments?: boolean
    closureDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean
    assignedProductIds?: boolean
    assignedComplianceId?: boolean
  }

  export type TaskInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | UserDefaultArgs<ExtArgs>
    assignedCompliance?: boolean | Task$assignedComplianceArgs<ExtArgs>
    versions?: boolean | Task$versionsArgs<ExtArgs>
    comments?: boolean | Task$commentsArgs<ExtArgs>
    exchangeApprovals?: boolean | Task$exchangeApprovalsArgs<ExtArgs>
    auditLogs?: boolean | Task$auditLogsArgs<ExtArgs>
    notifications?: boolean | Task$notificationsArgs<ExtArgs>
    _count?: boolean | TaskCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $TaskPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Task"
    objects: {
      creator: Prisma.$UserPayload<ExtArgs>
      assignedCompliance: Prisma.$UserPayload<ExtArgs> | null
      versions: Prisma.$VersionPayload<ExtArgs>[]
      comments: Prisma.$CommentPayload<ExtArgs>[]
      exchangeApprovals: Prisma.$ExchangeApprovalPayload<ExtArgs>[]
      auditLogs: Prisma.$AuditLogPayload<ExtArgs>[]
      notifications: Prisma.$NotificationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      uin: string
      title: string
      description: string | null
      taskType: $Enums.TaskType | null
      status: $Enums.TaskStatus
      expectedPublishDate: Date | null
      platform: string | null
      category: string | null
      remarks: string | null
      approvalDate: Date | null
      expiryDate: Date | null
      approvalProofUrl: string | null
      publishDate: Date | null
      publishedCopyUrl: string | null
      closureComments: string | null
      closureDate: Date | null
      createdAt: Date
      updatedAt: Date
      createdBy: string
      assignedProductIds: string[]
      assignedComplianceId: string | null
    }, ExtArgs["result"]["task"]>
    composites: {}
  }

  type TaskGetPayload<S extends boolean | null | undefined | TaskDefaultArgs> = $Result.GetResult<Prisma.$TaskPayload, S>

  type TaskCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TaskFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TaskCountAggregateInputType | true
    }

  export interface TaskDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Task'], meta: { name: 'Task' } }
    /**
     * Find zero or one Task that matches the filter.
     * @param {TaskFindUniqueArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TaskFindUniqueArgs>(args: SelectSubset<T, TaskFindUniqueArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Task that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TaskFindUniqueOrThrowArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TaskFindUniqueOrThrowArgs>(args: SelectSubset<T, TaskFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Task that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindFirstArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TaskFindFirstArgs>(args?: SelectSubset<T, TaskFindFirstArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Task that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindFirstOrThrowArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TaskFindFirstOrThrowArgs>(args?: SelectSubset<T, TaskFindFirstOrThrowArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Tasks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tasks
     * const tasks = await prisma.task.findMany()
     * 
     * // Get first 10 Tasks
     * const tasks = await prisma.task.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const taskWithIdOnly = await prisma.task.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TaskFindManyArgs>(args?: SelectSubset<T, TaskFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Task.
     * @param {TaskCreateArgs} args - Arguments to create a Task.
     * @example
     * // Create one Task
     * const Task = await prisma.task.create({
     *   data: {
     *     // ... data to create a Task
     *   }
     * })
     * 
     */
    create<T extends TaskCreateArgs>(args: SelectSubset<T, TaskCreateArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Tasks.
     * @param {TaskCreateManyArgs} args - Arguments to create many Tasks.
     * @example
     * // Create many Tasks
     * const task = await prisma.task.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TaskCreateManyArgs>(args?: SelectSubset<T, TaskCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Task.
     * @param {TaskDeleteArgs} args - Arguments to delete one Task.
     * @example
     * // Delete one Task
     * const Task = await prisma.task.delete({
     *   where: {
     *     // ... filter to delete one Task
     *   }
     * })
     * 
     */
    delete<T extends TaskDeleteArgs>(args: SelectSubset<T, TaskDeleteArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Task.
     * @param {TaskUpdateArgs} args - Arguments to update one Task.
     * @example
     * // Update one Task
     * const task = await prisma.task.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TaskUpdateArgs>(args: SelectSubset<T, TaskUpdateArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Tasks.
     * @param {TaskDeleteManyArgs} args - Arguments to filter Tasks to delete.
     * @example
     * // Delete a few Tasks
     * const { count } = await prisma.task.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TaskDeleteManyArgs>(args?: SelectSubset<T, TaskDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tasks
     * const task = await prisma.task.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TaskUpdateManyArgs>(args: SelectSubset<T, TaskUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Task.
     * @param {TaskUpsertArgs} args - Arguments to update or create a Task.
     * @example
     * // Update or create a Task
     * const task = await prisma.task.upsert({
     *   create: {
     *     // ... data to create a Task
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Task we want to update
     *   }
     * })
     */
    upsert<T extends TaskUpsertArgs>(args: SelectSubset<T, TaskUpsertArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "upsert">, never, ExtArgs>

    /**
     * Find zero or more Tasks that matches the filter.
     * @param {TaskFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const task = await prisma.task.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
     */
    findRaw(args?: TaskFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Task.
     * @param {TaskAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const task = await prisma.task.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: TaskAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskCountArgs} args - Arguments to filter Tasks to count.
     * @example
     * // Count the number of Tasks
     * const count = await prisma.task.count({
     *   where: {
     *     // ... the filter for the Tasks we want to count
     *   }
     * })
    **/
    count<T extends TaskCountArgs>(
      args?: Subset<T, TaskCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TaskCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Task.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TaskAggregateArgs>(args: Subset<T, TaskAggregateArgs>): Prisma.PrismaPromise<GetTaskAggregateType<T>>

    /**
     * Group by Task.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TaskGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TaskGroupByArgs['orderBy'] }
        : { orderBy?: TaskGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TaskGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTaskGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Task model
   */
  readonly fields: TaskFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Task.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TaskClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    creator<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    assignedCompliance<T extends Task$assignedComplianceArgs<ExtArgs> = {}>(args?: Subset<T, Task$assignedComplianceArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    versions<T extends Task$versionsArgs<ExtArgs> = {}>(args?: Subset<T, Task$versionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VersionPayload<ExtArgs>, T, "findMany"> | Null>
    comments<T extends Task$commentsArgs<ExtArgs> = {}>(args?: Subset<T, Task$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany"> | Null>
    exchangeApprovals<T extends Task$exchangeApprovalsArgs<ExtArgs> = {}>(args?: Subset<T, Task$exchangeApprovalsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExchangeApprovalPayload<ExtArgs>, T, "findMany"> | Null>
    auditLogs<T extends Task$auditLogsArgs<ExtArgs> = {}>(args?: Subset<T, Task$auditLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany"> | Null>
    notifications<T extends Task$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, Task$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Task model
   */ 
  interface TaskFieldRefs {
    readonly id: FieldRef<"Task", 'String'>
    readonly uin: FieldRef<"Task", 'String'>
    readonly title: FieldRef<"Task", 'String'>
    readonly description: FieldRef<"Task", 'String'>
    readonly taskType: FieldRef<"Task", 'TaskType'>
    readonly status: FieldRef<"Task", 'TaskStatus'>
    readonly expectedPublishDate: FieldRef<"Task", 'DateTime'>
    readonly platform: FieldRef<"Task", 'String'>
    readonly category: FieldRef<"Task", 'String'>
    readonly remarks: FieldRef<"Task", 'String'>
    readonly approvalDate: FieldRef<"Task", 'DateTime'>
    readonly expiryDate: FieldRef<"Task", 'DateTime'>
    readonly approvalProofUrl: FieldRef<"Task", 'String'>
    readonly publishDate: FieldRef<"Task", 'DateTime'>
    readonly publishedCopyUrl: FieldRef<"Task", 'String'>
    readonly closureComments: FieldRef<"Task", 'String'>
    readonly closureDate: FieldRef<"Task", 'DateTime'>
    readonly createdAt: FieldRef<"Task", 'DateTime'>
    readonly updatedAt: FieldRef<"Task", 'DateTime'>
    readonly createdBy: FieldRef<"Task", 'String'>
    readonly assignedProductIds: FieldRef<"Task", 'String[]'>
    readonly assignedComplianceId: FieldRef<"Task", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Task findUnique
   */
  export type TaskFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task findUniqueOrThrow
   */
  export type TaskFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task findFirst
   */
  export type TaskFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tasks.
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tasks.
     */
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Task findFirstOrThrow
   */
  export type TaskFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tasks.
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tasks.
     */
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Task findMany
   */
  export type TaskFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Tasks to fetch.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tasks.
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Task create
   */
  export type TaskCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * The data needed to create a Task.
     */
    data: XOR<TaskCreateInput, TaskUncheckedCreateInput>
  }

  /**
   * Task createMany
   */
  export type TaskCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tasks.
     */
    data: TaskCreateManyInput | TaskCreateManyInput[]
  }

  /**
   * Task update
   */
  export type TaskUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * The data needed to update a Task.
     */
    data: XOR<TaskUpdateInput, TaskUncheckedUpdateInput>
    /**
     * Choose, which Task to update.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task updateMany
   */
  export type TaskUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tasks.
     */
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyInput>
    /**
     * Filter which Tasks to update
     */
    where?: TaskWhereInput
  }

  /**
   * Task upsert
   */
  export type TaskUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * The filter to search for the Task to update in case it exists.
     */
    where: TaskWhereUniqueInput
    /**
     * In case the Task found by the `where` argument doesn't exist, create a new Task with this data.
     */
    create: XOR<TaskCreateInput, TaskUncheckedCreateInput>
    /**
     * In case the Task was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TaskUpdateInput, TaskUncheckedUpdateInput>
  }

  /**
   * Task delete
   */
  export type TaskDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter which Task to delete.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task deleteMany
   */
  export type TaskDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tasks to delete
     */
    where?: TaskWhereInput
  }

  /**
   * Task findRaw
   */
  export type TaskFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Task aggregateRaw
   */
  export type TaskAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Task.assignedCompliance
   */
  export type Task$assignedComplianceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Task.versions
   */
  export type Task$versionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Version
     */
    select?: VersionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VersionInclude<ExtArgs> | null
    where?: VersionWhereInput
    orderBy?: VersionOrderByWithRelationInput | VersionOrderByWithRelationInput[]
    cursor?: VersionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VersionScalarFieldEnum | VersionScalarFieldEnum[]
  }

  /**
   * Task.comments
   */
  export type Task$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Task.exchangeApprovals
   */
  export type Task$exchangeApprovalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExchangeApproval
     */
    select?: ExchangeApprovalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExchangeApprovalInclude<ExtArgs> | null
    where?: ExchangeApprovalWhereInput
    orderBy?: ExchangeApprovalOrderByWithRelationInput | ExchangeApprovalOrderByWithRelationInput[]
    cursor?: ExchangeApprovalWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExchangeApprovalScalarFieldEnum | ExchangeApprovalScalarFieldEnum[]
  }

  /**
   * Task.auditLogs
   */
  export type Task$auditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    cursor?: AuditLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * Task.notifications
   */
  export type Task$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Task without action
   */
  export type TaskDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
  }


  /**
   * Model Version
   */

  export type AggregateVersion = {
    _count: VersionCountAggregateOutputType | null
    _min: VersionMinAggregateOutputType | null
    _max: VersionMaxAggregateOutputType | null
  }

  export type VersionMinAggregateOutputType = {
    id: string | null
    versionNumber: string | null
    remarks: string | null
    uploadedAt: Date | null
    taskId: string | null
    uploadedById: string | null
  }

  export type VersionMaxAggregateOutputType = {
    id: string | null
    versionNumber: string | null
    remarks: string | null
    uploadedAt: Date | null
    taskId: string | null
    uploadedById: string | null
  }

  export type VersionCountAggregateOutputType = {
    id: number
    versionNumber: number
    fileUrls: number
    remarks: number
    uploadedAt: number
    taskId: number
    uploadedById: number
    _all: number
  }


  export type VersionMinAggregateInputType = {
    id?: true
    versionNumber?: true
    remarks?: true
    uploadedAt?: true
    taskId?: true
    uploadedById?: true
  }

  export type VersionMaxAggregateInputType = {
    id?: true
    versionNumber?: true
    remarks?: true
    uploadedAt?: true
    taskId?: true
    uploadedById?: true
  }

  export type VersionCountAggregateInputType = {
    id?: true
    versionNumber?: true
    fileUrls?: true
    remarks?: true
    uploadedAt?: true
    taskId?: true
    uploadedById?: true
    _all?: true
  }

  export type VersionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Version to aggregate.
     */
    where?: VersionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Versions to fetch.
     */
    orderBy?: VersionOrderByWithRelationInput | VersionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VersionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Versions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Versions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Versions
    **/
    _count?: true | VersionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VersionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VersionMaxAggregateInputType
  }

  export type GetVersionAggregateType<T extends VersionAggregateArgs> = {
        [P in keyof T & keyof AggregateVersion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVersion[P]>
      : GetScalarType<T[P], AggregateVersion[P]>
  }




  export type VersionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VersionWhereInput
    orderBy?: VersionOrderByWithAggregationInput | VersionOrderByWithAggregationInput[]
    by: VersionScalarFieldEnum[] | VersionScalarFieldEnum
    having?: VersionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VersionCountAggregateInputType | true
    _min?: VersionMinAggregateInputType
    _max?: VersionMaxAggregateInputType
  }

  export type VersionGroupByOutputType = {
    id: string
    versionNumber: string
    fileUrls: string[]
    remarks: string | null
    uploadedAt: Date
    taskId: string
    uploadedById: string
    _count: VersionCountAggregateOutputType | null
    _min: VersionMinAggregateOutputType | null
    _max: VersionMaxAggregateOutputType | null
  }

  type GetVersionGroupByPayload<T extends VersionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VersionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VersionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VersionGroupByOutputType[P]>
            : GetScalarType<T[P], VersionGroupByOutputType[P]>
        }
      >
    >


  export type VersionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    versionNumber?: boolean
    fileUrls?: boolean
    remarks?: boolean
    uploadedAt?: boolean
    taskId?: boolean
    uploadedById?: boolean
    task?: boolean | TaskDefaultArgs<ExtArgs>
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
    comments?: boolean | Version$commentsArgs<ExtArgs>
    _count?: boolean | VersionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["version"]>


  export type VersionSelectScalar = {
    id?: boolean
    versionNumber?: boolean
    fileUrls?: boolean
    remarks?: boolean
    uploadedAt?: boolean
    taskId?: boolean
    uploadedById?: boolean
  }

  export type VersionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    task?: boolean | TaskDefaultArgs<ExtArgs>
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
    comments?: boolean | Version$commentsArgs<ExtArgs>
    _count?: boolean | VersionCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $VersionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Version"
    objects: {
      task: Prisma.$TaskPayload<ExtArgs>
      uploadedBy: Prisma.$UserPayload<ExtArgs>
      comments: Prisma.$CommentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      versionNumber: string
      fileUrls: string[]
      remarks: string | null
      uploadedAt: Date
      taskId: string
      uploadedById: string
    }, ExtArgs["result"]["version"]>
    composites: {}
  }

  type VersionGetPayload<S extends boolean | null | undefined | VersionDefaultArgs> = $Result.GetResult<Prisma.$VersionPayload, S>

  type VersionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<VersionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: VersionCountAggregateInputType | true
    }

  export interface VersionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Version'], meta: { name: 'Version' } }
    /**
     * Find zero or one Version that matches the filter.
     * @param {VersionFindUniqueArgs} args - Arguments to find a Version
     * @example
     * // Get one Version
     * const version = await prisma.version.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VersionFindUniqueArgs>(args: SelectSubset<T, VersionFindUniqueArgs<ExtArgs>>): Prisma__VersionClient<$Result.GetResult<Prisma.$VersionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Version that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {VersionFindUniqueOrThrowArgs} args - Arguments to find a Version
     * @example
     * // Get one Version
     * const version = await prisma.version.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VersionFindUniqueOrThrowArgs>(args: SelectSubset<T, VersionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VersionClient<$Result.GetResult<Prisma.$VersionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Version that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VersionFindFirstArgs} args - Arguments to find a Version
     * @example
     * // Get one Version
     * const version = await prisma.version.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VersionFindFirstArgs>(args?: SelectSubset<T, VersionFindFirstArgs<ExtArgs>>): Prisma__VersionClient<$Result.GetResult<Prisma.$VersionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Version that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VersionFindFirstOrThrowArgs} args - Arguments to find a Version
     * @example
     * // Get one Version
     * const version = await prisma.version.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VersionFindFirstOrThrowArgs>(args?: SelectSubset<T, VersionFindFirstOrThrowArgs<ExtArgs>>): Prisma__VersionClient<$Result.GetResult<Prisma.$VersionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Versions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VersionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Versions
     * const versions = await prisma.version.findMany()
     * 
     * // Get first 10 Versions
     * const versions = await prisma.version.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const versionWithIdOnly = await prisma.version.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VersionFindManyArgs>(args?: SelectSubset<T, VersionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VersionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Version.
     * @param {VersionCreateArgs} args - Arguments to create a Version.
     * @example
     * // Create one Version
     * const Version = await prisma.version.create({
     *   data: {
     *     // ... data to create a Version
     *   }
     * })
     * 
     */
    create<T extends VersionCreateArgs>(args: SelectSubset<T, VersionCreateArgs<ExtArgs>>): Prisma__VersionClient<$Result.GetResult<Prisma.$VersionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Versions.
     * @param {VersionCreateManyArgs} args - Arguments to create many Versions.
     * @example
     * // Create many Versions
     * const version = await prisma.version.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VersionCreateManyArgs>(args?: SelectSubset<T, VersionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Version.
     * @param {VersionDeleteArgs} args - Arguments to delete one Version.
     * @example
     * // Delete one Version
     * const Version = await prisma.version.delete({
     *   where: {
     *     // ... filter to delete one Version
     *   }
     * })
     * 
     */
    delete<T extends VersionDeleteArgs>(args: SelectSubset<T, VersionDeleteArgs<ExtArgs>>): Prisma__VersionClient<$Result.GetResult<Prisma.$VersionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Version.
     * @param {VersionUpdateArgs} args - Arguments to update one Version.
     * @example
     * // Update one Version
     * const version = await prisma.version.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VersionUpdateArgs>(args: SelectSubset<T, VersionUpdateArgs<ExtArgs>>): Prisma__VersionClient<$Result.GetResult<Prisma.$VersionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Versions.
     * @param {VersionDeleteManyArgs} args - Arguments to filter Versions to delete.
     * @example
     * // Delete a few Versions
     * const { count } = await prisma.version.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VersionDeleteManyArgs>(args?: SelectSubset<T, VersionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Versions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VersionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Versions
     * const version = await prisma.version.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VersionUpdateManyArgs>(args: SelectSubset<T, VersionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Version.
     * @param {VersionUpsertArgs} args - Arguments to update or create a Version.
     * @example
     * // Update or create a Version
     * const version = await prisma.version.upsert({
     *   create: {
     *     // ... data to create a Version
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Version we want to update
     *   }
     * })
     */
    upsert<T extends VersionUpsertArgs>(args: SelectSubset<T, VersionUpsertArgs<ExtArgs>>): Prisma__VersionClient<$Result.GetResult<Prisma.$VersionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>

    /**
     * Find zero or more Versions that matches the filter.
     * @param {VersionFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const version = await prisma.version.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
     */
    findRaw(args?: VersionFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Version.
     * @param {VersionAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const version = await prisma.version.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: VersionAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Versions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VersionCountArgs} args - Arguments to filter Versions to count.
     * @example
     * // Count the number of Versions
     * const count = await prisma.version.count({
     *   where: {
     *     // ... the filter for the Versions we want to count
     *   }
     * })
    **/
    count<T extends VersionCountArgs>(
      args?: Subset<T, VersionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VersionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Version.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VersionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VersionAggregateArgs>(args: Subset<T, VersionAggregateArgs>): Prisma.PrismaPromise<GetVersionAggregateType<T>>

    /**
     * Group by Version.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VersionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VersionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VersionGroupByArgs['orderBy'] }
        : { orderBy?: VersionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VersionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVersionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Version model
   */
  readonly fields: VersionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Version.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VersionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    task<T extends TaskDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TaskDefaultArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    uploadedBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    comments<T extends Version$commentsArgs<ExtArgs> = {}>(args?: Subset<T, Version$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Version model
   */ 
  interface VersionFieldRefs {
    readonly id: FieldRef<"Version", 'String'>
    readonly versionNumber: FieldRef<"Version", 'String'>
    readonly fileUrls: FieldRef<"Version", 'String[]'>
    readonly remarks: FieldRef<"Version", 'String'>
    readonly uploadedAt: FieldRef<"Version", 'DateTime'>
    readonly taskId: FieldRef<"Version", 'String'>
    readonly uploadedById: FieldRef<"Version", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Version findUnique
   */
  export type VersionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Version
     */
    select?: VersionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VersionInclude<ExtArgs> | null
    /**
     * Filter, which Version to fetch.
     */
    where: VersionWhereUniqueInput
  }

  /**
   * Version findUniqueOrThrow
   */
  export type VersionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Version
     */
    select?: VersionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VersionInclude<ExtArgs> | null
    /**
     * Filter, which Version to fetch.
     */
    where: VersionWhereUniqueInput
  }

  /**
   * Version findFirst
   */
  export type VersionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Version
     */
    select?: VersionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VersionInclude<ExtArgs> | null
    /**
     * Filter, which Version to fetch.
     */
    where?: VersionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Versions to fetch.
     */
    orderBy?: VersionOrderByWithRelationInput | VersionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Versions.
     */
    cursor?: VersionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Versions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Versions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Versions.
     */
    distinct?: VersionScalarFieldEnum | VersionScalarFieldEnum[]
  }

  /**
   * Version findFirstOrThrow
   */
  export type VersionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Version
     */
    select?: VersionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VersionInclude<ExtArgs> | null
    /**
     * Filter, which Version to fetch.
     */
    where?: VersionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Versions to fetch.
     */
    orderBy?: VersionOrderByWithRelationInput | VersionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Versions.
     */
    cursor?: VersionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Versions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Versions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Versions.
     */
    distinct?: VersionScalarFieldEnum | VersionScalarFieldEnum[]
  }

  /**
   * Version findMany
   */
  export type VersionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Version
     */
    select?: VersionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VersionInclude<ExtArgs> | null
    /**
     * Filter, which Versions to fetch.
     */
    where?: VersionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Versions to fetch.
     */
    orderBy?: VersionOrderByWithRelationInput | VersionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Versions.
     */
    cursor?: VersionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Versions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Versions.
     */
    skip?: number
    distinct?: VersionScalarFieldEnum | VersionScalarFieldEnum[]
  }

  /**
   * Version create
   */
  export type VersionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Version
     */
    select?: VersionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VersionInclude<ExtArgs> | null
    /**
     * The data needed to create a Version.
     */
    data: XOR<VersionCreateInput, VersionUncheckedCreateInput>
  }

  /**
   * Version createMany
   */
  export type VersionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Versions.
     */
    data: VersionCreateManyInput | VersionCreateManyInput[]
  }

  /**
   * Version update
   */
  export type VersionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Version
     */
    select?: VersionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VersionInclude<ExtArgs> | null
    /**
     * The data needed to update a Version.
     */
    data: XOR<VersionUpdateInput, VersionUncheckedUpdateInput>
    /**
     * Choose, which Version to update.
     */
    where: VersionWhereUniqueInput
  }

  /**
   * Version updateMany
   */
  export type VersionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Versions.
     */
    data: XOR<VersionUpdateManyMutationInput, VersionUncheckedUpdateManyInput>
    /**
     * Filter which Versions to update
     */
    where?: VersionWhereInput
  }

  /**
   * Version upsert
   */
  export type VersionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Version
     */
    select?: VersionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VersionInclude<ExtArgs> | null
    /**
     * The filter to search for the Version to update in case it exists.
     */
    where: VersionWhereUniqueInput
    /**
     * In case the Version found by the `where` argument doesn't exist, create a new Version with this data.
     */
    create: XOR<VersionCreateInput, VersionUncheckedCreateInput>
    /**
     * In case the Version was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VersionUpdateInput, VersionUncheckedUpdateInput>
  }

  /**
   * Version delete
   */
  export type VersionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Version
     */
    select?: VersionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VersionInclude<ExtArgs> | null
    /**
     * Filter which Version to delete.
     */
    where: VersionWhereUniqueInput
  }

  /**
   * Version deleteMany
   */
  export type VersionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Versions to delete
     */
    where?: VersionWhereInput
  }

  /**
   * Version findRaw
   */
  export type VersionFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Version aggregateRaw
   */
  export type VersionAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Version.comments
   */
  export type Version$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Version without action
   */
  export type VersionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Version
     */
    select?: VersionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VersionInclude<ExtArgs> | null
  }


  /**
   * Model Comment
   */

  export type AggregateComment = {
    _count: CommentCountAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  export type CommentMinAggregateOutputType = {
    id: string | null
    content: string | null
    isGlobal: boolean | null
    createdAt: Date | null
    taskId: string | null
    versionId: string | null
    authorId: string | null
  }

  export type CommentMaxAggregateOutputType = {
    id: string | null
    content: string | null
    isGlobal: boolean | null
    createdAt: Date | null
    taskId: string | null
    versionId: string | null
    authorId: string | null
  }

  export type CommentCountAggregateOutputType = {
    id: number
    content: number
    attachments: number
    isGlobal: number
    createdAt: number
    taskId: number
    versionId: number
    authorId: number
    _all: number
  }


  export type CommentMinAggregateInputType = {
    id?: true
    content?: true
    isGlobal?: true
    createdAt?: true
    taskId?: true
    versionId?: true
    authorId?: true
  }

  export type CommentMaxAggregateInputType = {
    id?: true
    content?: true
    isGlobal?: true
    createdAt?: true
    taskId?: true
    versionId?: true
    authorId?: true
  }

  export type CommentCountAggregateInputType = {
    id?: true
    content?: true
    attachments?: true
    isGlobal?: true
    createdAt?: true
    taskId?: true
    versionId?: true
    authorId?: true
    _all?: true
  }

  export type CommentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comment to aggregate.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Comments
    **/
    _count?: true | CommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommentMaxAggregateInputType
  }

  export type GetCommentAggregateType<T extends CommentAggregateArgs> = {
        [P in keyof T & keyof AggregateComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComment[P]>
      : GetScalarType<T[P], AggregateComment[P]>
  }




  export type CommentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithAggregationInput | CommentOrderByWithAggregationInput[]
    by: CommentScalarFieldEnum[] | CommentScalarFieldEnum
    having?: CommentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommentCountAggregateInputType | true
    _min?: CommentMinAggregateInputType
    _max?: CommentMaxAggregateInputType
  }

  export type CommentGroupByOutputType = {
    id: string
    content: string
    attachments: string[]
    isGlobal: boolean
    createdAt: Date
    taskId: string
    versionId: string | null
    authorId: string
    _count: CommentCountAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  type GetCommentGroupByPayload<T extends CommentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommentGroupByOutputType[P]>
            : GetScalarType<T[P], CommentGroupByOutputType[P]>
        }
      >
    >


  export type CommentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    attachments?: boolean
    isGlobal?: boolean
    createdAt?: boolean
    taskId?: boolean
    versionId?: boolean
    authorId?: boolean
    task?: boolean | TaskDefaultArgs<ExtArgs>
    version?: boolean | Comment$versionArgs<ExtArgs>
    author?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>


  export type CommentSelectScalar = {
    id?: boolean
    content?: boolean
    attachments?: boolean
    isGlobal?: boolean
    createdAt?: boolean
    taskId?: boolean
    versionId?: boolean
    authorId?: boolean
  }

  export type CommentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    task?: boolean | TaskDefaultArgs<ExtArgs>
    version?: boolean | Comment$versionArgs<ExtArgs>
    author?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $CommentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Comment"
    objects: {
      task: Prisma.$TaskPayload<ExtArgs>
      version: Prisma.$VersionPayload<ExtArgs> | null
      author: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      content: string
      attachments: string[]
      isGlobal: boolean
      createdAt: Date
      taskId: string
      versionId: string | null
      authorId: string
    }, ExtArgs["result"]["comment"]>
    composites: {}
  }

  type CommentGetPayload<S extends boolean | null | undefined | CommentDefaultArgs> = $Result.GetResult<Prisma.$CommentPayload, S>

  type CommentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CommentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CommentCountAggregateInputType | true
    }

  export interface CommentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Comment'], meta: { name: 'Comment' } }
    /**
     * Find zero or one Comment that matches the filter.
     * @param {CommentFindUniqueArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CommentFindUniqueArgs>(args: SelectSubset<T, CommentFindUniqueArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Comment that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CommentFindUniqueOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CommentFindUniqueOrThrowArgs>(args: SelectSubset<T, CommentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Comment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CommentFindFirstArgs>(args?: SelectSubset<T, CommentFindFirstArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Comment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CommentFindFirstOrThrowArgs>(args?: SelectSubset<T, CommentFindFirstOrThrowArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comments
     * const comments = await prisma.comment.findMany()
     * 
     * // Get first 10 Comments
     * const comments = await prisma.comment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commentWithIdOnly = await prisma.comment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CommentFindManyArgs>(args?: SelectSubset<T, CommentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Comment.
     * @param {CommentCreateArgs} args - Arguments to create a Comment.
     * @example
     * // Create one Comment
     * const Comment = await prisma.comment.create({
     *   data: {
     *     // ... data to create a Comment
     *   }
     * })
     * 
     */
    create<T extends CommentCreateArgs>(args: SelectSubset<T, CommentCreateArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Comments.
     * @param {CommentCreateManyArgs} args - Arguments to create many Comments.
     * @example
     * // Create many Comments
     * const comment = await prisma.comment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CommentCreateManyArgs>(args?: SelectSubset<T, CommentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Comment.
     * @param {CommentDeleteArgs} args - Arguments to delete one Comment.
     * @example
     * // Delete one Comment
     * const Comment = await prisma.comment.delete({
     *   where: {
     *     // ... filter to delete one Comment
     *   }
     * })
     * 
     */
    delete<T extends CommentDeleteArgs>(args: SelectSubset<T, CommentDeleteArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Comment.
     * @param {CommentUpdateArgs} args - Arguments to update one Comment.
     * @example
     * // Update one Comment
     * const comment = await prisma.comment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CommentUpdateArgs>(args: SelectSubset<T, CommentUpdateArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Comments.
     * @param {CommentDeleteManyArgs} args - Arguments to filter Comments to delete.
     * @example
     * // Delete a few Comments
     * const { count } = await prisma.comment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CommentDeleteManyArgs>(args?: SelectSubset<T, CommentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comments
     * const comment = await prisma.comment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CommentUpdateManyArgs>(args: SelectSubset<T, CommentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Comment.
     * @param {CommentUpsertArgs} args - Arguments to update or create a Comment.
     * @example
     * // Update or create a Comment
     * const comment = await prisma.comment.upsert({
     *   create: {
     *     // ... data to create a Comment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comment we want to update
     *   }
     * })
     */
    upsert<T extends CommentUpsertArgs>(args: SelectSubset<T, CommentUpsertArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>

    /**
     * Find zero or more Comments that matches the filter.
     * @param {CommentFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const comment = await prisma.comment.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
     */
    findRaw(args?: CommentFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Comment.
     * @param {CommentAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const comment = await prisma.comment.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: CommentAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentCountArgs} args - Arguments to filter Comments to count.
     * @example
     * // Count the number of Comments
     * const count = await prisma.comment.count({
     *   where: {
     *     // ... the filter for the Comments we want to count
     *   }
     * })
    **/
    count<T extends CommentCountArgs>(
      args?: Subset<T, CommentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommentAggregateArgs>(args: Subset<T, CommentAggregateArgs>): Prisma.PrismaPromise<GetCommentAggregateType<T>>

    /**
     * Group by Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommentGroupByArgs['orderBy'] }
        : { orderBy?: CommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Comment model
   */
  readonly fields: CommentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Comment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CommentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    task<T extends TaskDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TaskDefaultArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    version<T extends Comment$versionArgs<ExtArgs> = {}>(args?: Subset<T, Comment$versionArgs<ExtArgs>>): Prisma__VersionClient<$Result.GetResult<Prisma.$VersionPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    author<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Comment model
   */ 
  interface CommentFieldRefs {
    readonly id: FieldRef<"Comment", 'String'>
    readonly content: FieldRef<"Comment", 'String'>
    readonly attachments: FieldRef<"Comment", 'String[]'>
    readonly isGlobal: FieldRef<"Comment", 'Boolean'>
    readonly createdAt: FieldRef<"Comment", 'DateTime'>
    readonly taskId: FieldRef<"Comment", 'String'>
    readonly versionId: FieldRef<"Comment", 'String'>
    readonly authorId: FieldRef<"Comment", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Comment findUnique
   */
  export type CommentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment findUniqueOrThrow
   */
  export type CommentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment findFirst
   */
  export type CommentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment findFirstOrThrow
   */
  export type CommentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment findMany
   */
  export type CommentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comments to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment create
   */
  export type CommentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to create a Comment.
     */
    data: XOR<CommentCreateInput, CommentUncheckedCreateInput>
  }

  /**
   * Comment createMany
   */
  export type CommentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Comments.
     */
    data: CommentCreateManyInput | CommentCreateManyInput[]
  }

  /**
   * Comment update
   */
  export type CommentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to update a Comment.
     */
    data: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
    /**
     * Choose, which Comment to update.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment updateMany
   */
  export type CommentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Comments.
     */
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyInput>
    /**
     * Filter which Comments to update
     */
    where?: CommentWhereInput
  }

  /**
   * Comment upsert
   */
  export type CommentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The filter to search for the Comment to update in case it exists.
     */
    where: CommentWhereUniqueInput
    /**
     * In case the Comment found by the `where` argument doesn't exist, create a new Comment with this data.
     */
    create: XOR<CommentCreateInput, CommentUncheckedCreateInput>
    /**
     * In case the Comment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
  }

  /**
   * Comment delete
   */
  export type CommentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter which Comment to delete.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment deleteMany
   */
  export type CommentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comments to delete
     */
    where?: CommentWhereInput
  }

  /**
   * Comment findRaw
   */
  export type CommentFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Comment aggregateRaw
   */
  export type CommentAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Comment.version
   */
  export type Comment$versionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Version
     */
    select?: VersionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VersionInclude<ExtArgs> | null
    where?: VersionWhereInput
  }

  /**
   * Comment without action
   */
  export type CommentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
  }


  /**
   * Model ExchangeApproval
   */

  export type AggregateExchangeApproval = {
    _count: ExchangeApprovalCountAggregateOutputType | null
    _min: ExchangeApprovalMinAggregateOutputType | null
    _max: ExchangeApprovalMaxAggregateOutputType | null
  }

  export type ExchangeApprovalMinAggregateOutputType = {
    id: string | null
    exchangeName: string | null
    typeOfContent: string | null
    approvalStatus: $Enums.ExchangeApprovalStatus | null
    approvalDate: Date | null
    expiryDate: Date | null
    referenceNumber: string | null
    approvalEmailUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
    taskId: string | null
    updatedById: string | null
  }

  export type ExchangeApprovalMaxAggregateOutputType = {
    id: string | null
    exchangeName: string | null
    typeOfContent: string | null
    approvalStatus: $Enums.ExchangeApprovalStatus | null
    approvalDate: Date | null
    expiryDate: Date | null
    referenceNumber: string | null
    approvalEmailUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
    taskId: string | null
    updatedById: string | null
  }

  export type ExchangeApprovalCountAggregateOutputType = {
    id: number
    exchangeName: number
    typeOfContent: number
    approvalStatus: number
    approvalDate: number
    expiryDate: number
    referenceNumber: number
    approvalEmailUrl: number
    createdAt: number
    updatedAt: number
    taskId: number
    updatedById: number
    _all: number
  }


  export type ExchangeApprovalMinAggregateInputType = {
    id?: true
    exchangeName?: true
    typeOfContent?: true
    approvalStatus?: true
    approvalDate?: true
    expiryDate?: true
    referenceNumber?: true
    approvalEmailUrl?: true
    createdAt?: true
    updatedAt?: true
    taskId?: true
    updatedById?: true
  }

  export type ExchangeApprovalMaxAggregateInputType = {
    id?: true
    exchangeName?: true
    typeOfContent?: true
    approvalStatus?: true
    approvalDate?: true
    expiryDate?: true
    referenceNumber?: true
    approvalEmailUrl?: true
    createdAt?: true
    updatedAt?: true
    taskId?: true
    updatedById?: true
  }

  export type ExchangeApprovalCountAggregateInputType = {
    id?: true
    exchangeName?: true
    typeOfContent?: true
    approvalStatus?: true
    approvalDate?: true
    expiryDate?: true
    referenceNumber?: true
    approvalEmailUrl?: true
    createdAt?: true
    updatedAt?: true
    taskId?: true
    updatedById?: true
    _all?: true
  }

  export type ExchangeApprovalAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ExchangeApproval to aggregate.
     */
    where?: ExchangeApprovalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExchangeApprovals to fetch.
     */
    orderBy?: ExchangeApprovalOrderByWithRelationInput | ExchangeApprovalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ExchangeApprovalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExchangeApprovals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExchangeApprovals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ExchangeApprovals
    **/
    _count?: true | ExchangeApprovalCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExchangeApprovalMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExchangeApprovalMaxAggregateInputType
  }

  export type GetExchangeApprovalAggregateType<T extends ExchangeApprovalAggregateArgs> = {
        [P in keyof T & keyof AggregateExchangeApproval]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExchangeApproval[P]>
      : GetScalarType<T[P], AggregateExchangeApproval[P]>
  }




  export type ExchangeApprovalGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExchangeApprovalWhereInput
    orderBy?: ExchangeApprovalOrderByWithAggregationInput | ExchangeApprovalOrderByWithAggregationInput[]
    by: ExchangeApprovalScalarFieldEnum[] | ExchangeApprovalScalarFieldEnum
    having?: ExchangeApprovalScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExchangeApprovalCountAggregateInputType | true
    _min?: ExchangeApprovalMinAggregateInputType
    _max?: ExchangeApprovalMaxAggregateInputType
  }

  export type ExchangeApprovalGroupByOutputType = {
    id: string
    exchangeName: string
    typeOfContent: string
    approvalStatus: $Enums.ExchangeApprovalStatus
    approvalDate: Date | null
    expiryDate: Date | null
    referenceNumber: string | null
    approvalEmailUrl: string | null
    createdAt: Date
    updatedAt: Date
    taskId: string
    updatedById: string | null
    _count: ExchangeApprovalCountAggregateOutputType | null
    _min: ExchangeApprovalMinAggregateOutputType | null
    _max: ExchangeApprovalMaxAggregateOutputType | null
  }

  type GetExchangeApprovalGroupByPayload<T extends ExchangeApprovalGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ExchangeApprovalGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExchangeApprovalGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExchangeApprovalGroupByOutputType[P]>
            : GetScalarType<T[P], ExchangeApprovalGroupByOutputType[P]>
        }
      >
    >


  export type ExchangeApprovalSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    exchangeName?: boolean
    typeOfContent?: boolean
    approvalStatus?: boolean
    approvalDate?: boolean
    expiryDate?: boolean
    referenceNumber?: boolean
    approvalEmailUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    taskId?: boolean
    updatedById?: boolean
    task?: boolean | TaskDefaultArgs<ExtArgs>
    updatedBy?: boolean | ExchangeApproval$updatedByArgs<ExtArgs>
  }, ExtArgs["result"]["exchangeApproval"]>


  export type ExchangeApprovalSelectScalar = {
    id?: boolean
    exchangeName?: boolean
    typeOfContent?: boolean
    approvalStatus?: boolean
    approvalDate?: boolean
    expiryDate?: boolean
    referenceNumber?: boolean
    approvalEmailUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    taskId?: boolean
    updatedById?: boolean
  }

  export type ExchangeApprovalInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    task?: boolean | TaskDefaultArgs<ExtArgs>
    updatedBy?: boolean | ExchangeApproval$updatedByArgs<ExtArgs>
  }

  export type $ExchangeApprovalPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ExchangeApproval"
    objects: {
      task: Prisma.$TaskPayload<ExtArgs>
      updatedBy: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      exchangeName: string
      typeOfContent: string
      approvalStatus: $Enums.ExchangeApprovalStatus
      approvalDate: Date | null
      expiryDate: Date | null
      referenceNumber: string | null
      approvalEmailUrl: string | null
      createdAt: Date
      updatedAt: Date
      taskId: string
      updatedById: string | null
    }, ExtArgs["result"]["exchangeApproval"]>
    composites: {}
  }

  type ExchangeApprovalGetPayload<S extends boolean | null | undefined | ExchangeApprovalDefaultArgs> = $Result.GetResult<Prisma.$ExchangeApprovalPayload, S>

  type ExchangeApprovalCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ExchangeApprovalFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ExchangeApprovalCountAggregateInputType | true
    }

  export interface ExchangeApprovalDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ExchangeApproval'], meta: { name: 'ExchangeApproval' } }
    /**
     * Find zero or one ExchangeApproval that matches the filter.
     * @param {ExchangeApprovalFindUniqueArgs} args - Arguments to find a ExchangeApproval
     * @example
     * // Get one ExchangeApproval
     * const exchangeApproval = await prisma.exchangeApproval.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ExchangeApprovalFindUniqueArgs>(args: SelectSubset<T, ExchangeApprovalFindUniqueArgs<ExtArgs>>): Prisma__ExchangeApprovalClient<$Result.GetResult<Prisma.$ExchangeApprovalPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ExchangeApproval that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ExchangeApprovalFindUniqueOrThrowArgs} args - Arguments to find a ExchangeApproval
     * @example
     * // Get one ExchangeApproval
     * const exchangeApproval = await prisma.exchangeApproval.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ExchangeApprovalFindUniqueOrThrowArgs>(args: SelectSubset<T, ExchangeApprovalFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ExchangeApprovalClient<$Result.GetResult<Prisma.$ExchangeApprovalPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ExchangeApproval that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExchangeApprovalFindFirstArgs} args - Arguments to find a ExchangeApproval
     * @example
     * // Get one ExchangeApproval
     * const exchangeApproval = await prisma.exchangeApproval.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ExchangeApprovalFindFirstArgs>(args?: SelectSubset<T, ExchangeApprovalFindFirstArgs<ExtArgs>>): Prisma__ExchangeApprovalClient<$Result.GetResult<Prisma.$ExchangeApprovalPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ExchangeApproval that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExchangeApprovalFindFirstOrThrowArgs} args - Arguments to find a ExchangeApproval
     * @example
     * // Get one ExchangeApproval
     * const exchangeApproval = await prisma.exchangeApproval.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ExchangeApprovalFindFirstOrThrowArgs>(args?: SelectSubset<T, ExchangeApprovalFindFirstOrThrowArgs<ExtArgs>>): Prisma__ExchangeApprovalClient<$Result.GetResult<Prisma.$ExchangeApprovalPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ExchangeApprovals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExchangeApprovalFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ExchangeApprovals
     * const exchangeApprovals = await prisma.exchangeApproval.findMany()
     * 
     * // Get first 10 ExchangeApprovals
     * const exchangeApprovals = await prisma.exchangeApproval.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const exchangeApprovalWithIdOnly = await prisma.exchangeApproval.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ExchangeApprovalFindManyArgs>(args?: SelectSubset<T, ExchangeApprovalFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExchangeApprovalPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ExchangeApproval.
     * @param {ExchangeApprovalCreateArgs} args - Arguments to create a ExchangeApproval.
     * @example
     * // Create one ExchangeApproval
     * const ExchangeApproval = await prisma.exchangeApproval.create({
     *   data: {
     *     // ... data to create a ExchangeApproval
     *   }
     * })
     * 
     */
    create<T extends ExchangeApprovalCreateArgs>(args: SelectSubset<T, ExchangeApprovalCreateArgs<ExtArgs>>): Prisma__ExchangeApprovalClient<$Result.GetResult<Prisma.$ExchangeApprovalPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ExchangeApprovals.
     * @param {ExchangeApprovalCreateManyArgs} args - Arguments to create many ExchangeApprovals.
     * @example
     * // Create many ExchangeApprovals
     * const exchangeApproval = await prisma.exchangeApproval.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ExchangeApprovalCreateManyArgs>(args?: SelectSubset<T, ExchangeApprovalCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ExchangeApproval.
     * @param {ExchangeApprovalDeleteArgs} args - Arguments to delete one ExchangeApproval.
     * @example
     * // Delete one ExchangeApproval
     * const ExchangeApproval = await prisma.exchangeApproval.delete({
     *   where: {
     *     // ... filter to delete one ExchangeApproval
     *   }
     * })
     * 
     */
    delete<T extends ExchangeApprovalDeleteArgs>(args: SelectSubset<T, ExchangeApprovalDeleteArgs<ExtArgs>>): Prisma__ExchangeApprovalClient<$Result.GetResult<Prisma.$ExchangeApprovalPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ExchangeApproval.
     * @param {ExchangeApprovalUpdateArgs} args - Arguments to update one ExchangeApproval.
     * @example
     * // Update one ExchangeApproval
     * const exchangeApproval = await prisma.exchangeApproval.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ExchangeApprovalUpdateArgs>(args: SelectSubset<T, ExchangeApprovalUpdateArgs<ExtArgs>>): Prisma__ExchangeApprovalClient<$Result.GetResult<Prisma.$ExchangeApprovalPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ExchangeApprovals.
     * @param {ExchangeApprovalDeleteManyArgs} args - Arguments to filter ExchangeApprovals to delete.
     * @example
     * // Delete a few ExchangeApprovals
     * const { count } = await prisma.exchangeApproval.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ExchangeApprovalDeleteManyArgs>(args?: SelectSubset<T, ExchangeApprovalDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ExchangeApprovals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExchangeApprovalUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ExchangeApprovals
     * const exchangeApproval = await prisma.exchangeApproval.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ExchangeApprovalUpdateManyArgs>(args: SelectSubset<T, ExchangeApprovalUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ExchangeApproval.
     * @param {ExchangeApprovalUpsertArgs} args - Arguments to update or create a ExchangeApproval.
     * @example
     * // Update or create a ExchangeApproval
     * const exchangeApproval = await prisma.exchangeApproval.upsert({
     *   create: {
     *     // ... data to create a ExchangeApproval
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ExchangeApproval we want to update
     *   }
     * })
     */
    upsert<T extends ExchangeApprovalUpsertArgs>(args: SelectSubset<T, ExchangeApprovalUpsertArgs<ExtArgs>>): Prisma__ExchangeApprovalClient<$Result.GetResult<Prisma.$ExchangeApprovalPayload<ExtArgs>, T, "upsert">, never, ExtArgs>

    /**
     * Find zero or more ExchangeApprovals that matches the filter.
     * @param {ExchangeApprovalFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const exchangeApproval = await prisma.exchangeApproval.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
     */
    findRaw(args?: ExchangeApprovalFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a ExchangeApproval.
     * @param {ExchangeApprovalAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const exchangeApproval = await prisma.exchangeApproval.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: ExchangeApprovalAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of ExchangeApprovals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExchangeApprovalCountArgs} args - Arguments to filter ExchangeApprovals to count.
     * @example
     * // Count the number of ExchangeApprovals
     * const count = await prisma.exchangeApproval.count({
     *   where: {
     *     // ... the filter for the ExchangeApprovals we want to count
     *   }
     * })
    **/
    count<T extends ExchangeApprovalCountArgs>(
      args?: Subset<T, ExchangeApprovalCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExchangeApprovalCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ExchangeApproval.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExchangeApprovalAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExchangeApprovalAggregateArgs>(args: Subset<T, ExchangeApprovalAggregateArgs>): Prisma.PrismaPromise<GetExchangeApprovalAggregateType<T>>

    /**
     * Group by ExchangeApproval.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExchangeApprovalGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExchangeApprovalGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExchangeApprovalGroupByArgs['orderBy'] }
        : { orderBy?: ExchangeApprovalGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExchangeApprovalGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExchangeApprovalGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ExchangeApproval model
   */
  readonly fields: ExchangeApprovalFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ExchangeApproval.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ExchangeApprovalClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    task<T extends TaskDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TaskDefaultArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    updatedBy<T extends ExchangeApproval$updatedByArgs<ExtArgs> = {}>(args?: Subset<T, ExchangeApproval$updatedByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ExchangeApproval model
   */ 
  interface ExchangeApprovalFieldRefs {
    readonly id: FieldRef<"ExchangeApproval", 'String'>
    readonly exchangeName: FieldRef<"ExchangeApproval", 'String'>
    readonly typeOfContent: FieldRef<"ExchangeApproval", 'String'>
    readonly approvalStatus: FieldRef<"ExchangeApproval", 'ExchangeApprovalStatus'>
    readonly approvalDate: FieldRef<"ExchangeApproval", 'DateTime'>
    readonly expiryDate: FieldRef<"ExchangeApproval", 'DateTime'>
    readonly referenceNumber: FieldRef<"ExchangeApproval", 'String'>
    readonly approvalEmailUrl: FieldRef<"ExchangeApproval", 'String'>
    readonly createdAt: FieldRef<"ExchangeApproval", 'DateTime'>
    readonly updatedAt: FieldRef<"ExchangeApproval", 'DateTime'>
    readonly taskId: FieldRef<"ExchangeApproval", 'String'>
    readonly updatedById: FieldRef<"ExchangeApproval", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ExchangeApproval findUnique
   */
  export type ExchangeApprovalFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExchangeApproval
     */
    select?: ExchangeApprovalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExchangeApprovalInclude<ExtArgs> | null
    /**
     * Filter, which ExchangeApproval to fetch.
     */
    where: ExchangeApprovalWhereUniqueInput
  }

  /**
   * ExchangeApproval findUniqueOrThrow
   */
  export type ExchangeApprovalFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExchangeApproval
     */
    select?: ExchangeApprovalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExchangeApprovalInclude<ExtArgs> | null
    /**
     * Filter, which ExchangeApproval to fetch.
     */
    where: ExchangeApprovalWhereUniqueInput
  }

  /**
   * ExchangeApproval findFirst
   */
  export type ExchangeApprovalFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExchangeApproval
     */
    select?: ExchangeApprovalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExchangeApprovalInclude<ExtArgs> | null
    /**
     * Filter, which ExchangeApproval to fetch.
     */
    where?: ExchangeApprovalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExchangeApprovals to fetch.
     */
    orderBy?: ExchangeApprovalOrderByWithRelationInput | ExchangeApprovalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ExchangeApprovals.
     */
    cursor?: ExchangeApprovalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExchangeApprovals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExchangeApprovals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ExchangeApprovals.
     */
    distinct?: ExchangeApprovalScalarFieldEnum | ExchangeApprovalScalarFieldEnum[]
  }

  /**
   * ExchangeApproval findFirstOrThrow
   */
  export type ExchangeApprovalFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExchangeApproval
     */
    select?: ExchangeApprovalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExchangeApprovalInclude<ExtArgs> | null
    /**
     * Filter, which ExchangeApproval to fetch.
     */
    where?: ExchangeApprovalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExchangeApprovals to fetch.
     */
    orderBy?: ExchangeApprovalOrderByWithRelationInput | ExchangeApprovalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ExchangeApprovals.
     */
    cursor?: ExchangeApprovalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExchangeApprovals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExchangeApprovals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ExchangeApprovals.
     */
    distinct?: ExchangeApprovalScalarFieldEnum | ExchangeApprovalScalarFieldEnum[]
  }

  /**
   * ExchangeApproval findMany
   */
  export type ExchangeApprovalFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExchangeApproval
     */
    select?: ExchangeApprovalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExchangeApprovalInclude<ExtArgs> | null
    /**
     * Filter, which ExchangeApprovals to fetch.
     */
    where?: ExchangeApprovalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExchangeApprovals to fetch.
     */
    orderBy?: ExchangeApprovalOrderByWithRelationInput | ExchangeApprovalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ExchangeApprovals.
     */
    cursor?: ExchangeApprovalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExchangeApprovals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExchangeApprovals.
     */
    skip?: number
    distinct?: ExchangeApprovalScalarFieldEnum | ExchangeApprovalScalarFieldEnum[]
  }

  /**
   * ExchangeApproval create
   */
  export type ExchangeApprovalCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExchangeApproval
     */
    select?: ExchangeApprovalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExchangeApprovalInclude<ExtArgs> | null
    /**
     * The data needed to create a ExchangeApproval.
     */
    data: XOR<ExchangeApprovalCreateInput, ExchangeApprovalUncheckedCreateInput>
  }

  /**
   * ExchangeApproval createMany
   */
  export type ExchangeApprovalCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ExchangeApprovals.
     */
    data: ExchangeApprovalCreateManyInput | ExchangeApprovalCreateManyInput[]
  }

  /**
   * ExchangeApproval update
   */
  export type ExchangeApprovalUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExchangeApproval
     */
    select?: ExchangeApprovalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExchangeApprovalInclude<ExtArgs> | null
    /**
     * The data needed to update a ExchangeApproval.
     */
    data: XOR<ExchangeApprovalUpdateInput, ExchangeApprovalUncheckedUpdateInput>
    /**
     * Choose, which ExchangeApproval to update.
     */
    where: ExchangeApprovalWhereUniqueInput
  }

  /**
   * ExchangeApproval updateMany
   */
  export type ExchangeApprovalUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ExchangeApprovals.
     */
    data: XOR<ExchangeApprovalUpdateManyMutationInput, ExchangeApprovalUncheckedUpdateManyInput>
    /**
     * Filter which ExchangeApprovals to update
     */
    where?: ExchangeApprovalWhereInput
  }

  /**
   * ExchangeApproval upsert
   */
  export type ExchangeApprovalUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExchangeApproval
     */
    select?: ExchangeApprovalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExchangeApprovalInclude<ExtArgs> | null
    /**
     * The filter to search for the ExchangeApproval to update in case it exists.
     */
    where: ExchangeApprovalWhereUniqueInput
    /**
     * In case the ExchangeApproval found by the `where` argument doesn't exist, create a new ExchangeApproval with this data.
     */
    create: XOR<ExchangeApprovalCreateInput, ExchangeApprovalUncheckedCreateInput>
    /**
     * In case the ExchangeApproval was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ExchangeApprovalUpdateInput, ExchangeApprovalUncheckedUpdateInput>
  }

  /**
   * ExchangeApproval delete
   */
  export type ExchangeApprovalDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExchangeApproval
     */
    select?: ExchangeApprovalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExchangeApprovalInclude<ExtArgs> | null
    /**
     * Filter which ExchangeApproval to delete.
     */
    where: ExchangeApprovalWhereUniqueInput
  }

  /**
   * ExchangeApproval deleteMany
   */
  export type ExchangeApprovalDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ExchangeApprovals to delete
     */
    where?: ExchangeApprovalWhereInput
  }

  /**
   * ExchangeApproval findRaw
   */
  export type ExchangeApprovalFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * ExchangeApproval aggregateRaw
   */
  export type ExchangeApprovalAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * ExchangeApproval.updatedBy
   */
  export type ExchangeApproval$updatedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * ExchangeApproval without action
   */
  export type ExchangeApprovalDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExchangeApproval
     */
    select?: ExchangeApprovalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExchangeApprovalInclude<ExtArgs> | null
  }


  /**
   * Model Notification
   */

  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationMinAggregateOutputType = {
    id: string | null
    title: string | null
    message: string | null
    type: $Enums.NotificationType | null
    isRead: boolean | null
    createdAt: Date | null
    userId: string | null
    taskId: string | null
  }

  export type NotificationMaxAggregateOutputType = {
    id: string | null
    title: string | null
    message: string | null
    type: $Enums.NotificationType | null
    isRead: boolean | null
    createdAt: Date | null
    userId: string | null
    taskId: string | null
  }

  export type NotificationCountAggregateOutputType = {
    id: number
    title: number
    message: number
    type: number
    isRead: number
    createdAt: number
    userId: number
    taskId: number
    _all: number
  }


  export type NotificationMinAggregateInputType = {
    id?: true
    title?: true
    message?: true
    type?: true
    isRead?: true
    createdAt?: true
    userId?: true
    taskId?: true
  }

  export type NotificationMaxAggregateInputType = {
    id?: true
    title?: true
    message?: true
    type?: true
    isRead?: true
    createdAt?: true
    userId?: true
    taskId?: true
  }

  export type NotificationCountAggregateInputType = {
    id?: true
    title?: true
    message?: true
    type?: true
    isRead?: true
    createdAt?: true
    userId?: true
    taskId?: true
    _all?: true
  }

  export type NotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithAggregationInput | NotificationOrderByWithAggregationInput[]
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }

  export type NotificationGroupByOutputType = {
    id: string
    title: string
    message: string
    type: $Enums.NotificationType
    isRead: boolean
    createdAt: Date
    userId: string
    taskId: string | null
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    message?: boolean
    type?: boolean
    isRead?: boolean
    createdAt?: boolean
    userId?: boolean
    taskId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    task?: boolean | Notification$taskArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>


  export type NotificationSelectScalar = {
    id?: boolean
    title?: boolean
    message?: boolean
    type?: boolean
    isRead?: boolean
    createdAt?: boolean
    userId?: boolean
    taskId?: boolean
  }

  export type NotificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    task?: boolean | Notification$taskArgs<ExtArgs>
  }

  export type $NotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notification"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      task: Prisma.$TaskPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      message: string
      type: $Enums.NotificationType
      isRead: boolean
      createdAt: Date
      userId: string
      taskId: string | null
    }, ExtArgs["result"]["notification"]>
    composites: {}
  }

  type NotificationGetPayload<S extends boolean | null | undefined | NotificationDefaultArgs> = $Result.GetResult<Prisma.$NotificationPayload, S>

  type NotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NotificationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface NotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notification'], meta: { name: 'Notification' } }
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationFindUniqueArgs>(args: SelectSubset<T, NotificationFindUniqueArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Notification that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationFindFirstArgs>(args?: SelectSubset<T, NotificationFindFirstArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationWithIdOnly = await prisma.notification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationFindManyArgs>(args?: SelectSubset<T, NotificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
     */
    create<T extends NotificationCreateArgs>(args: SelectSubset<T, NotificationCreateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Notifications.
     * @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationCreateManyArgs>(args?: SelectSubset<T, NotificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
     */
    delete<T extends NotificationDeleteArgs>(args: SelectSubset<T, NotificationDeleteArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationUpdateArgs>(args: SelectSubset<T, NotificationUpdateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationDeleteManyArgs>(args?: SelectSubset<T, NotificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationUpdateManyArgs>(args: SelectSubset<T, NotificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
     */
    upsert<T extends NotificationUpsertArgs>(args: SelectSubset<T, NotificationUpsertArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>

    /**
     * Find zero or more Notifications that matches the filter.
     * @param {NotificationFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const notification = await prisma.notification.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
     */
    findRaw(args?: NotificationFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Notification.
     * @param {NotificationAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const notification = await prisma.notification.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: NotificationAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notification model
   */
  readonly fields: NotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    task<T extends Notification$taskArgs<ExtArgs> = {}>(args?: Subset<T, Notification$taskArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Notification model
   */ 
  interface NotificationFieldRefs {
    readonly id: FieldRef<"Notification", 'String'>
    readonly title: FieldRef<"Notification", 'String'>
    readonly message: FieldRef<"Notification", 'String'>
    readonly type: FieldRef<"Notification", 'NotificationType'>
    readonly isRead: FieldRef<"Notification", 'Boolean'>
    readonly createdAt: FieldRef<"Notification", 'DateTime'>
    readonly userId: FieldRef<"Notification", 'String'>
    readonly taskId: FieldRef<"Notification", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification create
   */
  export type NotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to create a Notification.
     */
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }

  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
  }

  /**
   * Notification update
   */
  export type NotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
  }

  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }

  /**
   * Notification delete
   */
  export type NotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput
  }

  /**
   * Notification findRaw
   */
  export type NotificationFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Notification aggregateRaw
   */
  export type NotificationAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Notification.task
   */
  export type Notification$taskArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    where?: TaskWhereInput
  }

  /**
   * Notification without action
   */
  export type NotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
  }


  /**
   * Model AuditLog
   */

  export type AggregateAuditLog = {
    _count: AuditLogCountAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  export type AuditLogMinAggregateOutputType = {
    id: string | null
    action: string | null
    details: string | null
    timestamp: Date | null
    performedBy: string | null
    taskId: string | null
  }

  export type AuditLogMaxAggregateOutputType = {
    id: string | null
    action: string | null
    details: string | null
    timestamp: Date | null
    performedBy: string | null
    taskId: string | null
  }

  export type AuditLogCountAggregateOutputType = {
    id: number
    action: number
    details: number
    timestamp: number
    performedBy: number
    taskId: number
    _all: number
  }


  export type AuditLogMinAggregateInputType = {
    id?: true
    action?: true
    details?: true
    timestamp?: true
    performedBy?: true
    taskId?: true
  }

  export type AuditLogMaxAggregateInputType = {
    id?: true
    action?: true
    details?: true
    timestamp?: true
    performedBy?: true
    taskId?: true
  }

  export type AuditLogCountAggregateInputType = {
    id?: true
    action?: true
    details?: true
    timestamp?: true
    performedBy?: true
    taskId?: true
    _all?: true
  }

  export type AuditLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLog to aggregate.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AuditLogs
    **/
    _count?: true | AuditLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuditLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuditLogMaxAggregateInputType
  }

  export type GetAuditLogAggregateType<T extends AuditLogAggregateArgs> = {
        [P in keyof T & keyof AggregateAuditLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuditLog[P]>
      : GetScalarType<T[P], AggregateAuditLog[P]>
  }




  export type AuditLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithAggregationInput | AuditLogOrderByWithAggregationInput[]
    by: AuditLogScalarFieldEnum[] | AuditLogScalarFieldEnum
    having?: AuditLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuditLogCountAggregateInputType | true
    _min?: AuditLogMinAggregateInputType
    _max?: AuditLogMaxAggregateInputType
  }

  export type AuditLogGroupByOutputType = {
    id: string
    action: string
    details: string
    timestamp: Date
    performedBy: string
    taskId: string | null
    _count: AuditLogCountAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  type GetAuditLogGroupByPayload<T extends AuditLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuditLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuditLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
            : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
        }
      >
    >


  export type AuditLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    action?: boolean
    details?: boolean
    timestamp?: boolean
    performedBy?: boolean
    taskId?: boolean
    performedByUser?: boolean | UserDefaultArgs<ExtArgs>
    task?: boolean | AuditLog$taskArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>


  export type AuditLogSelectScalar = {
    id?: boolean
    action?: boolean
    details?: boolean
    timestamp?: boolean
    performedBy?: boolean
    taskId?: boolean
  }

  export type AuditLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    performedByUser?: boolean | UserDefaultArgs<ExtArgs>
    task?: boolean | AuditLog$taskArgs<ExtArgs>
  }

  export type $AuditLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AuditLog"
    objects: {
      performedByUser: Prisma.$UserPayload<ExtArgs>
      task: Prisma.$TaskPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      action: string
      details: string
      timestamp: Date
      performedBy: string
      taskId: string | null
    }, ExtArgs["result"]["auditLog"]>
    composites: {}
  }

  type AuditLogGetPayload<S extends boolean | null | undefined | AuditLogDefaultArgs> = $Result.GetResult<Prisma.$AuditLogPayload, S>

  type AuditLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AuditLogFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AuditLogCountAggregateInputType | true
    }

  export interface AuditLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AuditLog'], meta: { name: 'AuditLog' } }
    /**
     * Find zero or one AuditLog that matches the filter.
     * @param {AuditLogFindUniqueArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AuditLogFindUniqueArgs>(args: SelectSubset<T, AuditLogFindUniqueArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AuditLog that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AuditLogFindUniqueOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AuditLogFindUniqueOrThrowArgs>(args: SelectSubset<T, AuditLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AuditLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AuditLogFindFirstArgs>(args?: SelectSubset<T, AuditLogFindFirstArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AuditLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AuditLogFindFirstOrThrowArgs>(args?: SelectSubset<T, AuditLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AuditLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AuditLogs
     * const auditLogs = await prisma.auditLog.findMany()
     * 
     * // Get first 10 AuditLogs
     * const auditLogs = await prisma.auditLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AuditLogFindManyArgs>(args?: SelectSubset<T, AuditLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AuditLog.
     * @param {AuditLogCreateArgs} args - Arguments to create a AuditLog.
     * @example
     * // Create one AuditLog
     * const AuditLog = await prisma.auditLog.create({
     *   data: {
     *     // ... data to create a AuditLog
     *   }
     * })
     * 
     */
    create<T extends AuditLogCreateArgs>(args: SelectSubset<T, AuditLogCreateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AuditLogs.
     * @param {AuditLogCreateManyArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AuditLogCreateManyArgs>(args?: SelectSubset<T, AuditLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a AuditLog.
     * @param {AuditLogDeleteArgs} args - Arguments to delete one AuditLog.
     * @example
     * // Delete one AuditLog
     * const AuditLog = await prisma.auditLog.delete({
     *   where: {
     *     // ... filter to delete one AuditLog
     *   }
     * })
     * 
     */
    delete<T extends AuditLogDeleteArgs>(args: SelectSubset<T, AuditLogDeleteArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AuditLog.
     * @param {AuditLogUpdateArgs} args - Arguments to update one AuditLog.
     * @example
     * // Update one AuditLog
     * const auditLog = await prisma.auditLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AuditLogUpdateArgs>(args: SelectSubset<T, AuditLogUpdateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AuditLogs.
     * @param {AuditLogDeleteManyArgs} args - Arguments to filter AuditLogs to delete.
     * @example
     * // Delete a few AuditLogs
     * const { count } = await prisma.auditLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AuditLogDeleteManyArgs>(args?: SelectSubset<T, AuditLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AuditLogs
     * const auditLog = await prisma.auditLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AuditLogUpdateManyArgs>(args: SelectSubset<T, AuditLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AuditLog.
     * @param {AuditLogUpsertArgs} args - Arguments to update or create a AuditLog.
     * @example
     * // Update or create a AuditLog
     * const auditLog = await prisma.auditLog.upsert({
     *   create: {
     *     // ... data to create a AuditLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AuditLog we want to update
     *   }
     * })
     */
    upsert<T extends AuditLogUpsertArgs>(args: SelectSubset<T, AuditLogUpsertArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "upsert">, never, ExtArgs>

    /**
     * Find zero or more AuditLogs that matches the filter.
     * @param {AuditLogFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const auditLog = await prisma.auditLog.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
     */
    findRaw(args?: AuditLogFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a AuditLog.
     * @param {AuditLogAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const auditLog = await prisma.auditLog.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: AuditLogAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogCountArgs} args - Arguments to filter AuditLogs to count.
     * @example
     * // Count the number of AuditLogs
     * const count = await prisma.auditLog.count({
     *   where: {
     *     // ... the filter for the AuditLogs we want to count
     *   }
     * })
    **/
    count<T extends AuditLogCountArgs>(
      args?: Subset<T, AuditLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuditLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuditLogAggregateArgs>(args: Subset<T, AuditLogAggregateArgs>): Prisma.PrismaPromise<GetAuditLogAggregateType<T>>

    /**
     * Group by AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuditLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuditLogGroupByArgs['orderBy'] }
        : { orderBy?: AuditLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuditLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuditLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AuditLog model
   */
  readonly fields: AuditLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AuditLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AuditLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    performedByUser<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    task<T extends AuditLog$taskArgs<ExtArgs> = {}>(args?: Subset<T, AuditLog$taskArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AuditLog model
   */ 
  interface AuditLogFieldRefs {
    readonly id: FieldRef<"AuditLog", 'String'>
    readonly action: FieldRef<"AuditLog", 'String'>
    readonly details: FieldRef<"AuditLog", 'String'>
    readonly timestamp: FieldRef<"AuditLog", 'DateTime'>
    readonly performedBy: FieldRef<"AuditLog", 'String'>
    readonly taskId: FieldRef<"AuditLog", 'String'>
  }
    

  // Custom InputTypes
  /**
   * AuditLog findUnique
   */
  export type AuditLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findUniqueOrThrow
   */
  export type AuditLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findFirst
   */
  export type AuditLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findFirstOrThrow
   */
  export type AuditLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findMany
   */
  export type AuditLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLogs to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog create
   */
  export type AuditLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The data needed to create a AuditLog.
     */
    data: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
  }

  /**
   * AuditLog createMany
   */
  export type AuditLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
  }

  /**
   * AuditLog update
   */
  export type AuditLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The data needed to update a AuditLog.
     */
    data: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
    /**
     * Choose, which AuditLog to update.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog updateMany
   */
  export type AuditLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AuditLogs.
     */
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyInput>
    /**
     * Filter which AuditLogs to update
     */
    where?: AuditLogWhereInput
  }

  /**
   * AuditLog upsert
   */
  export type AuditLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The filter to search for the AuditLog to update in case it exists.
     */
    where: AuditLogWhereUniqueInput
    /**
     * In case the AuditLog found by the `where` argument doesn't exist, create a new AuditLog with this data.
     */
    create: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
    /**
     * In case the AuditLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
  }

  /**
   * AuditLog delete
   */
  export type AuditLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter which AuditLog to delete.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog deleteMany
   */
  export type AuditLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLogs to delete
     */
    where?: AuditLogWhereInput
  }

  /**
   * AuditLog findRaw
   */
  export type AuditLogFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * AuditLog aggregateRaw
   */
  export type AuditLogAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * AuditLog.task
   */
  export type AuditLog$taskArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    where?: TaskWhereInput
  }

  /**
   * AuditLog without action
   */
  export type AuditLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
  }


  /**
   * Model Absence
   */

  export type AggregateAbsence = {
    _count: AbsenceCountAggregateOutputType | null
    _min: AbsenceMinAggregateOutputType | null
    _max: AbsenceMaxAggregateOutputType | null
  }

  export type AbsenceMinAggregateOutputType = {
    id: string | null
    fromDate: Date | null
    toDate: Date | null
    reason: string | null
    createdAt: Date | null
    userId: string | null
    createdById: string | null
  }

  export type AbsenceMaxAggregateOutputType = {
    id: string | null
    fromDate: Date | null
    toDate: Date | null
    reason: string | null
    createdAt: Date | null
    userId: string | null
    createdById: string | null
  }

  export type AbsenceCountAggregateOutputType = {
    id: number
    fromDate: number
    toDate: number
    reason: number
    createdAt: number
    userId: number
    createdById: number
    _all: number
  }


  export type AbsenceMinAggregateInputType = {
    id?: true
    fromDate?: true
    toDate?: true
    reason?: true
    createdAt?: true
    userId?: true
    createdById?: true
  }

  export type AbsenceMaxAggregateInputType = {
    id?: true
    fromDate?: true
    toDate?: true
    reason?: true
    createdAt?: true
    userId?: true
    createdById?: true
  }

  export type AbsenceCountAggregateInputType = {
    id?: true
    fromDate?: true
    toDate?: true
    reason?: true
    createdAt?: true
    userId?: true
    createdById?: true
    _all?: true
  }

  export type AbsenceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Absence to aggregate.
     */
    where?: AbsenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Absences to fetch.
     */
    orderBy?: AbsenceOrderByWithRelationInput | AbsenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AbsenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Absences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Absences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Absences
    **/
    _count?: true | AbsenceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AbsenceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AbsenceMaxAggregateInputType
  }

  export type GetAbsenceAggregateType<T extends AbsenceAggregateArgs> = {
        [P in keyof T & keyof AggregateAbsence]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAbsence[P]>
      : GetScalarType<T[P], AggregateAbsence[P]>
  }




  export type AbsenceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AbsenceWhereInput
    orderBy?: AbsenceOrderByWithAggregationInput | AbsenceOrderByWithAggregationInput[]
    by: AbsenceScalarFieldEnum[] | AbsenceScalarFieldEnum
    having?: AbsenceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AbsenceCountAggregateInputType | true
    _min?: AbsenceMinAggregateInputType
    _max?: AbsenceMaxAggregateInputType
  }

  export type AbsenceGroupByOutputType = {
    id: string
    fromDate: Date
    toDate: Date
    reason: string | null
    createdAt: Date
    userId: string
    createdById: string
    _count: AbsenceCountAggregateOutputType | null
    _min: AbsenceMinAggregateOutputType | null
    _max: AbsenceMaxAggregateOutputType | null
  }

  type GetAbsenceGroupByPayload<T extends AbsenceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AbsenceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AbsenceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AbsenceGroupByOutputType[P]>
            : GetScalarType<T[P], AbsenceGroupByOutputType[P]>
        }
      >
    >


  export type AbsenceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fromDate?: boolean
    toDate?: boolean
    reason?: boolean
    createdAt?: boolean
    userId?: boolean
    createdById?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["absence"]>


  export type AbsenceSelectScalar = {
    id?: boolean
    fromDate?: boolean
    toDate?: boolean
    reason?: boolean
    createdAt?: boolean
    userId?: boolean
    createdById?: boolean
  }

  export type AbsenceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AbsencePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Absence"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      createdBy: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      fromDate: Date
      toDate: Date
      reason: string | null
      createdAt: Date
      userId: string
      createdById: string
    }, ExtArgs["result"]["absence"]>
    composites: {}
  }

  type AbsenceGetPayload<S extends boolean | null | undefined | AbsenceDefaultArgs> = $Result.GetResult<Prisma.$AbsencePayload, S>

  type AbsenceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AbsenceFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AbsenceCountAggregateInputType | true
    }

  export interface AbsenceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Absence'], meta: { name: 'Absence' } }
    /**
     * Find zero or one Absence that matches the filter.
     * @param {AbsenceFindUniqueArgs} args - Arguments to find a Absence
     * @example
     * // Get one Absence
     * const absence = await prisma.absence.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AbsenceFindUniqueArgs>(args: SelectSubset<T, AbsenceFindUniqueArgs<ExtArgs>>): Prisma__AbsenceClient<$Result.GetResult<Prisma.$AbsencePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Absence that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AbsenceFindUniqueOrThrowArgs} args - Arguments to find a Absence
     * @example
     * // Get one Absence
     * const absence = await prisma.absence.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AbsenceFindUniqueOrThrowArgs>(args: SelectSubset<T, AbsenceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AbsenceClient<$Result.GetResult<Prisma.$AbsencePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Absence that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AbsenceFindFirstArgs} args - Arguments to find a Absence
     * @example
     * // Get one Absence
     * const absence = await prisma.absence.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AbsenceFindFirstArgs>(args?: SelectSubset<T, AbsenceFindFirstArgs<ExtArgs>>): Prisma__AbsenceClient<$Result.GetResult<Prisma.$AbsencePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Absence that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AbsenceFindFirstOrThrowArgs} args - Arguments to find a Absence
     * @example
     * // Get one Absence
     * const absence = await prisma.absence.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AbsenceFindFirstOrThrowArgs>(args?: SelectSubset<T, AbsenceFindFirstOrThrowArgs<ExtArgs>>): Prisma__AbsenceClient<$Result.GetResult<Prisma.$AbsencePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Absences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AbsenceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Absences
     * const absences = await prisma.absence.findMany()
     * 
     * // Get first 10 Absences
     * const absences = await prisma.absence.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const absenceWithIdOnly = await prisma.absence.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AbsenceFindManyArgs>(args?: SelectSubset<T, AbsenceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AbsencePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Absence.
     * @param {AbsenceCreateArgs} args - Arguments to create a Absence.
     * @example
     * // Create one Absence
     * const Absence = await prisma.absence.create({
     *   data: {
     *     // ... data to create a Absence
     *   }
     * })
     * 
     */
    create<T extends AbsenceCreateArgs>(args: SelectSubset<T, AbsenceCreateArgs<ExtArgs>>): Prisma__AbsenceClient<$Result.GetResult<Prisma.$AbsencePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Absences.
     * @param {AbsenceCreateManyArgs} args - Arguments to create many Absences.
     * @example
     * // Create many Absences
     * const absence = await prisma.absence.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AbsenceCreateManyArgs>(args?: SelectSubset<T, AbsenceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Absence.
     * @param {AbsenceDeleteArgs} args - Arguments to delete one Absence.
     * @example
     * // Delete one Absence
     * const Absence = await prisma.absence.delete({
     *   where: {
     *     // ... filter to delete one Absence
     *   }
     * })
     * 
     */
    delete<T extends AbsenceDeleteArgs>(args: SelectSubset<T, AbsenceDeleteArgs<ExtArgs>>): Prisma__AbsenceClient<$Result.GetResult<Prisma.$AbsencePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Absence.
     * @param {AbsenceUpdateArgs} args - Arguments to update one Absence.
     * @example
     * // Update one Absence
     * const absence = await prisma.absence.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AbsenceUpdateArgs>(args: SelectSubset<T, AbsenceUpdateArgs<ExtArgs>>): Prisma__AbsenceClient<$Result.GetResult<Prisma.$AbsencePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Absences.
     * @param {AbsenceDeleteManyArgs} args - Arguments to filter Absences to delete.
     * @example
     * // Delete a few Absences
     * const { count } = await prisma.absence.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AbsenceDeleteManyArgs>(args?: SelectSubset<T, AbsenceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Absences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AbsenceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Absences
     * const absence = await prisma.absence.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AbsenceUpdateManyArgs>(args: SelectSubset<T, AbsenceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Absence.
     * @param {AbsenceUpsertArgs} args - Arguments to update or create a Absence.
     * @example
     * // Update or create a Absence
     * const absence = await prisma.absence.upsert({
     *   create: {
     *     // ... data to create a Absence
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Absence we want to update
     *   }
     * })
     */
    upsert<T extends AbsenceUpsertArgs>(args: SelectSubset<T, AbsenceUpsertArgs<ExtArgs>>): Prisma__AbsenceClient<$Result.GetResult<Prisma.$AbsencePayload<ExtArgs>, T, "upsert">, never, ExtArgs>

    /**
     * Find zero or more Absences that matches the filter.
     * @param {AbsenceFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const absence = await prisma.absence.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
     */
    findRaw(args?: AbsenceFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Absence.
     * @param {AbsenceAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const absence = await prisma.absence.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: AbsenceAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Absences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AbsenceCountArgs} args - Arguments to filter Absences to count.
     * @example
     * // Count the number of Absences
     * const count = await prisma.absence.count({
     *   where: {
     *     // ... the filter for the Absences we want to count
     *   }
     * })
    **/
    count<T extends AbsenceCountArgs>(
      args?: Subset<T, AbsenceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AbsenceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Absence.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AbsenceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AbsenceAggregateArgs>(args: Subset<T, AbsenceAggregateArgs>): Prisma.PrismaPromise<GetAbsenceAggregateType<T>>

    /**
     * Group by Absence.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AbsenceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AbsenceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AbsenceGroupByArgs['orderBy'] }
        : { orderBy?: AbsenceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AbsenceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAbsenceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Absence model
   */
  readonly fields: AbsenceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Absence.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AbsenceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Absence model
   */ 
  interface AbsenceFieldRefs {
    readonly id: FieldRef<"Absence", 'String'>
    readonly fromDate: FieldRef<"Absence", 'DateTime'>
    readonly toDate: FieldRef<"Absence", 'DateTime'>
    readonly reason: FieldRef<"Absence", 'String'>
    readonly createdAt: FieldRef<"Absence", 'DateTime'>
    readonly userId: FieldRef<"Absence", 'String'>
    readonly createdById: FieldRef<"Absence", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Absence findUnique
   */
  export type AbsenceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Absence
     */
    select?: AbsenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AbsenceInclude<ExtArgs> | null
    /**
     * Filter, which Absence to fetch.
     */
    where: AbsenceWhereUniqueInput
  }

  /**
   * Absence findUniqueOrThrow
   */
  export type AbsenceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Absence
     */
    select?: AbsenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AbsenceInclude<ExtArgs> | null
    /**
     * Filter, which Absence to fetch.
     */
    where: AbsenceWhereUniqueInput
  }

  /**
   * Absence findFirst
   */
  export type AbsenceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Absence
     */
    select?: AbsenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AbsenceInclude<ExtArgs> | null
    /**
     * Filter, which Absence to fetch.
     */
    where?: AbsenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Absences to fetch.
     */
    orderBy?: AbsenceOrderByWithRelationInput | AbsenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Absences.
     */
    cursor?: AbsenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Absences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Absences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Absences.
     */
    distinct?: AbsenceScalarFieldEnum | AbsenceScalarFieldEnum[]
  }

  /**
   * Absence findFirstOrThrow
   */
  export type AbsenceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Absence
     */
    select?: AbsenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AbsenceInclude<ExtArgs> | null
    /**
     * Filter, which Absence to fetch.
     */
    where?: AbsenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Absences to fetch.
     */
    orderBy?: AbsenceOrderByWithRelationInput | AbsenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Absences.
     */
    cursor?: AbsenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Absences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Absences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Absences.
     */
    distinct?: AbsenceScalarFieldEnum | AbsenceScalarFieldEnum[]
  }

  /**
   * Absence findMany
   */
  export type AbsenceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Absence
     */
    select?: AbsenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AbsenceInclude<ExtArgs> | null
    /**
     * Filter, which Absences to fetch.
     */
    where?: AbsenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Absences to fetch.
     */
    orderBy?: AbsenceOrderByWithRelationInput | AbsenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Absences.
     */
    cursor?: AbsenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Absences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Absences.
     */
    skip?: number
    distinct?: AbsenceScalarFieldEnum | AbsenceScalarFieldEnum[]
  }

  /**
   * Absence create
   */
  export type AbsenceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Absence
     */
    select?: AbsenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AbsenceInclude<ExtArgs> | null
    /**
     * The data needed to create a Absence.
     */
    data: XOR<AbsenceCreateInput, AbsenceUncheckedCreateInput>
  }

  /**
   * Absence createMany
   */
  export type AbsenceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Absences.
     */
    data: AbsenceCreateManyInput | AbsenceCreateManyInput[]
  }

  /**
   * Absence update
   */
  export type AbsenceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Absence
     */
    select?: AbsenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AbsenceInclude<ExtArgs> | null
    /**
     * The data needed to update a Absence.
     */
    data: XOR<AbsenceUpdateInput, AbsenceUncheckedUpdateInput>
    /**
     * Choose, which Absence to update.
     */
    where: AbsenceWhereUniqueInput
  }

  /**
   * Absence updateMany
   */
  export type AbsenceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Absences.
     */
    data: XOR<AbsenceUpdateManyMutationInput, AbsenceUncheckedUpdateManyInput>
    /**
     * Filter which Absences to update
     */
    where?: AbsenceWhereInput
  }

  /**
   * Absence upsert
   */
  export type AbsenceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Absence
     */
    select?: AbsenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AbsenceInclude<ExtArgs> | null
    /**
     * The filter to search for the Absence to update in case it exists.
     */
    where: AbsenceWhereUniqueInput
    /**
     * In case the Absence found by the `where` argument doesn't exist, create a new Absence with this data.
     */
    create: XOR<AbsenceCreateInput, AbsenceUncheckedCreateInput>
    /**
     * In case the Absence was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AbsenceUpdateInput, AbsenceUncheckedUpdateInput>
  }

  /**
   * Absence delete
   */
  export type AbsenceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Absence
     */
    select?: AbsenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AbsenceInclude<ExtArgs> | null
    /**
     * Filter which Absence to delete.
     */
    where: AbsenceWhereUniqueInput
  }

  /**
   * Absence deleteMany
   */
  export type AbsenceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Absences to delete
     */
    where?: AbsenceWhereInput
  }

  /**
   * Absence findRaw
   */
  export type AbsenceFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Absence aggregateRaw
   */
  export type AbsenceAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Absence without action
   */
  export type AbsenceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Absence
     */
    select?: AbsenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AbsenceInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const UserScalarFieldEnum: {
    id: 'id',
    username: 'username',
    email: 'email',
    password: 'password',
    fullName: 'fullName',
    role: 'role',
    isActive: 'isActive',
    team: 'team',
    lastLogin: 'lastLogin',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const TaskScalarFieldEnum: {
    id: 'id',
    uin: 'uin',
    title: 'title',
    description: 'description',
    taskType: 'taskType',
    status: 'status',
    expectedPublishDate: 'expectedPublishDate',
    platform: 'platform',
    category: 'category',
    remarks: 'remarks',
    approvalDate: 'approvalDate',
    expiryDate: 'expiryDate',
    approvalProofUrl: 'approvalProofUrl',
    publishDate: 'publishDate',
    publishedCopyUrl: 'publishedCopyUrl',
    closureComments: 'closureComments',
    closureDate: 'closureDate',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdBy: 'createdBy',
    assignedProductIds: 'assignedProductIds',
    assignedComplianceId: 'assignedComplianceId'
  };

  export type TaskScalarFieldEnum = (typeof TaskScalarFieldEnum)[keyof typeof TaskScalarFieldEnum]


  export const VersionScalarFieldEnum: {
    id: 'id',
    versionNumber: 'versionNumber',
    fileUrls: 'fileUrls',
    remarks: 'remarks',
    uploadedAt: 'uploadedAt',
    taskId: 'taskId',
    uploadedById: 'uploadedById'
  };

  export type VersionScalarFieldEnum = (typeof VersionScalarFieldEnum)[keyof typeof VersionScalarFieldEnum]


  export const CommentScalarFieldEnum: {
    id: 'id',
    content: 'content',
    attachments: 'attachments',
    isGlobal: 'isGlobal',
    createdAt: 'createdAt',
    taskId: 'taskId',
    versionId: 'versionId',
    authorId: 'authorId'
  };

  export type CommentScalarFieldEnum = (typeof CommentScalarFieldEnum)[keyof typeof CommentScalarFieldEnum]


  export const ExchangeApprovalScalarFieldEnum: {
    id: 'id',
    exchangeName: 'exchangeName',
    typeOfContent: 'typeOfContent',
    approvalStatus: 'approvalStatus',
    approvalDate: 'approvalDate',
    expiryDate: 'expiryDate',
    referenceNumber: 'referenceNumber',
    approvalEmailUrl: 'approvalEmailUrl',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    taskId: 'taskId',
    updatedById: 'updatedById'
  };

  export type ExchangeApprovalScalarFieldEnum = (typeof ExchangeApprovalScalarFieldEnum)[keyof typeof ExchangeApprovalScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    id: 'id',
    title: 'title',
    message: 'message',
    type: 'type',
    isRead: 'isRead',
    createdAt: 'createdAt',
    userId: 'userId',
    taskId: 'taskId'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const AuditLogScalarFieldEnum: {
    id: 'id',
    action: 'action',
    details: 'details',
    timestamp: 'timestamp',
    performedBy: 'performedBy',
    taskId: 'taskId'
  };

  export type AuditLogScalarFieldEnum = (typeof AuditLogScalarFieldEnum)[keyof typeof AuditLogScalarFieldEnum]


  export const AbsenceScalarFieldEnum: {
    id: 'id',
    fromDate: 'fromDate',
    toDate: 'toDate',
    reason: 'reason',
    createdAt: 'createdAt',
    userId: 'userId',
    createdById: 'createdById'
  };

  export type AbsenceScalarFieldEnum = (typeof AbsenceScalarFieldEnum)[keyof typeof AbsenceScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'TaskType'
   */
  export type EnumTaskTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TaskType'>
    


  /**
   * Reference to a field of type 'TaskType[]'
   */
  export type ListEnumTaskTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TaskType[]'>
    


  /**
   * Reference to a field of type 'TaskStatus'
   */
  export type EnumTaskStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TaskStatus'>
    


  /**
   * Reference to a field of type 'TaskStatus[]'
   */
  export type ListEnumTaskStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TaskStatus[]'>
    


  /**
   * Reference to a field of type 'ExchangeApprovalStatus'
   */
  export type EnumExchangeApprovalStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ExchangeApprovalStatus'>
    


  /**
   * Reference to a field of type 'ExchangeApprovalStatus[]'
   */
  export type ListEnumExchangeApprovalStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ExchangeApprovalStatus[]'>
    


  /**
   * Reference to a field of type 'NotificationType'
   */
  export type EnumNotificationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationType'>
    


  /**
   * Reference to a field of type 'NotificationType[]'
   */
  export type ListEnumNotificationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationType[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    fullName?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    isActive?: BoolFilter<"User"> | boolean
    team?: StringNullableFilter<"User"> | string | null
    lastLogin?: DateTimeNullableFilter<"User"> | Date | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    createdTasks?: TaskListRelationFilter
    complianceTasks?: TaskListRelationFilter
    comments?: CommentListRelationFilter
    versions?: VersionListRelationFilter
    auditLogs?: AuditLogListRelationFilter
    notifications?: NotificationListRelationFilter
    absences?: AbsenceListRelationFilter
    createdAbsences?: AbsenceListRelationFilter
    exchangeApprovals?: ExchangeApprovalListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    fullName?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    team?: SortOrder
    lastLogin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdTasks?: TaskOrderByRelationAggregateInput
    complianceTasks?: TaskOrderByRelationAggregateInput
    comments?: CommentOrderByRelationAggregateInput
    versions?: VersionOrderByRelationAggregateInput
    auditLogs?: AuditLogOrderByRelationAggregateInput
    notifications?: NotificationOrderByRelationAggregateInput
    absences?: AbsenceOrderByRelationAggregateInput
    createdAbsences?: AbsenceOrderByRelationAggregateInput
    exchangeApprovals?: ExchangeApprovalOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    username?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    fullName?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    isActive?: BoolFilter<"User"> | boolean
    team?: StringNullableFilter<"User"> | string | null
    lastLogin?: DateTimeNullableFilter<"User"> | Date | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    createdTasks?: TaskListRelationFilter
    complianceTasks?: TaskListRelationFilter
    comments?: CommentListRelationFilter
    versions?: VersionListRelationFilter
    auditLogs?: AuditLogListRelationFilter
    notifications?: NotificationListRelationFilter
    absences?: AbsenceListRelationFilter
    createdAbsences?: AbsenceListRelationFilter
    exchangeApprovals?: ExchangeApprovalListRelationFilter
  }, "id" | "username" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    fullName?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    team?: SortOrder
    lastLogin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    username?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    fullName?: StringWithAggregatesFilter<"User"> | string
    role?: EnumRoleWithAggregatesFilter<"User"> | $Enums.Role
    isActive?: BoolWithAggregatesFilter<"User"> | boolean
    team?: StringNullableWithAggregatesFilter<"User"> | string | null
    lastLogin?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type TaskWhereInput = {
    AND?: TaskWhereInput | TaskWhereInput[]
    OR?: TaskWhereInput[]
    NOT?: TaskWhereInput | TaskWhereInput[]
    id?: StringFilter<"Task"> | string
    uin?: StringFilter<"Task"> | string
    title?: StringFilter<"Task"> | string
    description?: StringNullableFilter<"Task"> | string | null
    taskType?: EnumTaskTypeNullableFilter<"Task"> | $Enums.TaskType | null
    status?: EnumTaskStatusFilter<"Task"> | $Enums.TaskStatus
    expectedPublishDate?: DateTimeNullableFilter<"Task"> | Date | string | null
    platform?: StringNullableFilter<"Task"> | string | null
    category?: StringNullableFilter<"Task"> | string | null
    remarks?: StringNullableFilter<"Task"> | string | null
    approvalDate?: DateTimeNullableFilter<"Task"> | Date | string | null
    expiryDate?: DateTimeNullableFilter<"Task"> | Date | string | null
    approvalProofUrl?: StringNullableFilter<"Task"> | string | null
    publishDate?: DateTimeNullableFilter<"Task"> | Date | string | null
    publishedCopyUrl?: StringNullableFilter<"Task"> | string | null
    closureComments?: StringNullableFilter<"Task"> | string | null
    closureDate?: DateTimeNullableFilter<"Task"> | Date | string | null
    createdAt?: DateTimeFilter<"Task"> | Date | string
    updatedAt?: DateTimeFilter<"Task"> | Date | string
    createdBy?: StringFilter<"Task"> | string
    assignedProductIds?: StringNullableListFilter<"Task">
    assignedComplianceId?: StringNullableFilter<"Task"> | string | null
    creator?: XOR<UserRelationFilter, UserWhereInput>
    assignedCompliance?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    versions?: VersionListRelationFilter
    comments?: CommentListRelationFilter
    exchangeApprovals?: ExchangeApprovalListRelationFilter
    auditLogs?: AuditLogListRelationFilter
    notifications?: NotificationListRelationFilter
  }

  export type TaskOrderByWithRelationInput = {
    id?: SortOrder
    uin?: SortOrder
    title?: SortOrder
    description?: SortOrder
    taskType?: SortOrder
    status?: SortOrder
    expectedPublishDate?: SortOrder
    platform?: SortOrder
    category?: SortOrder
    remarks?: SortOrder
    approvalDate?: SortOrder
    expiryDate?: SortOrder
    approvalProofUrl?: SortOrder
    publishDate?: SortOrder
    publishedCopyUrl?: SortOrder
    closureComments?: SortOrder
    closureDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrder
    assignedProductIds?: SortOrder
    assignedComplianceId?: SortOrder
    creator?: UserOrderByWithRelationInput
    assignedCompliance?: UserOrderByWithRelationInput
    versions?: VersionOrderByRelationAggregateInput
    comments?: CommentOrderByRelationAggregateInput
    exchangeApprovals?: ExchangeApprovalOrderByRelationAggregateInput
    auditLogs?: AuditLogOrderByRelationAggregateInput
    notifications?: NotificationOrderByRelationAggregateInput
  }

  export type TaskWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    uin?: string
    AND?: TaskWhereInput | TaskWhereInput[]
    OR?: TaskWhereInput[]
    NOT?: TaskWhereInput | TaskWhereInput[]
    title?: StringFilter<"Task"> | string
    description?: StringNullableFilter<"Task"> | string | null
    taskType?: EnumTaskTypeNullableFilter<"Task"> | $Enums.TaskType | null
    status?: EnumTaskStatusFilter<"Task"> | $Enums.TaskStatus
    expectedPublishDate?: DateTimeNullableFilter<"Task"> | Date | string | null
    platform?: StringNullableFilter<"Task"> | string | null
    category?: StringNullableFilter<"Task"> | string | null
    remarks?: StringNullableFilter<"Task"> | string | null
    approvalDate?: DateTimeNullableFilter<"Task"> | Date | string | null
    expiryDate?: DateTimeNullableFilter<"Task"> | Date | string | null
    approvalProofUrl?: StringNullableFilter<"Task"> | string | null
    publishDate?: DateTimeNullableFilter<"Task"> | Date | string | null
    publishedCopyUrl?: StringNullableFilter<"Task"> | string | null
    closureComments?: StringNullableFilter<"Task"> | string | null
    closureDate?: DateTimeNullableFilter<"Task"> | Date | string | null
    createdAt?: DateTimeFilter<"Task"> | Date | string
    updatedAt?: DateTimeFilter<"Task"> | Date | string
    createdBy?: StringFilter<"Task"> | string
    assignedProductIds?: StringNullableListFilter<"Task">
    assignedComplianceId?: StringNullableFilter<"Task"> | string | null
    creator?: XOR<UserRelationFilter, UserWhereInput>
    assignedCompliance?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    versions?: VersionListRelationFilter
    comments?: CommentListRelationFilter
    exchangeApprovals?: ExchangeApprovalListRelationFilter
    auditLogs?: AuditLogListRelationFilter
    notifications?: NotificationListRelationFilter
  }, "id" | "uin">

  export type TaskOrderByWithAggregationInput = {
    id?: SortOrder
    uin?: SortOrder
    title?: SortOrder
    description?: SortOrder
    taskType?: SortOrder
    status?: SortOrder
    expectedPublishDate?: SortOrder
    platform?: SortOrder
    category?: SortOrder
    remarks?: SortOrder
    approvalDate?: SortOrder
    expiryDate?: SortOrder
    approvalProofUrl?: SortOrder
    publishDate?: SortOrder
    publishedCopyUrl?: SortOrder
    closureComments?: SortOrder
    closureDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrder
    assignedProductIds?: SortOrder
    assignedComplianceId?: SortOrder
    _count?: TaskCountOrderByAggregateInput
    _max?: TaskMaxOrderByAggregateInput
    _min?: TaskMinOrderByAggregateInput
  }

  export type TaskScalarWhereWithAggregatesInput = {
    AND?: TaskScalarWhereWithAggregatesInput | TaskScalarWhereWithAggregatesInput[]
    OR?: TaskScalarWhereWithAggregatesInput[]
    NOT?: TaskScalarWhereWithAggregatesInput | TaskScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Task"> | string
    uin?: StringWithAggregatesFilter<"Task"> | string
    title?: StringWithAggregatesFilter<"Task"> | string
    description?: StringNullableWithAggregatesFilter<"Task"> | string | null
    taskType?: EnumTaskTypeNullableWithAggregatesFilter<"Task"> | $Enums.TaskType | null
    status?: EnumTaskStatusWithAggregatesFilter<"Task"> | $Enums.TaskStatus
    expectedPublishDate?: DateTimeNullableWithAggregatesFilter<"Task"> | Date | string | null
    platform?: StringNullableWithAggregatesFilter<"Task"> | string | null
    category?: StringNullableWithAggregatesFilter<"Task"> | string | null
    remarks?: StringNullableWithAggregatesFilter<"Task"> | string | null
    approvalDate?: DateTimeNullableWithAggregatesFilter<"Task"> | Date | string | null
    expiryDate?: DateTimeNullableWithAggregatesFilter<"Task"> | Date | string | null
    approvalProofUrl?: StringNullableWithAggregatesFilter<"Task"> | string | null
    publishDate?: DateTimeNullableWithAggregatesFilter<"Task"> | Date | string | null
    publishedCopyUrl?: StringNullableWithAggregatesFilter<"Task"> | string | null
    closureComments?: StringNullableWithAggregatesFilter<"Task"> | string | null
    closureDate?: DateTimeNullableWithAggregatesFilter<"Task"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Task"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Task"> | Date | string
    createdBy?: StringWithAggregatesFilter<"Task"> | string
    assignedProductIds?: StringNullableListFilter<"Task">
    assignedComplianceId?: StringNullableWithAggregatesFilter<"Task"> | string | null
  }

  export type VersionWhereInput = {
    AND?: VersionWhereInput | VersionWhereInput[]
    OR?: VersionWhereInput[]
    NOT?: VersionWhereInput | VersionWhereInput[]
    id?: StringFilter<"Version"> | string
    versionNumber?: StringFilter<"Version"> | string
    fileUrls?: StringNullableListFilter<"Version">
    remarks?: StringNullableFilter<"Version"> | string | null
    uploadedAt?: DateTimeFilter<"Version"> | Date | string
    taskId?: StringFilter<"Version"> | string
    uploadedById?: StringFilter<"Version"> | string
    task?: XOR<TaskRelationFilter, TaskWhereInput>
    uploadedBy?: XOR<UserRelationFilter, UserWhereInput>
    comments?: CommentListRelationFilter
  }

  export type VersionOrderByWithRelationInput = {
    id?: SortOrder
    versionNumber?: SortOrder
    fileUrls?: SortOrder
    remarks?: SortOrder
    uploadedAt?: SortOrder
    taskId?: SortOrder
    uploadedById?: SortOrder
    task?: TaskOrderByWithRelationInput
    uploadedBy?: UserOrderByWithRelationInput
    comments?: CommentOrderByRelationAggregateInput
  }

  export type VersionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: VersionWhereInput | VersionWhereInput[]
    OR?: VersionWhereInput[]
    NOT?: VersionWhereInput | VersionWhereInput[]
    versionNumber?: StringFilter<"Version"> | string
    fileUrls?: StringNullableListFilter<"Version">
    remarks?: StringNullableFilter<"Version"> | string | null
    uploadedAt?: DateTimeFilter<"Version"> | Date | string
    taskId?: StringFilter<"Version"> | string
    uploadedById?: StringFilter<"Version"> | string
    task?: XOR<TaskRelationFilter, TaskWhereInput>
    uploadedBy?: XOR<UserRelationFilter, UserWhereInput>
    comments?: CommentListRelationFilter
  }, "id">

  export type VersionOrderByWithAggregationInput = {
    id?: SortOrder
    versionNumber?: SortOrder
    fileUrls?: SortOrder
    remarks?: SortOrder
    uploadedAt?: SortOrder
    taskId?: SortOrder
    uploadedById?: SortOrder
    _count?: VersionCountOrderByAggregateInput
    _max?: VersionMaxOrderByAggregateInput
    _min?: VersionMinOrderByAggregateInput
  }

  export type VersionScalarWhereWithAggregatesInput = {
    AND?: VersionScalarWhereWithAggregatesInput | VersionScalarWhereWithAggregatesInput[]
    OR?: VersionScalarWhereWithAggregatesInput[]
    NOT?: VersionScalarWhereWithAggregatesInput | VersionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Version"> | string
    versionNumber?: StringWithAggregatesFilter<"Version"> | string
    fileUrls?: StringNullableListFilter<"Version">
    remarks?: StringNullableWithAggregatesFilter<"Version"> | string | null
    uploadedAt?: DateTimeWithAggregatesFilter<"Version"> | Date | string
    taskId?: StringWithAggregatesFilter<"Version"> | string
    uploadedById?: StringWithAggregatesFilter<"Version"> | string
  }

  export type CommentWhereInput = {
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    id?: StringFilter<"Comment"> | string
    content?: StringFilter<"Comment"> | string
    attachments?: StringNullableListFilter<"Comment">
    isGlobal?: BoolFilter<"Comment"> | boolean
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    taskId?: StringFilter<"Comment"> | string
    versionId?: StringNullableFilter<"Comment"> | string | null
    authorId?: StringFilter<"Comment"> | string
    task?: XOR<TaskRelationFilter, TaskWhereInput>
    version?: XOR<VersionNullableRelationFilter, VersionWhereInput> | null
    author?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type CommentOrderByWithRelationInput = {
    id?: SortOrder
    content?: SortOrder
    attachments?: SortOrder
    isGlobal?: SortOrder
    createdAt?: SortOrder
    taskId?: SortOrder
    versionId?: SortOrder
    authorId?: SortOrder
    task?: TaskOrderByWithRelationInput
    version?: VersionOrderByWithRelationInput
    author?: UserOrderByWithRelationInput
  }

  export type CommentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    content?: StringFilter<"Comment"> | string
    attachments?: StringNullableListFilter<"Comment">
    isGlobal?: BoolFilter<"Comment"> | boolean
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    taskId?: StringFilter<"Comment"> | string
    versionId?: StringNullableFilter<"Comment"> | string | null
    authorId?: StringFilter<"Comment"> | string
    task?: XOR<TaskRelationFilter, TaskWhereInput>
    version?: XOR<VersionNullableRelationFilter, VersionWhereInput> | null
    author?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type CommentOrderByWithAggregationInput = {
    id?: SortOrder
    content?: SortOrder
    attachments?: SortOrder
    isGlobal?: SortOrder
    createdAt?: SortOrder
    taskId?: SortOrder
    versionId?: SortOrder
    authorId?: SortOrder
    _count?: CommentCountOrderByAggregateInput
    _max?: CommentMaxOrderByAggregateInput
    _min?: CommentMinOrderByAggregateInput
  }

  export type CommentScalarWhereWithAggregatesInput = {
    AND?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    OR?: CommentScalarWhereWithAggregatesInput[]
    NOT?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Comment"> | string
    content?: StringWithAggregatesFilter<"Comment"> | string
    attachments?: StringNullableListFilter<"Comment">
    isGlobal?: BoolWithAggregatesFilter<"Comment"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Comment"> | Date | string
    taskId?: StringWithAggregatesFilter<"Comment"> | string
    versionId?: StringNullableWithAggregatesFilter<"Comment"> | string | null
    authorId?: StringWithAggregatesFilter<"Comment"> | string
  }

  export type ExchangeApprovalWhereInput = {
    AND?: ExchangeApprovalWhereInput | ExchangeApprovalWhereInput[]
    OR?: ExchangeApprovalWhereInput[]
    NOT?: ExchangeApprovalWhereInput | ExchangeApprovalWhereInput[]
    id?: StringFilter<"ExchangeApproval"> | string
    exchangeName?: StringFilter<"ExchangeApproval"> | string
    typeOfContent?: StringFilter<"ExchangeApproval"> | string
    approvalStatus?: EnumExchangeApprovalStatusFilter<"ExchangeApproval"> | $Enums.ExchangeApprovalStatus
    approvalDate?: DateTimeNullableFilter<"ExchangeApproval"> | Date | string | null
    expiryDate?: DateTimeNullableFilter<"ExchangeApproval"> | Date | string | null
    referenceNumber?: StringNullableFilter<"ExchangeApproval"> | string | null
    approvalEmailUrl?: StringNullableFilter<"ExchangeApproval"> | string | null
    createdAt?: DateTimeFilter<"ExchangeApproval"> | Date | string
    updatedAt?: DateTimeFilter<"ExchangeApproval"> | Date | string
    taskId?: StringFilter<"ExchangeApproval"> | string
    updatedById?: StringNullableFilter<"ExchangeApproval"> | string | null
    task?: XOR<TaskRelationFilter, TaskWhereInput>
    updatedBy?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }

  export type ExchangeApprovalOrderByWithRelationInput = {
    id?: SortOrder
    exchangeName?: SortOrder
    typeOfContent?: SortOrder
    approvalStatus?: SortOrder
    approvalDate?: SortOrder
    expiryDate?: SortOrder
    referenceNumber?: SortOrder
    approvalEmailUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    taskId?: SortOrder
    updatedById?: SortOrder
    task?: TaskOrderByWithRelationInput
    updatedBy?: UserOrderByWithRelationInput
  }

  export type ExchangeApprovalWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ExchangeApprovalWhereInput | ExchangeApprovalWhereInput[]
    OR?: ExchangeApprovalWhereInput[]
    NOT?: ExchangeApprovalWhereInput | ExchangeApprovalWhereInput[]
    exchangeName?: StringFilter<"ExchangeApproval"> | string
    typeOfContent?: StringFilter<"ExchangeApproval"> | string
    approvalStatus?: EnumExchangeApprovalStatusFilter<"ExchangeApproval"> | $Enums.ExchangeApprovalStatus
    approvalDate?: DateTimeNullableFilter<"ExchangeApproval"> | Date | string | null
    expiryDate?: DateTimeNullableFilter<"ExchangeApproval"> | Date | string | null
    referenceNumber?: StringNullableFilter<"ExchangeApproval"> | string | null
    approvalEmailUrl?: StringNullableFilter<"ExchangeApproval"> | string | null
    createdAt?: DateTimeFilter<"ExchangeApproval"> | Date | string
    updatedAt?: DateTimeFilter<"ExchangeApproval"> | Date | string
    taskId?: StringFilter<"ExchangeApproval"> | string
    updatedById?: StringNullableFilter<"ExchangeApproval"> | string | null
    task?: XOR<TaskRelationFilter, TaskWhereInput>
    updatedBy?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }, "id">

  export type ExchangeApprovalOrderByWithAggregationInput = {
    id?: SortOrder
    exchangeName?: SortOrder
    typeOfContent?: SortOrder
    approvalStatus?: SortOrder
    approvalDate?: SortOrder
    expiryDate?: SortOrder
    referenceNumber?: SortOrder
    approvalEmailUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    taskId?: SortOrder
    updatedById?: SortOrder
    _count?: ExchangeApprovalCountOrderByAggregateInput
    _max?: ExchangeApprovalMaxOrderByAggregateInput
    _min?: ExchangeApprovalMinOrderByAggregateInput
  }

  export type ExchangeApprovalScalarWhereWithAggregatesInput = {
    AND?: ExchangeApprovalScalarWhereWithAggregatesInput | ExchangeApprovalScalarWhereWithAggregatesInput[]
    OR?: ExchangeApprovalScalarWhereWithAggregatesInput[]
    NOT?: ExchangeApprovalScalarWhereWithAggregatesInput | ExchangeApprovalScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ExchangeApproval"> | string
    exchangeName?: StringWithAggregatesFilter<"ExchangeApproval"> | string
    typeOfContent?: StringWithAggregatesFilter<"ExchangeApproval"> | string
    approvalStatus?: EnumExchangeApprovalStatusWithAggregatesFilter<"ExchangeApproval"> | $Enums.ExchangeApprovalStatus
    approvalDate?: DateTimeNullableWithAggregatesFilter<"ExchangeApproval"> | Date | string | null
    expiryDate?: DateTimeNullableWithAggregatesFilter<"ExchangeApproval"> | Date | string | null
    referenceNumber?: StringNullableWithAggregatesFilter<"ExchangeApproval"> | string | null
    approvalEmailUrl?: StringNullableWithAggregatesFilter<"ExchangeApproval"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ExchangeApproval"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ExchangeApproval"> | Date | string
    taskId?: StringWithAggregatesFilter<"ExchangeApproval"> | string
    updatedById?: StringNullableWithAggregatesFilter<"ExchangeApproval"> | string | null
  }

  export type NotificationWhereInput = {
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    id?: StringFilter<"Notification"> | string
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    type?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    isRead?: BoolFilter<"Notification"> | boolean
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    userId?: StringFilter<"Notification"> | string
    taskId?: StringNullableFilter<"Notification"> | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    task?: XOR<TaskNullableRelationFilter, TaskWhereInput> | null
  }

  export type NotificationOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    message?: SortOrder
    type?: SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    taskId?: SortOrder
    user?: UserOrderByWithRelationInput
    task?: TaskOrderByWithRelationInput
  }

  export type NotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    type?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    isRead?: BoolFilter<"Notification"> | boolean
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    userId?: StringFilter<"Notification"> | string
    taskId?: StringNullableFilter<"Notification"> | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    task?: XOR<TaskNullableRelationFilter, TaskWhereInput> | null
  }, "id">

  export type NotificationOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    message?: SortOrder
    type?: SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    taskId?: SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    OR?: NotificationScalarWhereWithAggregatesInput[]
    NOT?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Notification"> | string
    title?: StringWithAggregatesFilter<"Notification"> | string
    message?: StringWithAggregatesFilter<"Notification"> | string
    type?: EnumNotificationTypeWithAggregatesFilter<"Notification"> | $Enums.NotificationType
    isRead?: BoolWithAggregatesFilter<"Notification"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
    userId?: StringWithAggregatesFilter<"Notification"> | string
    taskId?: StringNullableWithAggregatesFilter<"Notification"> | string | null
  }

  export type AuditLogWhereInput = {
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    id?: StringFilter<"AuditLog"> | string
    action?: StringFilter<"AuditLog"> | string
    details?: StringFilter<"AuditLog"> | string
    timestamp?: DateTimeFilter<"AuditLog"> | Date | string
    performedBy?: StringFilter<"AuditLog"> | string
    taskId?: StringNullableFilter<"AuditLog"> | string | null
    performedByUser?: XOR<UserRelationFilter, UserWhereInput>
    task?: XOR<TaskNullableRelationFilter, TaskWhereInput> | null
  }

  export type AuditLogOrderByWithRelationInput = {
    id?: SortOrder
    action?: SortOrder
    details?: SortOrder
    timestamp?: SortOrder
    performedBy?: SortOrder
    taskId?: SortOrder
    performedByUser?: UserOrderByWithRelationInput
    task?: TaskOrderByWithRelationInput
  }

  export type AuditLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    action?: StringFilter<"AuditLog"> | string
    details?: StringFilter<"AuditLog"> | string
    timestamp?: DateTimeFilter<"AuditLog"> | Date | string
    performedBy?: StringFilter<"AuditLog"> | string
    taskId?: StringNullableFilter<"AuditLog"> | string | null
    performedByUser?: XOR<UserRelationFilter, UserWhereInput>
    task?: XOR<TaskNullableRelationFilter, TaskWhereInput> | null
  }, "id">

  export type AuditLogOrderByWithAggregationInput = {
    id?: SortOrder
    action?: SortOrder
    details?: SortOrder
    timestamp?: SortOrder
    performedBy?: SortOrder
    taskId?: SortOrder
    _count?: AuditLogCountOrderByAggregateInput
    _max?: AuditLogMaxOrderByAggregateInput
    _min?: AuditLogMinOrderByAggregateInput
  }

  export type AuditLogScalarWhereWithAggregatesInput = {
    AND?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    OR?: AuditLogScalarWhereWithAggregatesInput[]
    NOT?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AuditLog"> | string
    action?: StringWithAggregatesFilter<"AuditLog"> | string
    details?: StringWithAggregatesFilter<"AuditLog"> | string
    timestamp?: DateTimeWithAggregatesFilter<"AuditLog"> | Date | string
    performedBy?: StringWithAggregatesFilter<"AuditLog"> | string
    taskId?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
  }

  export type AbsenceWhereInput = {
    AND?: AbsenceWhereInput | AbsenceWhereInput[]
    OR?: AbsenceWhereInput[]
    NOT?: AbsenceWhereInput | AbsenceWhereInput[]
    id?: StringFilter<"Absence"> | string
    fromDate?: DateTimeFilter<"Absence"> | Date | string
    toDate?: DateTimeFilter<"Absence"> | Date | string
    reason?: StringNullableFilter<"Absence"> | string | null
    createdAt?: DateTimeFilter<"Absence"> | Date | string
    userId?: StringFilter<"Absence"> | string
    createdById?: StringFilter<"Absence"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type AbsenceOrderByWithRelationInput = {
    id?: SortOrder
    fromDate?: SortOrder
    toDate?: SortOrder
    reason?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    createdById?: SortOrder
    user?: UserOrderByWithRelationInput
    createdBy?: UserOrderByWithRelationInput
  }

  export type AbsenceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AbsenceWhereInput | AbsenceWhereInput[]
    OR?: AbsenceWhereInput[]
    NOT?: AbsenceWhereInput | AbsenceWhereInput[]
    fromDate?: DateTimeFilter<"Absence"> | Date | string
    toDate?: DateTimeFilter<"Absence"> | Date | string
    reason?: StringNullableFilter<"Absence"> | string | null
    createdAt?: DateTimeFilter<"Absence"> | Date | string
    userId?: StringFilter<"Absence"> | string
    createdById?: StringFilter<"Absence"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type AbsenceOrderByWithAggregationInput = {
    id?: SortOrder
    fromDate?: SortOrder
    toDate?: SortOrder
    reason?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    createdById?: SortOrder
    _count?: AbsenceCountOrderByAggregateInput
    _max?: AbsenceMaxOrderByAggregateInput
    _min?: AbsenceMinOrderByAggregateInput
  }

  export type AbsenceScalarWhereWithAggregatesInput = {
    AND?: AbsenceScalarWhereWithAggregatesInput | AbsenceScalarWhereWithAggregatesInput[]
    OR?: AbsenceScalarWhereWithAggregatesInput[]
    NOT?: AbsenceScalarWhereWithAggregatesInput | AbsenceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Absence"> | string
    fromDate?: DateTimeWithAggregatesFilter<"Absence"> | Date | string
    toDate?: DateTimeWithAggregatesFilter<"Absence"> | Date | string
    reason?: StringNullableWithAggregatesFilter<"Absence"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Absence"> | Date | string
    userId?: StringWithAggregatesFilter<"Absence"> | string
    createdById?: StringWithAggregatesFilter<"Absence"> | string
  }

  export type UserCreateInput = {
    id?: string
    username: string
    email: string
    password: string
    fullName: string
    role: $Enums.Role
    isActive?: boolean
    team?: string | null
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdTasks?: TaskCreateNestedManyWithoutCreatorInput
    complianceTasks?: TaskCreateNestedManyWithoutAssignedComplianceInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    versions?: VersionCreateNestedManyWithoutUploadedByInput
    auditLogs?: AuditLogCreateNestedManyWithoutPerformedByUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    absences?: AbsenceCreateNestedManyWithoutUserInput
    createdAbsences?: AbsenceCreateNestedManyWithoutCreatedByInput
    exchangeApprovals?: ExchangeApprovalCreateNestedManyWithoutUpdatedByInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    username: string
    email: string
    password: string
    fullName: string
    role: $Enums.Role
    isActive?: boolean
    team?: string | null
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdTasks?: TaskUncheckedCreateNestedManyWithoutCreatorInput
    complianceTasks?: TaskUncheckedCreateNestedManyWithoutAssignedComplianceInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    versions?: VersionUncheckedCreateNestedManyWithoutUploadedByInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutPerformedByUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    absences?: AbsenceUncheckedCreateNestedManyWithoutUserInput
    createdAbsences?: AbsenceUncheckedCreateNestedManyWithoutCreatedByInput
    exchangeApprovals?: ExchangeApprovalUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type UserUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    team?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdTasks?: TaskUpdateManyWithoutCreatorNestedInput
    complianceTasks?: TaskUpdateManyWithoutAssignedComplianceNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    versions?: VersionUpdateManyWithoutUploadedByNestedInput
    auditLogs?: AuditLogUpdateManyWithoutPerformedByUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    absences?: AbsenceUpdateManyWithoutUserNestedInput
    createdAbsences?: AbsenceUpdateManyWithoutCreatedByNestedInput
    exchangeApprovals?: ExchangeApprovalUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUncheckedUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    team?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdTasks?: TaskUncheckedUpdateManyWithoutCreatorNestedInput
    complianceTasks?: TaskUncheckedUpdateManyWithoutAssignedComplianceNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    versions?: VersionUncheckedUpdateManyWithoutUploadedByNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutPerformedByUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    absences?: AbsenceUncheckedUpdateManyWithoutUserNestedInput
    createdAbsences?: AbsenceUncheckedUpdateManyWithoutCreatedByNestedInput
    exchangeApprovals?: ExchangeApprovalUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    username: string
    email: string
    password: string
    fullName: string
    role: $Enums.Role
    isActive?: boolean
    team?: string | null
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    team?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    team?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskCreateInput = {
    id?: string
    uin: string
    title: string
    description?: string | null
    taskType?: $Enums.TaskType | null
    status?: $Enums.TaskStatus
    expectedPublishDate?: Date | string | null
    platform?: string | null
    category?: string | null
    remarks?: string | null
    approvalDate?: Date | string | null
    expiryDate?: Date | string | null
    approvalProofUrl?: string | null
    publishDate?: Date | string | null
    publishedCopyUrl?: string | null
    closureComments?: string | null
    closureDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedProductIds?: TaskCreateassignedProductIdsInput | string[]
    creator: UserCreateNestedOneWithoutCreatedTasksInput
    assignedCompliance?: UserCreateNestedOneWithoutComplianceTasksInput
    versions?: VersionCreateNestedManyWithoutTaskInput
    comments?: CommentCreateNestedManyWithoutTaskInput
    exchangeApprovals?: ExchangeApprovalCreateNestedManyWithoutTaskInput
    auditLogs?: AuditLogCreateNestedManyWithoutTaskInput
    notifications?: NotificationCreateNestedManyWithoutTaskInput
  }

  export type TaskUncheckedCreateInput = {
    id?: string
    uin: string
    title: string
    description?: string | null
    taskType?: $Enums.TaskType | null
    status?: $Enums.TaskStatus
    expectedPublishDate?: Date | string | null
    platform?: string | null
    category?: string | null
    remarks?: string | null
    approvalDate?: Date | string | null
    expiryDate?: Date | string | null
    approvalProofUrl?: string | null
    publishDate?: Date | string | null
    publishedCopyUrl?: string | null
    closureComments?: string | null
    closureDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: string
    assignedProductIds?: TaskCreateassignedProductIdsInput | string[]
    assignedComplianceId?: string | null
    versions?: VersionUncheckedCreateNestedManyWithoutTaskInput
    comments?: CommentUncheckedCreateNestedManyWithoutTaskInput
    exchangeApprovals?: ExchangeApprovalUncheckedCreateNestedManyWithoutTaskInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutTaskInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutTaskInput
  }

  export type TaskUpdateInput = {
    uin?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    taskType?: NullableEnumTaskTypeFieldUpdateOperationsInput | $Enums.TaskType | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    expectedPublishDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    platform?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    approvalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvalProofUrl?: NullableStringFieldUpdateOperationsInput | string | null
    publishDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    publishedCopyUrl?: NullableStringFieldUpdateOperationsInput | string | null
    closureComments?: NullableStringFieldUpdateOperationsInput | string | null
    closureDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedProductIds?: TaskUpdateassignedProductIdsInput | string[]
    creator?: UserUpdateOneRequiredWithoutCreatedTasksNestedInput
    assignedCompliance?: UserUpdateOneWithoutComplianceTasksNestedInput
    versions?: VersionUpdateManyWithoutTaskNestedInput
    comments?: CommentUpdateManyWithoutTaskNestedInput
    exchangeApprovals?: ExchangeApprovalUpdateManyWithoutTaskNestedInput
    auditLogs?: AuditLogUpdateManyWithoutTaskNestedInput
    notifications?: NotificationUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateInput = {
    uin?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    taskType?: NullableEnumTaskTypeFieldUpdateOperationsInput | $Enums.TaskType | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    expectedPublishDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    platform?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    approvalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvalProofUrl?: NullableStringFieldUpdateOperationsInput | string | null
    publishDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    publishedCopyUrl?: NullableStringFieldUpdateOperationsInput | string | null
    closureComments?: NullableStringFieldUpdateOperationsInput | string | null
    closureDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    assignedProductIds?: TaskUpdateassignedProductIdsInput | string[]
    assignedComplianceId?: NullableStringFieldUpdateOperationsInput | string | null
    versions?: VersionUncheckedUpdateManyWithoutTaskNestedInput
    comments?: CommentUncheckedUpdateManyWithoutTaskNestedInput
    exchangeApprovals?: ExchangeApprovalUncheckedUpdateManyWithoutTaskNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutTaskNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutTaskNestedInput
  }

  export type TaskCreateManyInput = {
    id?: string
    uin: string
    title: string
    description?: string | null
    taskType?: $Enums.TaskType | null
    status?: $Enums.TaskStatus
    expectedPublishDate?: Date | string | null
    platform?: string | null
    category?: string | null
    remarks?: string | null
    approvalDate?: Date | string | null
    expiryDate?: Date | string | null
    approvalProofUrl?: string | null
    publishDate?: Date | string | null
    publishedCopyUrl?: string | null
    closureComments?: string | null
    closureDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: string
    assignedProductIds?: TaskCreateassignedProductIdsInput | string[]
    assignedComplianceId?: string | null
  }

  export type TaskUpdateManyMutationInput = {
    uin?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    taskType?: NullableEnumTaskTypeFieldUpdateOperationsInput | $Enums.TaskType | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    expectedPublishDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    platform?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    approvalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvalProofUrl?: NullableStringFieldUpdateOperationsInput | string | null
    publishDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    publishedCopyUrl?: NullableStringFieldUpdateOperationsInput | string | null
    closureComments?: NullableStringFieldUpdateOperationsInput | string | null
    closureDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedProductIds?: TaskUpdateassignedProductIdsInput | string[]
  }

  export type TaskUncheckedUpdateManyInput = {
    uin?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    taskType?: NullableEnumTaskTypeFieldUpdateOperationsInput | $Enums.TaskType | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    expectedPublishDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    platform?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    approvalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvalProofUrl?: NullableStringFieldUpdateOperationsInput | string | null
    publishDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    publishedCopyUrl?: NullableStringFieldUpdateOperationsInput | string | null
    closureComments?: NullableStringFieldUpdateOperationsInput | string | null
    closureDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    assignedProductIds?: TaskUpdateassignedProductIdsInput | string[]
    assignedComplianceId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type VersionCreateInput = {
    id?: string
    versionNumber: string
    fileUrls?: VersionCreatefileUrlsInput | string[]
    remarks?: string | null
    uploadedAt?: Date | string
    task: TaskCreateNestedOneWithoutVersionsInput
    uploadedBy: UserCreateNestedOneWithoutVersionsInput
    comments?: CommentCreateNestedManyWithoutVersionInput
  }

  export type VersionUncheckedCreateInput = {
    id?: string
    versionNumber: string
    fileUrls?: VersionCreatefileUrlsInput | string[]
    remarks?: string | null
    uploadedAt?: Date | string
    taskId: string
    uploadedById: string
    comments?: CommentUncheckedCreateNestedManyWithoutVersionInput
  }

  export type VersionUpdateInput = {
    versionNumber?: StringFieldUpdateOperationsInput | string
    fileUrls?: VersionUpdatefileUrlsInput | string[]
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    task?: TaskUpdateOneRequiredWithoutVersionsNestedInput
    uploadedBy?: UserUpdateOneRequiredWithoutVersionsNestedInput
    comments?: CommentUpdateManyWithoutVersionNestedInput
  }

  export type VersionUncheckedUpdateInput = {
    versionNumber?: StringFieldUpdateOperationsInput | string
    fileUrls?: VersionUpdatefileUrlsInput | string[]
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    taskId?: StringFieldUpdateOperationsInput | string
    uploadedById?: StringFieldUpdateOperationsInput | string
    comments?: CommentUncheckedUpdateManyWithoutVersionNestedInput
  }

  export type VersionCreateManyInput = {
    id?: string
    versionNumber: string
    fileUrls?: VersionCreatefileUrlsInput | string[]
    remarks?: string | null
    uploadedAt?: Date | string
    taskId: string
    uploadedById: string
  }

  export type VersionUpdateManyMutationInput = {
    versionNumber?: StringFieldUpdateOperationsInput | string
    fileUrls?: VersionUpdatefileUrlsInput | string[]
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VersionUncheckedUpdateManyInput = {
    versionNumber?: StringFieldUpdateOperationsInput | string
    fileUrls?: VersionUpdatefileUrlsInput | string[]
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    taskId?: StringFieldUpdateOperationsInput | string
    uploadedById?: StringFieldUpdateOperationsInput | string
  }

  export type CommentCreateInput = {
    id?: string
    content: string
    attachments?: CommentCreateattachmentsInput | string[]
    isGlobal?: boolean
    createdAt?: Date | string
    task: TaskCreateNestedOneWithoutCommentsInput
    version?: VersionCreateNestedOneWithoutCommentsInput
    author: UserCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateInput = {
    id?: string
    content: string
    attachments?: CommentCreateattachmentsInput | string[]
    isGlobal?: boolean
    createdAt?: Date | string
    taskId: string
    versionId?: string | null
    authorId: string
  }

  export type CommentUpdateInput = {
    content?: StringFieldUpdateOperationsInput | string
    attachments?: CommentUpdateattachmentsInput | string[]
    isGlobal?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    task?: TaskUpdateOneRequiredWithoutCommentsNestedInput
    version?: VersionUpdateOneWithoutCommentsNestedInput
    author?: UserUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type CommentUncheckedUpdateInput = {
    content?: StringFieldUpdateOperationsInput | string
    attachments?: CommentUpdateattachmentsInput | string[]
    isGlobal?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    taskId?: StringFieldUpdateOperationsInput | string
    versionId?: NullableStringFieldUpdateOperationsInput | string | null
    authorId?: StringFieldUpdateOperationsInput | string
  }

  export type CommentCreateManyInput = {
    id?: string
    content: string
    attachments?: CommentCreateattachmentsInput | string[]
    isGlobal?: boolean
    createdAt?: Date | string
    taskId: string
    versionId?: string | null
    authorId: string
  }

  export type CommentUpdateManyMutationInput = {
    content?: StringFieldUpdateOperationsInput | string
    attachments?: CommentUpdateattachmentsInput | string[]
    isGlobal?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUncheckedUpdateManyInput = {
    content?: StringFieldUpdateOperationsInput | string
    attachments?: CommentUpdateattachmentsInput | string[]
    isGlobal?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    taskId?: StringFieldUpdateOperationsInput | string
    versionId?: NullableStringFieldUpdateOperationsInput | string | null
    authorId?: StringFieldUpdateOperationsInput | string
  }

  export type ExchangeApprovalCreateInput = {
    id?: string
    exchangeName: string
    typeOfContent: string
    approvalStatus?: $Enums.ExchangeApprovalStatus
    approvalDate?: Date | string | null
    expiryDate?: Date | string | null
    referenceNumber?: string | null
    approvalEmailUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    task: TaskCreateNestedOneWithoutExchangeApprovalsInput
    updatedBy?: UserCreateNestedOneWithoutExchangeApprovalsInput
  }

  export type ExchangeApprovalUncheckedCreateInput = {
    id?: string
    exchangeName: string
    typeOfContent: string
    approvalStatus?: $Enums.ExchangeApprovalStatus
    approvalDate?: Date | string | null
    expiryDate?: Date | string | null
    referenceNumber?: string | null
    approvalEmailUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    taskId: string
    updatedById?: string | null
  }

  export type ExchangeApprovalUpdateInput = {
    exchangeName?: StringFieldUpdateOperationsInput | string
    typeOfContent?: StringFieldUpdateOperationsInput | string
    approvalStatus?: EnumExchangeApprovalStatusFieldUpdateOperationsInput | $Enums.ExchangeApprovalStatus
    approvalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    referenceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    approvalEmailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    task?: TaskUpdateOneRequiredWithoutExchangeApprovalsNestedInput
    updatedBy?: UserUpdateOneWithoutExchangeApprovalsNestedInput
  }

  export type ExchangeApprovalUncheckedUpdateInput = {
    exchangeName?: StringFieldUpdateOperationsInput | string
    typeOfContent?: StringFieldUpdateOperationsInput | string
    approvalStatus?: EnumExchangeApprovalStatusFieldUpdateOperationsInput | $Enums.ExchangeApprovalStatus
    approvalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    referenceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    approvalEmailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    taskId?: StringFieldUpdateOperationsInput | string
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ExchangeApprovalCreateManyInput = {
    id?: string
    exchangeName: string
    typeOfContent: string
    approvalStatus?: $Enums.ExchangeApprovalStatus
    approvalDate?: Date | string | null
    expiryDate?: Date | string | null
    referenceNumber?: string | null
    approvalEmailUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    taskId: string
    updatedById?: string | null
  }

  export type ExchangeApprovalUpdateManyMutationInput = {
    exchangeName?: StringFieldUpdateOperationsInput | string
    typeOfContent?: StringFieldUpdateOperationsInput | string
    approvalStatus?: EnumExchangeApprovalStatusFieldUpdateOperationsInput | $Enums.ExchangeApprovalStatus
    approvalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    referenceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    approvalEmailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExchangeApprovalUncheckedUpdateManyInput = {
    exchangeName?: StringFieldUpdateOperationsInput | string
    typeOfContent?: StringFieldUpdateOperationsInput | string
    approvalStatus?: EnumExchangeApprovalStatusFieldUpdateOperationsInput | $Enums.ExchangeApprovalStatus
    approvalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    referenceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    approvalEmailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    taskId?: StringFieldUpdateOperationsInput | string
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NotificationCreateInput = {
    id?: string
    title: string
    message: string
    type: $Enums.NotificationType
    isRead?: boolean
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutNotificationsInput
    task?: TaskCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateInput = {
    id?: string
    title: string
    message: string
    type: $Enums.NotificationType
    isRead?: boolean
    createdAt?: Date | string
    userId: string
    taskId?: string | null
  }

  export type NotificationUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutNotificationsNestedInput
    task?: TaskUpdateOneWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NotificationCreateManyInput = {
    id?: string
    title: string
    message: string
    type: $Enums.NotificationType
    isRead?: boolean
    createdAt?: Date | string
    userId: string
    taskId?: string | null
  }

  export type NotificationUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyInput = {
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AuditLogCreateInput = {
    id?: string
    action: string
    details: string
    timestamp?: Date | string
    performedByUser: UserCreateNestedOneWithoutAuditLogsInput
    task?: TaskCreateNestedOneWithoutAuditLogsInput
  }

  export type AuditLogUncheckedCreateInput = {
    id?: string
    action: string
    details: string
    timestamp?: Date | string
    performedBy: string
    taskId?: string | null
  }

  export type AuditLogUpdateInput = {
    action?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    performedByUser?: UserUpdateOneRequiredWithoutAuditLogsNestedInput
    task?: TaskUpdateOneWithoutAuditLogsNestedInput
  }

  export type AuditLogUncheckedUpdateInput = {
    action?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    performedBy?: StringFieldUpdateOperationsInput | string
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AuditLogCreateManyInput = {
    id?: string
    action: string
    details: string
    timestamp?: Date | string
    performedBy: string
    taskId?: string | null
  }

  export type AuditLogUpdateManyMutationInput = {
    action?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateManyInput = {
    action?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    performedBy?: StringFieldUpdateOperationsInput | string
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AbsenceCreateInput = {
    id?: string
    fromDate: Date | string
    toDate: Date | string
    reason?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutAbsencesInput
    createdBy: UserCreateNestedOneWithoutCreatedAbsencesInput
  }

  export type AbsenceUncheckedCreateInput = {
    id?: string
    fromDate: Date | string
    toDate: Date | string
    reason?: string | null
    createdAt?: Date | string
    userId: string
    createdById: string
  }

  export type AbsenceUpdateInput = {
    fromDate?: DateTimeFieldUpdateOperationsInput | Date | string
    toDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAbsencesNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedAbsencesNestedInput
  }

  export type AbsenceUncheckedUpdateInput = {
    fromDate?: DateTimeFieldUpdateOperationsInput | Date | string
    toDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
  }

  export type AbsenceCreateManyInput = {
    id?: string
    fromDate: Date | string
    toDate: Date | string
    reason?: string | null
    createdAt?: Date | string
    userId: string
    createdById: string
  }

  export type AbsenceUpdateManyMutationInput = {
    fromDate?: DateTimeFieldUpdateOperationsInput | Date | string
    toDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AbsenceUncheckedUpdateManyInput = {
    fromDate?: DateTimeFieldUpdateOperationsInput | Date | string
    toDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
    isSet?: boolean
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
    isSet?: boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type TaskListRelationFilter = {
    every?: TaskWhereInput
    some?: TaskWhereInput
    none?: TaskWhereInput
  }

  export type CommentListRelationFilter = {
    every?: CommentWhereInput
    some?: CommentWhereInput
    none?: CommentWhereInput
  }

  export type VersionListRelationFilter = {
    every?: VersionWhereInput
    some?: VersionWhereInput
    none?: VersionWhereInput
  }

  export type AuditLogListRelationFilter = {
    every?: AuditLogWhereInput
    some?: AuditLogWhereInput
    none?: AuditLogWhereInput
  }

  export type NotificationListRelationFilter = {
    every?: NotificationWhereInput
    some?: NotificationWhereInput
    none?: NotificationWhereInput
  }

  export type AbsenceListRelationFilter = {
    every?: AbsenceWhereInput
    some?: AbsenceWhereInput
    none?: AbsenceWhereInput
  }

  export type ExchangeApprovalListRelationFilter = {
    every?: ExchangeApprovalWhereInput
    some?: ExchangeApprovalWhereInput
    none?: ExchangeApprovalWhereInput
  }

  export type TaskOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CommentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VersionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AuditLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AbsenceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ExchangeApprovalOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    fullName?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    team?: SortOrder
    lastLogin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    fullName?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    team?: SortOrder
    lastLogin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    fullName?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    team?: SortOrder
    lastLogin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumTaskTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskType | EnumTaskTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.TaskType[] | ListEnumTaskTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.TaskType[] | ListEnumTaskTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumTaskTypeNullableFilter<$PrismaModel> | $Enums.TaskType | null
    isSet?: boolean
  }

  export type EnumTaskStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskStatus | EnumTaskStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTaskStatusFilter<$PrismaModel> | $Enums.TaskStatus
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type TaskCountOrderByAggregateInput = {
    id?: SortOrder
    uin?: SortOrder
    title?: SortOrder
    description?: SortOrder
    taskType?: SortOrder
    status?: SortOrder
    expectedPublishDate?: SortOrder
    platform?: SortOrder
    category?: SortOrder
    remarks?: SortOrder
    approvalDate?: SortOrder
    expiryDate?: SortOrder
    approvalProofUrl?: SortOrder
    publishDate?: SortOrder
    publishedCopyUrl?: SortOrder
    closureComments?: SortOrder
    closureDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrder
    assignedProductIds?: SortOrder
    assignedComplianceId?: SortOrder
  }

  export type TaskMaxOrderByAggregateInput = {
    id?: SortOrder
    uin?: SortOrder
    title?: SortOrder
    description?: SortOrder
    taskType?: SortOrder
    status?: SortOrder
    expectedPublishDate?: SortOrder
    platform?: SortOrder
    category?: SortOrder
    remarks?: SortOrder
    approvalDate?: SortOrder
    expiryDate?: SortOrder
    approvalProofUrl?: SortOrder
    publishDate?: SortOrder
    publishedCopyUrl?: SortOrder
    closureComments?: SortOrder
    closureDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrder
    assignedComplianceId?: SortOrder
  }

  export type TaskMinOrderByAggregateInput = {
    id?: SortOrder
    uin?: SortOrder
    title?: SortOrder
    description?: SortOrder
    taskType?: SortOrder
    status?: SortOrder
    expectedPublishDate?: SortOrder
    platform?: SortOrder
    category?: SortOrder
    remarks?: SortOrder
    approvalDate?: SortOrder
    expiryDate?: SortOrder
    approvalProofUrl?: SortOrder
    publishDate?: SortOrder
    publishedCopyUrl?: SortOrder
    closureComments?: SortOrder
    closureDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrder
    assignedComplianceId?: SortOrder
  }

  export type EnumTaskTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskType | EnumTaskTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.TaskType[] | ListEnumTaskTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.TaskType[] | ListEnumTaskTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumTaskTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.TaskType | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumTaskTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumTaskTypeNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type EnumTaskStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskStatus | EnumTaskStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTaskStatusWithAggregatesFilter<$PrismaModel> | $Enums.TaskStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTaskStatusFilter<$PrismaModel>
    _max?: NestedEnumTaskStatusFilter<$PrismaModel>
  }

  export type TaskRelationFilter = {
    is?: TaskWhereInput
    isNot?: TaskWhereInput
  }

  export type VersionCountOrderByAggregateInput = {
    id?: SortOrder
    versionNumber?: SortOrder
    fileUrls?: SortOrder
    remarks?: SortOrder
    uploadedAt?: SortOrder
    taskId?: SortOrder
    uploadedById?: SortOrder
  }

  export type VersionMaxOrderByAggregateInput = {
    id?: SortOrder
    versionNumber?: SortOrder
    remarks?: SortOrder
    uploadedAt?: SortOrder
    taskId?: SortOrder
    uploadedById?: SortOrder
  }

  export type VersionMinOrderByAggregateInput = {
    id?: SortOrder
    versionNumber?: SortOrder
    remarks?: SortOrder
    uploadedAt?: SortOrder
    taskId?: SortOrder
    uploadedById?: SortOrder
  }

  export type VersionNullableRelationFilter = {
    is?: VersionWhereInput | null
    isNot?: VersionWhereInput | null
  }

  export type CommentCountOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    attachments?: SortOrder
    isGlobal?: SortOrder
    createdAt?: SortOrder
    taskId?: SortOrder
    versionId?: SortOrder
    authorId?: SortOrder
  }

  export type CommentMaxOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    isGlobal?: SortOrder
    createdAt?: SortOrder
    taskId?: SortOrder
    versionId?: SortOrder
    authorId?: SortOrder
  }

  export type CommentMinOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    isGlobal?: SortOrder
    createdAt?: SortOrder
    taskId?: SortOrder
    versionId?: SortOrder
    authorId?: SortOrder
  }

  export type EnumExchangeApprovalStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ExchangeApprovalStatus | EnumExchangeApprovalStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ExchangeApprovalStatus[] | ListEnumExchangeApprovalStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ExchangeApprovalStatus[] | ListEnumExchangeApprovalStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumExchangeApprovalStatusFilter<$PrismaModel> | $Enums.ExchangeApprovalStatus
  }

  export type ExchangeApprovalCountOrderByAggregateInput = {
    id?: SortOrder
    exchangeName?: SortOrder
    typeOfContent?: SortOrder
    approvalStatus?: SortOrder
    approvalDate?: SortOrder
    expiryDate?: SortOrder
    referenceNumber?: SortOrder
    approvalEmailUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    taskId?: SortOrder
    updatedById?: SortOrder
  }

  export type ExchangeApprovalMaxOrderByAggregateInput = {
    id?: SortOrder
    exchangeName?: SortOrder
    typeOfContent?: SortOrder
    approvalStatus?: SortOrder
    approvalDate?: SortOrder
    expiryDate?: SortOrder
    referenceNumber?: SortOrder
    approvalEmailUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    taskId?: SortOrder
    updatedById?: SortOrder
  }

  export type ExchangeApprovalMinOrderByAggregateInput = {
    id?: SortOrder
    exchangeName?: SortOrder
    typeOfContent?: SortOrder
    approvalStatus?: SortOrder
    approvalDate?: SortOrder
    expiryDate?: SortOrder
    referenceNumber?: SortOrder
    approvalEmailUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    taskId?: SortOrder
    updatedById?: SortOrder
  }

  export type EnumExchangeApprovalStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ExchangeApprovalStatus | EnumExchangeApprovalStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ExchangeApprovalStatus[] | ListEnumExchangeApprovalStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ExchangeApprovalStatus[] | ListEnumExchangeApprovalStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumExchangeApprovalStatusWithAggregatesFilter<$PrismaModel> | $Enums.ExchangeApprovalStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumExchangeApprovalStatusFilter<$PrismaModel>
    _max?: NestedEnumExchangeApprovalStatusFilter<$PrismaModel>
  }

  export type EnumNotificationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeFilter<$PrismaModel> | $Enums.NotificationType
  }

  export type TaskNullableRelationFilter = {
    is?: TaskWhereInput | null
    isNot?: TaskWhereInput | null
  }

  export type NotificationCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    message?: SortOrder
    type?: SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    taskId?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    message?: SortOrder
    type?: SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    taskId?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    message?: SortOrder
    type?: SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    taskId?: SortOrder
  }

  export type EnumNotificationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel> | $Enums.NotificationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationTypeFilter<$PrismaModel>
    _max?: NestedEnumNotificationTypeFilter<$PrismaModel>
  }

  export type AuditLogCountOrderByAggregateInput = {
    id?: SortOrder
    action?: SortOrder
    details?: SortOrder
    timestamp?: SortOrder
    performedBy?: SortOrder
    taskId?: SortOrder
  }

  export type AuditLogMaxOrderByAggregateInput = {
    id?: SortOrder
    action?: SortOrder
    details?: SortOrder
    timestamp?: SortOrder
    performedBy?: SortOrder
    taskId?: SortOrder
  }

  export type AuditLogMinOrderByAggregateInput = {
    id?: SortOrder
    action?: SortOrder
    details?: SortOrder
    timestamp?: SortOrder
    performedBy?: SortOrder
    taskId?: SortOrder
  }

  export type AbsenceCountOrderByAggregateInput = {
    id?: SortOrder
    fromDate?: SortOrder
    toDate?: SortOrder
    reason?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    createdById?: SortOrder
  }

  export type AbsenceMaxOrderByAggregateInput = {
    id?: SortOrder
    fromDate?: SortOrder
    toDate?: SortOrder
    reason?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    createdById?: SortOrder
  }

  export type AbsenceMinOrderByAggregateInput = {
    id?: SortOrder
    fromDate?: SortOrder
    toDate?: SortOrder
    reason?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    createdById?: SortOrder
  }

  export type TaskCreateNestedManyWithoutCreatorInput = {
    create?: XOR<TaskCreateWithoutCreatorInput, TaskUncheckedCreateWithoutCreatorInput> | TaskCreateWithoutCreatorInput[] | TaskUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutCreatorInput | TaskCreateOrConnectWithoutCreatorInput[]
    createMany?: TaskCreateManyCreatorInputEnvelope
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type TaskCreateNestedManyWithoutAssignedComplianceInput = {
    create?: XOR<TaskCreateWithoutAssignedComplianceInput, TaskUncheckedCreateWithoutAssignedComplianceInput> | TaskCreateWithoutAssignedComplianceInput[] | TaskUncheckedCreateWithoutAssignedComplianceInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutAssignedComplianceInput | TaskCreateOrConnectWithoutAssignedComplianceInput[]
    createMany?: TaskCreateManyAssignedComplianceInputEnvelope
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type CommentCreateNestedManyWithoutAuthorInput = {
    create?: XOR<CommentCreateWithoutAuthorInput, CommentUncheckedCreateWithoutAuthorInput> | CommentCreateWithoutAuthorInput[] | CommentUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutAuthorInput | CommentCreateOrConnectWithoutAuthorInput[]
    createMany?: CommentCreateManyAuthorInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type VersionCreateNestedManyWithoutUploadedByInput = {
    create?: XOR<VersionCreateWithoutUploadedByInput, VersionUncheckedCreateWithoutUploadedByInput> | VersionCreateWithoutUploadedByInput[] | VersionUncheckedCreateWithoutUploadedByInput[]
    connectOrCreate?: VersionCreateOrConnectWithoutUploadedByInput | VersionCreateOrConnectWithoutUploadedByInput[]
    createMany?: VersionCreateManyUploadedByInputEnvelope
    connect?: VersionWhereUniqueInput | VersionWhereUniqueInput[]
  }

  export type AuditLogCreateNestedManyWithoutPerformedByUserInput = {
    create?: XOR<AuditLogCreateWithoutPerformedByUserInput, AuditLogUncheckedCreateWithoutPerformedByUserInput> | AuditLogCreateWithoutPerformedByUserInput[] | AuditLogUncheckedCreateWithoutPerformedByUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutPerformedByUserInput | AuditLogCreateOrConnectWithoutPerformedByUserInput[]
    createMany?: AuditLogCreateManyPerformedByUserInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type AbsenceCreateNestedManyWithoutUserInput = {
    create?: XOR<AbsenceCreateWithoutUserInput, AbsenceUncheckedCreateWithoutUserInput> | AbsenceCreateWithoutUserInput[] | AbsenceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AbsenceCreateOrConnectWithoutUserInput | AbsenceCreateOrConnectWithoutUserInput[]
    createMany?: AbsenceCreateManyUserInputEnvelope
    connect?: AbsenceWhereUniqueInput | AbsenceWhereUniqueInput[]
  }

  export type AbsenceCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<AbsenceCreateWithoutCreatedByInput, AbsenceUncheckedCreateWithoutCreatedByInput> | AbsenceCreateWithoutCreatedByInput[] | AbsenceUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: AbsenceCreateOrConnectWithoutCreatedByInput | AbsenceCreateOrConnectWithoutCreatedByInput[]
    createMany?: AbsenceCreateManyCreatedByInputEnvelope
    connect?: AbsenceWhereUniqueInput | AbsenceWhereUniqueInput[]
  }

  export type ExchangeApprovalCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<ExchangeApprovalCreateWithoutUpdatedByInput, ExchangeApprovalUncheckedCreateWithoutUpdatedByInput> | ExchangeApprovalCreateWithoutUpdatedByInput[] | ExchangeApprovalUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: ExchangeApprovalCreateOrConnectWithoutUpdatedByInput | ExchangeApprovalCreateOrConnectWithoutUpdatedByInput[]
    createMany?: ExchangeApprovalCreateManyUpdatedByInputEnvelope
    connect?: ExchangeApprovalWhereUniqueInput | ExchangeApprovalWhereUniqueInput[]
  }

  export type TaskUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<TaskCreateWithoutCreatorInput, TaskUncheckedCreateWithoutCreatorInput> | TaskCreateWithoutCreatorInput[] | TaskUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutCreatorInput | TaskCreateOrConnectWithoutCreatorInput[]
    createMany?: TaskCreateManyCreatorInputEnvelope
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type TaskUncheckedCreateNestedManyWithoutAssignedComplianceInput = {
    create?: XOR<TaskCreateWithoutAssignedComplianceInput, TaskUncheckedCreateWithoutAssignedComplianceInput> | TaskCreateWithoutAssignedComplianceInput[] | TaskUncheckedCreateWithoutAssignedComplianceInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutAssignedComplianceInput | TaskCreateOrConnectWithoutAssignedComplianceInput[]
    createMany?: TaskCreateManyAssignedComplianceInputEnvelope
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<CommentCreateWithoutAuthorInput, CommentUncheckedCreateWithoutAuthorInput> | CommentCreateWithoutAuthorInput[] | CommentUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutAuthorInput | CommentCreateOrConnectWithoutAuthorInput[]
    createMany?: CommentCreateManyAuthorInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type VersionUncheckedCreateNestedManyWithoutUploadedByInput = {
    create?: XOR<VersionCreateWithoutUploadedByInput, VersionUncheckedCreateWithoutUploadedByInput> | VersionCreateWithoutUploadedByInput[] | VersionUncheckedCreateWithoutUploadedByInput[]
    connectOrCreate?: VersionCreateOrConnectWithoutUploadedByInput | VersionCreateOrConnectWithoutUploadedByInput[]
    createMany?: VersionCreateManyUploadedByInputEnvelope
    connect?: VersionWhereUniqueInput | VersionWhereUniqueInput[]
  }

  export type AuditLogUncheckedCreateNestedManyWithoutPerformedByUserInput = {
    create?: XOR<AuditLogCreateWithoutPerformedByUserInput, AuditLogUncheckedCreateWithoutPerformedByUserInput> | AuditLogCreateWithoutPerformedByUserInput[] | AuditLogUncheckedCreateWithoutPerformedByUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutPerformedByUserInput | AuditLogCreateOrConnectWithoutPerformedByUserInput[]
    createMany?: AuditLogCreateManyPerformedByUserInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type AbsenceUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AbsenceCreateWithoutUserInput, AbsenceUncheckedCreateWithoutUserInput> | AbsenceCreateWithoutUserInput[] | AbsenceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AbsenceCreateOrConnectWithoutUserInput | AbsenceCreateOrConnectWithoutUserInput[]
    createMany?: AbsenceCreateManyUserInputEnvelope
    connect?: AbsenceWhereUniqueInput | AbsenceWhereUniqueInput[]
  }

  export type AbsenceUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<AbsenceCreateWithoutCreatedByInput, AbsenceUncheckedCreateWithoutCreatedByInput> | AbsenceCreateWithoutCreatedByInput[] | AbsenceUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: AbsenceCreateOrConnectWithoutCreatedByInput | AbsenceCreateOrConnectWithoutCreatedByInput[]
    createMany?: AbsenceCreateManyCreatedByInputEnvelope
    connect?: AbsenceWhereUniqueInput | AbsenceWhereUniqueInput[]
  }

  export type ExchangeApprovalUncheckedCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<ExchangeApprovalCreateWithoutUpdatedByInput, ExchangeApprovalUncheckedCreateWithoutUpdatedByInput> | ExchangeApprovalCreateWithoutUpdatedByInput[] | ExchangeApprovalUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: ExchangeApprovalCreateOrConnectWithoutUpdatedByInput | ExchangeApprovalCreateOrConnectWithoutUpdatedByInput[]
    createMany?: ExchangeApprovalCreateManyUpdatedByInputEnvelope
    connect?: ExchangeApprovalWhereUniqueInput | ExchangeApprovalWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
    unset?: boolean
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
    unset?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type TaskUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<TaskCreateWithoutCreatorInput, TaskUncheckedCreateWithoutCreatorInput> | TaskCreateWithoutCreatorInput[] | TaskUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutCreatorInput | TaskCreateOrConnectWithoutCreatorInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutCreatorInput | TaskUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: TaskCreateManyCreatorInputEnvelope
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutCreatorInput | TaskUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutCreatorInput | TaskUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type TaskUpdateManyWithoutAssignedComplianceNestedInput = {
    create?: XOR<TaskCreateWithoutAssignedComplianceInput, TaskUncheckedCreateWithoutAssignedComplianceInput> | TaskCreateWithoutAssignedComplianceInput[] | TaskUncheckedCreateWithoutAssignedComplianceInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutAssignedComplianceInput | TaskCreateOrConnectWithoutAssignedComplianceInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutAssignedComplianceInput | TaskUpsertWithWhereUniqueWithoutAssignedComplianceInput[]
    createMany?: TaskCreateManyAssignedComplianceInputEnvelope
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutAssignedComplianceInput | TaskUpdateWithWhereUniqueWithoutAssignedComplianceInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutAssignedComplianceInput | TaskUpdateManyWithWhereWithoutAssignedComplianceInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type CommentUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<CommentCreateWithoutAuthorInput, CommentUncheckedCreateWithoutAuthorInput> | CommentCreateWithoutAuthorInput[] | CommentUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutAuthorInput | CommentCreateOrConnectWithoutAuthorInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutAuthorInput | CommentUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: CommentCreateManyAuthorInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutAuthorInput | CommentUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutAuthorInput | CommentUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type VersionUpdateManyWithoutUploadedByNestedInput = {
    create?: XOR<VersionCreateWithoutUploadedByInput, VersionUncheckedCreateWithoutUploadedByInput> | VersionCreateWithoutUploadedByInput[] | VersionUncheckedCreateWithoutUploadedByInput[]
    connectOrCreate?: VersionCreateOrConnectWithoutUploadedByInput | VersionCreateOrConnectWithoutUploadedByInput[]
    upsert?: VersionUpsertWithWhereUniqueWithoutUploadedByInput | VersionUpsertWithWhereUniqueWithoutUploadedByInput[]
    createMany?: VersionCreateManyUploadedByInputEnvelope
    set?: VersionWhereUniqueInput | VersionWhereUniqueInput[]
    disconnect?: VersionWhereUniqueInput | VersionWhereUniqueInput[]
    delete?: VersionWhereUniqueInput | VersionWhereUniqueInput[]
    connect?: VersionWhereUniqueInput | VersionWhereUniqueInput[]
    update?: VersionUpdateWithWhereUniqueWithoutUploadedByInput | VersionUpdateWithWhereUniqueWithoutUploadedByInput[]
    updateMany?: VersionUpdateManyWithWhereWithoutUploadedByInput | VersionUpdateManyWithWhereWithoutUploadedByInput[]
    deleteMany?: VersionScalarWhereInput | VersionScalarWhereInput[]
  }

  export type AuditLogUpdateManyWithoutPerformedByUserNestedInput = {
    create?: XOR<AuditLogCreateWithoutPerformedByUserInput, AuditLogUncheckedCreateWithoutPerformedByUserInput> | AuditLogCreateWithoutPerformedByUserInput[] | AuditLogUncheckedCreateWithoutPerformedByUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutPerformedByUserInput | AuditLogCreateOrConnectWithoutPerformedByUserInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutPerformedByUserInput | AuditLogUpsertWithWhereUniqueWithoutPerformedByUserInput[]
    createMany?: AuditLogCreateManyPerformedByUserInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutPerformedByUserInput | AuditLogUpdateWithWhereUniqueWithoutPerformedByUserInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutPerformedByUserInput | AuditLogUpdateManyWithWhereWithoutPerformedByUserInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type AbsenceUpdateManyWithoutUserNestedInput = {
    create?: XOR<AbsenceCreateWithoutUserInput, AbsenceUncheckedCreateWithoutUserInput> | AbsenceCreateWithoutUserInput[] | AbsenceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AbsenceCreateOrConnectWithoutUserInput | AbsenceCreateOrConnectWithoutUserInput[]
    upsert?: AbsenceUpsertWithWhereUniqueWithoutUserInput | AbsenceUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AbsenceCreateManyUserInputEnvelope
    set?: AbsenceWhereUniqueInput | AbsenceWhereUniqueInput[]
    disconnect?: AbsenceWhereUniqueInput | AbsenceWhereUniqueInput[]
    delete?: AbsenceWhereUniqueInput | AbsenceWhereUniqueInput[]
    connect?: AbsenceWhereUniqueInput | AbsenceWhereUniqueInput[]
    update?: AbsenceUpdateWithWhereUniqueWithoutUserInput | AbsenceUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AbsenceUpdateManyWithWhereWithoutUserInput | AbsenceUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AbsenceScalarWhereInput | AbsenceScalarWhereInput[]
  }

  export type AbsenceUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<AbsenceCreateWithoutCreatedByInput, AbsenceUncheckedCreateWithoutCreatedByInput> | AbsenceCreateWithoutCreatedByInput[] | AbsenceUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: AbsenceCreateOrConnectWithoutCreatedByInput | AbsenceCreateOrConnectWithoutCreatedByInput[]
    upsert?: AbsenceUpsertWithWhereUniqueWithoutCreatedByInput | AbsenceUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: AbsenceCreateManyCreatedByInputEnvelope
    set?: AbsenceWhereUniqueInput | AbsenceWhereUniqueInput[]
    disconnect?: AbsenceWhereUniqueInput | AbsenceWhereUniqueInput[]
    delete?: AbsenceWhereUniqueInput | AbsenceWhereUniqueInput[]
    connect?: AbsenceWhereUniqueInput | AbsenceWhereUniqueInput[]
    update?: AbsenceUpdateWithWhereUniqueWithoutCreatedByInput | AbsenceUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: AbsenceUpdateManyWithWhereWithoutCreatedByInput | AbsenceUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: AbsenceScalarWhereInput | AbsenceScalarWhereInput[]
  }

  export type ExchangeApprovalUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<ExchangeApprovalCreateWithoutUpdatedByInput, ExchangeApprovalUncheckedCreateWithoutUpdatedByInput> | ExchangeApprovalCreateWithoutUpdatedByInput[] | ExchangeApprovalUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: ExchangeApprovalCreateOrConnectWithoutUpdatedByInput | ExchangeApprovalCreateOrConnectWithoutUpdatedByInput[]
    upsert?: ExchangeApprovalUpsertWithWhereUniqueWithoutUpdatedByInput | ExchangeApprovalUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: ExchangeApprovalCreateManyUpdatedByInputEnvelope
    set?: ExchangeApprovalWhereUniqueInput | ExchangeApprovalWhereUniqueInput[]
    disconnect?: ExchangeApprovalWhereUniqueInput | ExchangeApprovalWhereUniqueInput[]
    delete?: ExchangeApprovalWhereUniqueInput | ExchangeApprovalWhereUniqueInput[]
    connect?: ExchangeApprovalWhereUniqueInput | ExchangeApprovalWhereUniqueInput[]
    update?: ExchangeApprovalUpdateWithWhereUniqueWithoutUpdatedByInput | ExchangeApprovalUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: ExchangeApprovalUpdateManyWithWhereWithoutUpdatedByInput | ExchangeApprovalUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: ExchangeApprovalScalarWhereInput | ExchangeApprovalScalarWhereInput[]
  }

  export type TaskUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<TaskCreateWithoutCreatorInput, TaskUncheckedCreateWithoutCreatorInput> | TaskCreateWithoutCreatorInput[] | TaskUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutCreatorInput | TaskCreateOrConnectWithoutCreatorInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutCreatorInput | TaskUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: TaskCreateManyCreatorInputEnvelope
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutCreatorInput | TaskUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutCreatorInput | TaskUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type TaskUncheckedUpdateManyWithoutAssignedComplianceNestedInput = {
    create?: XOR<TaskCreateWithoutAssignedComplianceInput, TaskUncheckedCreateWithoutAssignedComplianceInput> | TaskCreateWithoutAssignedComplianceInput[] | TaskUncheckedCreateWithoutAssignedComplianceInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutAssignedComplianceInput | TaskCreateOrConnectWithoutAssignedComplianceInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutAssignedComplianceInput | TaskUpsertWithWhereUniqueWithoutAssignedComplianceInput[]
    createMany?: TaskCreateManyAssignedComplianceInputEnvelope
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutAssignedComplianceInput | TaskUpdateWithWhereUniqueWithoutAssignedComplianceInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutAssignedComplianceInput | TaskUpdateManyWithWhereWithoutAssignedComplianceInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<CommentCreateWithoutAuthorInput, CommentUncheckedCreateWithoutAuthorInput> | CommentCreateWithoutAuthorInput[] | CommentUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutAuthorInput | CommentCreateOrConnectWithoutAuthorInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutAuthorInput | CommentUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: CommentCreateManyAuthorInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutAuthorInput | CommentUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutAuthorInput | CommentUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type VersionUncheckedUpdateManyWithoutUploadedByNestedInput = {
    create?: XOR<VersionCreateWithoutUploadedByInput, VersionUncheckedCreateWithoutUploadedByInput> | VersionCreateWithoutUploadedByInput[] | VersionUncheckedCreateWithoutUploadedByInput[]
    connectOrCreate?: VersionCreateOrConnectWithoutUploadedByInput | VersionCreateOrConnectWithoutUploadedByInput[]
    upsert?: VersionUpsertWithWhereUniqueWithoutUploadedByInput | VersionUpsertWithWhereUniqueWithoutUploadedByInput[]
    createMany?: VersionCreateManyUploadedByInputEnvelope
    set?: VersionWhereUniqueInput | VersionWhereUniqueInput[]
    disconnect?: VersionWhereUniqueInput | VersionWhereUniqueInput[]
    delete?: VersionWhereUniqueInput | VersionWhereUniqueInput[]
    connect?: VersionWhereUniqueInput | VersionWhereUniqueInput[]
    update?: VersionUpdateWithWhereUniqueWithoutUploadedByInput | VersionUpdateWithWhereUniqueWithoutUploadedByInput[]
    updateMany?: VersionUpdateManyWithWhereWithoutUploadedByInput | VersionUpdateManyWithWhereWithoutUploadedByInput[]
    deleteMany?: VersionScalarWhereInput | VersionScalarWhereInput[]
  }

  export type AuditLogUncheckedUpdateManyWithoutPerformedByUserNestedInput = {
    create?: XOR<AuditLogCreateWithoutPerformedByUserInput, AuditLogUncheckedCreateWithoutPerformedByUserInput> | AuditLogCreateWithoutPerformedByUserInput[] | AuditLogUncheckedCreateWithoutPerformedByUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutPerformedByUserInput | AuditLogCreateOrConnectWithoutPerformedByUserInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutPerformedByUserInput | AuditLogUpsertWithWhereUniqueWithoutPerformedByUserInput[]
    createMany?: AuditLogCreateManyPerformedByUserInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutPerformedByUserInput | AuditLogUpdateWithWhereUniqueWithoutPerformedByUserInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutPerformedByUserInput | AuditLogUpdateManyWithWhereWithoutPerformedByUserInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type AbsenceUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AbsenceCreateWithoutUserInput, AbsenceUncheckedCreateWithoutUserInput> | AbsenceCreateWithoutUserInput[] | AbsenceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AbsenceCreateOrConnectWithoutUserInput | AbsenceCreateOrConnectWithoutUserInput[]
    upsert?: AbsenceUpsertWithWhereUniqueWithoutUserInput | AbsenceUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AbsenceCreateManyUserInputEnvelope
    set?: AbsenceWhereUniqueInput | AbsenceWhereUniqueInput[]
    disconnect?: AbsenceWhereUniqueInput | AbsenceWhereUniqueInput[]
    delete?: AbsenceWhereUniqueInput | AbsenceWhereUniqueInput[]
    connect?: AbsenceWhereUniqueInput | AbsenceWhereUniqueInput[]
    update?: AbsenceUpdateWithWhereUniqueWithoutUserInput | AbsenceUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AbsenceUpdateManyWithWhereWithoutUserInput | AbsenceUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AbsenceScalarWhereInput | AbsenceScalarWhereInput[]
  }

  export type AbsenceUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<AbsenceCreateWithoutCreatedByInput, AbsenceUncheckedCreateWithoutCreatedByInput> | AbsenceCreateWithoutCreatedByInput[] | AbsenceUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: AbsenceCreateOrConnectWithoutCreatedByInput | AbsenceCreateOrConnectWithoutCreatedByInput[]
    upsert?: AbsenceUpsertWithWhereUniqueWithoutCreatedByInput | AbsenceUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: AbsenceCreateManyCreatedByInputEnvelope
    set?: AbsenceWhereUniqueInput | AbsenceWhereUniqueInput[]
    disconnect?: AbsenceWhereUniqueInput | AbsenceWhereUniqueInput[]
    delete?: AbsenceWhereUniqueInput | AbsenceWhereUniqueInput[]
    connect?: AbsenceWhereUniqueInput | AbsenceWhereUniqueInput[]
    update?: AbsenceUpdateWithWhereUniqueWithoutCreatedByInput | AbsenceUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: AbsenceUpdateManyWithWhereWithoutCreatedByInput | AbsenceUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: AbsenceScalarWhereInput | AbsenceScalarWhereInput[]
  }

  export type ExchangeApprovalUncheckedUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<ExchangeApprovalCreateWithoutUpdatedByInput, ExchangeApprovalUncheckedCreateWithoutUpdatedByInput> | ExchangeApprovalCreateWithoutUpdatedByInput[] | ExchangeApprovalUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: ExchangeApprovalCreateOrConnectWithoutUpdatedByInput | ExchangeApprovalCreateOrConnectWithoutUpdatedByInput[]
    upsert?: ExchangeApprovalUpsertWithWhereUniqueWithoutUpdatedByInput | ExchangeApprovalUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: ExchangeApprovalCreateManyUpdatedByInputEnvelope
    set?: ExchangeApprovalWhereUniqueInput | ExchangeApprovalWhereUniqueInput[]
    disconnect?: ExchangeApprovalWhereUniqueInput | ExchangeApprovalWhereUniqueInput[]
    delete?: ExchangeApprovalWhereUniqueInput | ExchangeApprovalWhereUniqueInput[]
    connect?: ExchangeApprovalWhereUniqueInput | ExchangeApprovalWhereUniqueInput[]
    update?: ExchangeApprovalUpdateWithWhereUniqueWithoutUpdatedByInput | ExchangeApprovalUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: ExchangeApprovalUpdateManyWithWhereWithoutUpdatedByInput | ExchangeApprovalUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: ExchangeApprovalScalarWhereInput | ExchangeApprovalScalarWhereInput[]
  }

  export type TaskCreateassignedProductIdsInput = {
    set: string[]
  }

  export type UserCreateNestedOneWithoutCreatedTasksInput = {
    create?: XOR<UserCreateWithoutCreatedTasksInput, UserUncheckedCreateWithoutCreatedTasksInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedTasksInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutComplianceTasksInput = {
    create?: XOR<UserCreateWithoutComplianceTasksInput, UserUncheckedCreateWithoutComplianceTasksInput>
    connectOrCreate?: UserCreateOrConnectWithoutComplianceTasksInput
    connect?: UserWhereUniqueInput
  }

  export type VersionCreateNestedManyWithoutTaskInput = {
    create?: XOR<VersionCreateWithoutTaskInput, VersionUncheckedCreateWithoutTaskInput> | VersionCreateWithoutTaskInput[] | VersionUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: VersionCreateOrConnectWithoutTaskInput | VersionCreateOrConnectWithoutTaskInput[]
    createMany?: VersionCreateManyTaskInputEnvelope
    connect?: VersionWhereUniqueInput | VersionWhereUniqueInput[]
  }

  export type CommentCreateNestedManyWithoutTaskInput = {
    create?: XOR<CommentCreateWithoutTaskInput, CommentUncheckedCreateWithoutTaskInput> | CommentCreateWithoutTaskInput[] | CommentUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutTaskInput | CommentCreateOrConnectWithoutTaskInput[]
    createMany?: CommentCreateManyTaskInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type ExchangeApprovalCreateNestedManyWithoutTaskInput = {
    create?: XOR<ExchangeApprovalCreateWithoutTaskInput, ExchangeApprovalUncheckedCreateWithoutTaskInput> | ExchangeApprovalCreateWithoutTaskInput[] | ExchangeApprovalUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: ExchangeApprovalCreateOrConnectWithoutTaskInput | ExchangeApprovalCreateOrConnectWithoutTaskInput[]
    createMany?: ExchangeApprovalCreateManyTaskInputEnvelope
    connect?: ExchangeApprovalWhereUniqueInput | ExchangeApprovalWhereUniqueInput[]
  }

  export type AuditLogCreateNestedManyWithoutTaskInput = {
    create?: XOR<AuditLogCreateWithoutTaskInput, AuditLogUncheckedCreateWithoutTaskInput> | AuditLogCreateWithoutTaskInput[] | AuditLogUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutTaskInput | AuditLogCreateOrConnectWithoutTaskInput[]
    createMany?: AuditLogCreateManyTaskInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutTaskInput = {
    create?: XOR<NotificationCreateWithoutTaskInput, NotificationUncheckedCreateWithoutTaskInput> | NotificationCreateWithoutTaskInput[] | NotificationUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutTaskInput | NotificationCreateOrConnectWithoutTaskInput[]
    createMany?: NotificationCreateManyTaskInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type VersionUncheckedCreateNestedManyWithoutTaskInput = {
    create?: XOR<VersionCreateWithoutTaskInput, VersionUncheckedCreateWithoutTaskInput> | VersionCreateWithoutTaskInput[] | VersionUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: VersionCreateOrConnectWithoutTaskInput | VersionCreateOrConnectWithoutTaskInput[]
    createMany?: VersionCreateManyTaskInputEnvelope
    connect?: VersionWhereUniqueInput | VersionWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutTaskInput = {
    create?: XOR<CommentCreateWithoutTaskInput, CommentUncheckedCreateWithoutTaskInput> | CommentCreateWithoutTaskInput[] | CommentUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutTaskInput | CommentCreateOrConnectWithoutTaskInput[]
    createMany?: CommentCreateManyTaskInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type ExchangeApprovalUncheckedCreateNestedManyWithoutTaskInput = {
    create?: XOR<ExchangeApprovalCreateWithoutTaskInput, ExchangeApprovalUncheckedCreateWithoutTaskInput> | ExchangeApprovalCreateWithoutTaskInput[] | ExchangeApprovalUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: ExchangeApprovalCreateOrConnectWithoutTaskInput | ExchangeApprovalCreateOrConnectWithoutTaskInput[]
    createMany?: ExchangeApprovalCreateManyTaskInputEnvelope
    connect?: ExchangeApprovalWhereUniqueInput | ExchangeApprovalWhereUniqueInput[]
  }

  export type AuditLogUncheckedCreateNestedManyWithoutTaskInput = {
    create?: XOR<AuditLogCreateWithoutTaskInput, AuditLogUncheckedCreateWithoutTaskInput> | AuditLogCreateWithoutTaskInput[] | AuditLogUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutTaskInput | AuditLogCreateOrConnectWithoutTaskInput[]
    createMany?: AuditLogCreateManyTaskInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutTaskInput = {
    create?: XOR<NotificationCreateWithoutTaskInput, NotificationUncheckedCreateWithoutTaskInput> | NotificationCreateWithoutTaskInput[] | NotificationUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutTaskInput | NotificationCreateOrConnectWithoutTaskInput[]
    createMany?: NotificationCreateManyTaskInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type NullableEnumTaskTypeFieldUpdateOperationsInput = {
    set?: $Enums.TaskType | null
    unset?: boolean
  }

  export type EnumTaskStatusFieldUpdateOperationsInput = {
    set?: $Enums.TaskStatus
  }

  export type TaskUpdateassignedProductIdsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type UserUpdateOneRequiredWithoutCreatedTasksNestedInput = {
    create?: XOR<UserCreateWithoutCreatedTasksInput, UserUncheckedCreateWithoutCreatedTasksInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedTasksInput
    upsert?: UserUpsertWithoutCreatedTasksInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedTasksInput, UserUpdateWithoutCreatedTasksInput>, UserUncheckedUpdateWithoutCreatedTasksInput>
  }

  export type UserUpdateOneWithoutComplianceTasksNestedInput = {
    create?: XOR<UserCreateWithoutComplianceTasksInput, UserUncheckedCreateWithoutComplianceTasksInput>
    connectOrCreate?: UserCreateOrConnectWithoutComplianceTasksInput
    upsert?: UserUpsertWithoutComplianceTasksInput
    disconnect?: boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutComplianceTasksInput, UserUpdateWithoutComplianceTasksInput>, UserUncheckedUpdateWithoutComplianceTasksInput>
  }

  export type VersionUpdateManyWithoutTaskNestedInput = {
    create?: XOR<VersionCreateWithoutTaskInput, VersionUncheckedCreateWithoutTaskInput> | VersionCreateWithoutTaskInput[] | VersionUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: VersionCreateOrConnectWithoutTaskInput | VersionCreateOrConnectWithoutTaskInput[]
    upsert?: VersionUpsertWithWhereUniqueWithoutTaskInput | VersionUpsertWithWhereUniqueWithoutTaskInput[]
    createMany?: VersionCreateManyTaskInputEnvelope
    set?: VersionWhereUniqueInput | VersionWhereUniqueInput[]
    disconnect?: VersionWhereUniqueInput | VersionWhereUniqueInput[]
    delete?: VersionWhereUniqueInput | VersionWhereUniqueInput[]
    connect?: VersionWhereUniqueInput | VersionWhereUniqueInput[]
    update?: VersionUpdateWithWhereUniqueWithoutTaskInput | VersionUpdateWithWhereUniqueWithoutTaskInput[]
    updateMany?: VersionUpdateManyWithWhereWithoutTaskInput | VersionUpdateManyWithWhereWithoutTaskInput[]
    deleteMany?: VersionScalarWhereInput | VersionScalarWhereInput[]
  }

  export type CommentUpdateManyWithoutTaskNestedInput = {
    create?: XOR<CommentCreateWithoutTaskInput, CommentUncheckedCreateWithoutTaskInput> | CommentCreateWithoutTaskInput[] | CommentUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutTaskInput | CommentCreateOrConnectWithoutTaskInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutTaskInput | CommentUpsertWithWhereUniqueWithoutTaskInput[]
    createMany?: CommentCreateManyTaskInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutTaskInput | CommentUpdateWithWhereUniqueWithoutTaskInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutTaskInput | CommentUpdateManyWithWhereWithoutTaskInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type ExchangeApprovalUpdateManyWithoutTaskNestedInput = {
    create?: XOR<ExchangeApprovalCreateWithoutTaskInput, ExchangeApprovalUncheckedCreateWithoutTaskInput> | ExchangeApprovalCreateWithoutTaskInput[] | ExchangeApprovalUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: ExchangeApprovalCreateOrConnectWithoutTaskInput | ExchangeApprovalCreateOrConnectWithoutTaskInput[]
    upsert?: ExchangeApprovalUpsertWithWhereUniqueWithoutTaskInput | ExchangeApprovalUpsertWithWhereUniqueWithoutTaskInput[]
    createMany?: ExchangeApprovalCreateManyTaskInputEnvelope
    set?: ExchangeApprovalWhereUniqueInput | ExchangeApprovalWhereUniqueInput[]
    disconnect?: ExchangeApprovalWhereUniqueInput | ExchangeApprovalWhereUniqueInput[]
    delete?: ExchangeApprovalWhereUniqueInput | ExchangeApprovalWhereUniqueInput[]
    connect?: ExchangeApprovalWhereUniqueInput | ExchangeApprovalWhereUniqueInput[]
    update?: ExchangeApprovalUpdateWithWhereUniqueWithoutTaskInput | ExchangeApprovalUpdateWithWhereUniqueWithoutTaskInput[]
    updateMany?: ExchangeApprovalUpdateManyWithWhereWithoutTaskInput | ExchangeApprovalUpdateManyWithWhereWithoutTaskInput[]
    deleteMany?: ExchangeApprovalScalarWhereInput | ExchangeApprovalScalarWhereInput[]
  }

  export type AuditLogUpdateManyWithoutTaskNestedInput = {
    create?: XOR<AuditLogCreateWithoutTaskInput, AuditLogUncheckedCreateWithoutTaskInput> | AuditLogCreateWithoutTaskInput[] | AuditLogUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutTaskInput | AuditLogCreateOrConnectWithoutTaskInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutTaskInput | AuditLogUpsertWithWhereUniqueWithoutTaskInput[]
    createMany?: AuditLogCreateManyTaskInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutTaskInput | AuditLogUpdateWithWhereUniqueWithoutTaskInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutTaskInput | AuditLogUpdateManyWithWhereWithoutTaskInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutTaskNestedInput = {
    create?: XOR<NotificationCreateWithoutTaskInput, NotificationUncheckedCreateWithoutTaskInput> | NotificationCreateWithoutTaskInput[] | NotificationUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutTaskInput | NotificationCreateOrConnectWithoutTaskInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutTaskInput | NotificationUpsertWithWhereUniqueWithoutTaskInput[]
    createMany?: NotificationCreateManyTaskInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutTaskInput | NotificationUpdateWithWhereUniqueWithoutTaskInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutTaskInput | NotificationUpdateManyWithWhereWithoutTaskInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type VersionUncheckedUpdateManyWithoutTaskNestedInput = {
    create?: XOR<VersionCreateWithoutTaskInput, VersionUncheckedCreateWithoutTaskInput> | VersionCreateWithoutTaskInput[] | VersionUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: VersionCreateOrConnectWithoutTaskInput | VersionCreateOrConnectWithoutTaskInput[]
    upsert?: VersionUpsertWithWhereUniqueWithoutTaskInput | VersionUpsertWithWhereUniqueWithoutTaskInput[]
    createMany?: VersionCreateManyTaskInputEnvelope
    set?: VersionWhereUniqueInput | VersionWhereUniqueInput[]
    disconnect?: VersionWhereUniqueInput | VersionWhereUniqueInput[]
    delete?: VersionWhereUniqueInput | VersionWhereUniqueInput[]
    connect?: VersionWhereUniqueInput | VersionWhereUniqueInput[]
    update?: VersionUpdateWithWhereUniqueWithoutTaskInput | VersionUpdateWithWhereUniqueWithoutTaskInput[]
    updateMany?: VersionUpdateManyWithWhereWithoutTaskInput | VersionUpdateManyWithWhereWithoutTaskInput[]
    deleteMany?: VersionScalarWhereInput | VersionScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutTaskNestedInput = {
    create?: XOR<CommentCreateWithoutTaskInput, CommentUncheckedCreateWithoutTaskInput> | CommentCreateWithoutTaskInput[] | CommentUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutTaskInput | CommentCreateOrConnectWithoutTaskInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutTaskInput | CommentUpsertWithWhereUniqueWithoutTaskInput[]
    createMany?: CommentCreateManyTaskInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutTaskInput | CommentUpdateWithWhereUniqueWithoutTaskInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutTaskInput | CommentUpdateManyWithWhereWithoutTaskInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type ExchangeApprovalUncheckedUpdateManyWithoutTaskNestedInput = {
    create?: XOR<ExchangeApprovalCreateWithoutTaskInput, ExchangeApprovalUncheckedCreateWithoutTaskInput> | ExchangeApprovalCreateWithoutTaskInput[] | ExchangeApprovalUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: ExchangeApprovalCreateOrConnectWithoutTaskInput | ExchangeApprovalCreateOrConnectWithoutTaskInput[]
    upsert?: ExchangeApprovalUpsertWithWhereUniqueWithoutTaskInput | ExchangeApprovalUpsertWithWhereUniqueWithoutTaskInput[]
    createMany?: ExchangeApprovalCreateManyTaskInputEnvelope
    set?: ExchangeApprovalWhereUniqueInput | ExchangeApprovalWhereUniqueInput[]
    disconnect?: ExchangeApprovalWhereUniqueInput | ExchangeApprovalWhereUniqueInput[]
    delete?: ExchangeApprovalWhereUniqueInput | ExchangeApprovalWhereUniqueInput[]
    connect?: ExchangeApprovalWhereUniqueInput | ExchangeApprovalWhereUniqueInput[]
    update?: ExchangeApprovalUpdateWithWhereUniqueWithoutTaskInput | ExchangeApprovalUpdateWithWhereUniqueWithoutTaskInput[]
    updateMany?: ExchangeApprovalUpdateManyWithWhereWithoutTaskInput | ExchangeApprovalUpdateManyWithWhereWithoutTaskInput[]
    deleteMany?: ExchangeApprovalScalarWhereInput | ExchangeApprovalScalarWhereInput[]
  }

  export type AuditLogUncheckedUpdateManyWithoutTaskNestedInput = {
    create?: XOR<AuditLogCreateWithoutTaskInput, AuditLogUncheckedCreateWithoutTaskInput> | AuditLogCreateWithoutTaskInput[] | AuditLogUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutTaskInput | AuditLogCreateOrConnectWithoutTaskInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutTaskInput | AuditLogUpsertWithWhereUniqueWithoutTaskInput[]
    createMany?: AuditLogCreateManyTaskInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutTaskInput | AuditLogUpdateWithWhereUniqueWithoutTaskInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutTaskInput | AuditLogUpdateManyWithWhereWithoutTaskInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutTaskNestedInput = {
    create?: XOR<NotificationCreateWithoutTaskInput, NotificationUncheckedCreateWithoutTaskInput> | NotificationCreateWithoutTaskInput[] | NotificationUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutTaskInput | NotificationCreateOrConnectWithoutTaskInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutTaskInput | NotificationUpsertWithWhereUniqueWithoutTaskInput[]
    createMany?: NotificationCreateManyTaskInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutTaskInput | NotificationUpdateWithWhereUniqueWithoutTaskInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutTaskInput | NotificationUpdateManyWithWhereWithoutTaskInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type VersionCreatefileUrlsInput = {
    set: string[]
  }

  export type TaskCreateNestedOneWithoutVersionsInput = {
    create?: XOR<TaskCreateWithoutVersionsInput, TaskUncheckedCreateWithoutVersionsInput>
    connectOrCreate?: TaskCreateOrConnectWithoutVersionsInput
    connect?: TaskWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutVersionsInput = {
    create?: XOR<UserCreateWithoutVersionsInput, UserUncheckedCreateWithoutVersionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutVersionsInput
    connect?: UserWhereUniqueInput
  }

  export type CommentCreateNestedManyWithoutVersionInput = {
    create?: XOR<CommentCreateWithoutVersionInput, CommentUncheckedCreateWithoutVersionInput> | CommentCreateWithoutVersionInput[] | CommentUncheckedCreateWithoutVersionInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutVersionInput | CommentCreateOrConnectWithoutVersionInput[]
    createMany?: CommentCreateManyVersionInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutVersionInput = {
    create?: XOR<CommentCreateWithoutVersionInput, CommentUncheckedCreateWithoutVersionInput> | CommentCreateWithoutVersionInput[] | CommentUncheckedCreateWithoutVersionInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutVersionInput | CommentCreateOrConnectWithoutVersionInput[]
    createMany?: CommentCreateManyVersionInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type VersionUpdatefileUrlsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type TaskUpdateOneRequiredWithoutVersionsNestedInput = {
    create?: XOR<TaskCreateWithoutVersionsInput, TaskUncheckedCreateWithoutVersionsInput>
    connectOrCreate?: TaskCreateOrConnectWithoutVersionsInput
    upsert?: TaskUpsertWithoutVersionsInput
    connect?: TaskWhereUniqueInput
    update?: XOR<XOR<TaskUpdateToOneWithWhereWithoutVersionsInput, TaskUpdateWithoutVersionsInput>, TaskUncheckedUpdateWithoutVersionsInput>
  }

  export type UserUpdateOneRequiredWithoutVersionsNestedInput = {
    create?: XOR<UserCreateWithoutVersionsInput, UserUncheckedCreateWithoutVersionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutVersionsInput
    upsert?: UserUpsertWithoutVersionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutVersionsInput, UserUpdateWithoutVersionsInput>, UserUncheckedUpdateWithoutVersionsInput>
  }

  export type CommentUpdateManyWithoutVersionNestedInput = {
    create?: XOR<CommentCreateWithoutVersionInput, CommentUncheckedCreateWithoutVersionInput> | CommentCreateWithoutVersionInput[] | CommentUncheckedCreateWithoutVersionInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutVersionInput | CommentCreateOrConnectWithoutVersionInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutVersionInput | CommentUpsertWithWhereUniqueWithoutVersionInput[]
    createMany?: CommentCreateManyVersionInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutVersionInput | CommentUpdateWithWhereUniqueWithoutVersionInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutVersionInput | CommentUpdateManyWithWhereWithoutVersionInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutVersionNestedInput = {
    create?: XOR<CommentCreateWithoutVersionInput, CommentUncheckedCreateWithoutVersionInput> | CommentCreateWithoutVersionInput[] | CommentUncheckedCreateWithoutVersionInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutVersionInput | CommentCreateOrConnectWithoutVersionInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutVersionInput | CommentUpsertWithWhereUniqueWithoutVersionInput[]
    createMany?: CommentCreateManyVersionInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutVersionInput | CommentUpdateWithWhereUniqueWithoutVersionInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutVersionInput | CommentUpdateManyWithWhereWithoutVersionInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type CommentCreateattachmentsInput = {
    set: string[]
  }

  export type TaskCreateNestedOneWithoutCommentsInput = {
    create?: XOR<TaskCreateWithoutCommentsInput, TaskUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: TaskCreateOrConnectWithoutCommentsInput
    connect?: TaskWhereUniqueInput
  }

  export type VersionCreateNestedOneWithoutCommentsInput = {
    create?: XOR<VersionCreateWithoutCommentsInput, VersionUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: VersionCreateOrConnectWithoutCommentsInput
    connect?: VersionWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCommentsInput = {
    create?: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentsInput
    connect?: UserWhereUniqueInput
  }

  export type CommentUpdateattachmentsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type TaskUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<TaskCreateWithoutCommentsInput, TaskUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: TaskCreateOrConnectWithoutCommentsInput
    upsert?: TaskUpsertWithoutCommentsInput
    connect?: TaskWhereUniqueInput
    update?: XOR<XOR<TaskUpdateToOneWithWhereWithoutCommentsInput, TaskUpdateWithoutCommentsInput>, TaskUncheckedUpdateWithoutCommentsInput>
  }

  export type VersionUpdateOneWithoutCommentsNestedInput = {
    create?: XOR<VersionCreateWithoutCommentsInput, VersionUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: VersionCreateOrConnectWithoutCommentsInput
    upsert?: VersionUpsertWithoutCommentsInput
    disconnect?: boolean
    delete?: VersionWhereInput | boolean
    connect?: VersionWhereUniqueInput
    update?: XOR<XOR<VersionUpdateToOneWithWhereWithoutCommentsInput, VersionUpdateWithoutCommentsInput>, VersionUncheckedUpdateWithoutCommentsInput>
  }

  export type UserUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentsInput
    upsert?: UserUpsertWithoutCommentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCommentsInput, UserUpdateWithoutCommentsInput>, UserUncheckedUpdateWithoutCommentsInput>
  }

  export type TaskCreateNestedOneWithoutExchangeApprovalsInput = {
    create?: XOR<TaskCreateWithoutExchangeApprovalsInput, TaskUncheckedCreateWithoutExchangeApprovalsInput>
    connectOrCreate?: TaskCreateOrConnectWithoutExchangeApprovalsInput
    connect?: TaskWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutExchangeApprovalsInput = {
    create?: XOR<UserCreateWithoutExchangeApprovalsInput, UserUncheckedCreateWithoutExchangeApprovalsInput>
    connectOrCreate?: UserCreateOrConnectWithoutExchangeApprovalsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumExchangeApprovalStatusFieldUpdateOperationsInput = {
    set?: $Enums.ExchangeApprovalStatus
  }

  export type TaskUpdateOneRequiredWithoutExchangeApprovalsNestedInput = {
    create?: XOR<TaskCreateWithoutExchangeApprovalsInput, TaskUncheckedCreateWithoutExchangeApprovalsInput>
    connectOrCreate?: TaskCreateOrConnectWithoutExchangeApprovalsInput
    upsert?: TaskUpsertWithoutExchangeApprovalsInput
    connect?: TaskWhereUniqueInput
    update?: XOR<XOR<TaskUpdateToOneWithWhereWithoutExchangeApprovalsInput, TaskUpdateWithoutExchangeApprovalsInput>, TaskUncheckedUpdateWithoutExchangeApprovalsInput>
  }

  export type UserUpdateOneWithoutExchangeApprovalsNestedInput = {
    create?: XOR<UserCreateWithoutExchangeApprovalsInput, UserUncheckedCreateWithoutExchangeApprovalsInput>
    connectOrCreate?: UserCreateOrConnectWithoutExchangeApprovalsInput
    upsert?: UserUpsertWithoutExchangeApprovalsInput
    disconnect?: boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutExchangeApprovalsInput, UserUpdateWithoutExchangeApprovalsInput>, UserUncheckedUpdateWithoutExchangeApprovalsInput>
  }

  export type UserCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    connect?: UserWhereUniqueInput
  }

  export type TaskCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<TaskCreateWithoutNotificationsInput, TaskUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: TaskCreateOrConnectWithoutNotificationsInput
    connect?: TaskWhereUniqueInput
  }

  export type EnumNotificationTypeFieldUpdateOperationsInput = {
    set?: $Enums.NotificationType
  }

  export type UserUpdateOneRequiredWithoutNotificationsNestedInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    upsert?: UserUpsertWithoutNotificationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNotificationsInput, UserUpdateWithoutNotificationsInput>, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type TaskUpdateOneWithoutNotificationsNestedInput = {
    create?: XOR<TaskCreateWithoutNotificationsInput, TaskUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: TaskCreateOrConnectWithoutNotificationsInput
    upsert?: TaskUpsertWithoutNotificationsInput
    disconnect?: boolean
    delete?: TaskWhereInput | boolean
    connect?: TaskWhereUniqueInput
    update?: XOR<XOR<TaskUpdateToOneWithWhereWithoutNotificationsInput, TaskUpdateWithoutNotificationsInput>, TaskUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserCreateNestedOneWithoutAuditLogsInput = {
    create?: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuditLogsInput
    connect?: UserWhereUniqueInput
  }

  export type TaskCreateNestedOneWithoutAuditLogsInput = {
    create?: XOR<TaskCreateWithoutAuditLogsInput, TaskUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: TaskCreateOrConnectWithoutAuditLogsInput
    connect?: TaskWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutAuditLogsNestedInput = {
    create?: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuditLogsInput
    upsert?: UserUpsertWithoutAuditLogsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAuditLogsInput, UserUpdateWithoutAuditLogsInput>, UserUncheckedUpdateWithoutAuditLogsInput>
  }

  export type TaskUpdateOneWithoutAuditLogsNestedInput = {
    create?: XOR<TaskCreateWithoutAuditLogsInput, TaskUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: TaskCreateOrConnectWithoutAuditLogsInput
    upsert?: TaskUpsertWithoutAuditLogsInput
    disconnect?: boolean
    delete?: TaskWhereInput | boolean
    connect?: TaskWhereUniqueInput
    update?: XOR<XOR<TaskUpdateToOneWithWhereWithoutAuditLogsInput, TaskUpdateWithoutAuditLogsInput>, TaskUncheckedUpdateWithoutAuditLogsInput>
  }

  export type UserCreateNestedOneWithoutAbsencesInput = {
    create?: XOR<UserCreateWithoutAbsencesInput, UserUncheckedCreateWithoutAbsencesInput>
    connectOrCreate?: UserCreateOrConnectWithoutAbsencesInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCreatedAbsencesInput = {
    create?: XOR<UserCreateWithoutCreatedAbsencesInput, UserUncheckedCreateWithoutCreatedAbsencesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedAbsencesInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutAbsencesNestedInput = {
    create?: XOR<UserCreateWithoutAbsencesInput, UserUncheckedCreateWithoutAbsencesInput>
    connectOrCreate?: UserCreateOrConnectWithoutAbsencesInput
    upsert?: UserUpsertWithoutAbsencesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAbsencesInput, UserUpdateWithoutAbsencesInput>, UserUncheckedUpdateWithoutAbsencesInput>
  }

  export type UserUpdateOneRequiredWithoutCreatedAbsencesNestedInput = {
    create?: XOR<UserCreateWithoutCreatedAbsencesInput, UserUncheckedCreateWithoutCreatedAbsencesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedAbsencesInput
    upsert?: UserUpsertWithoutCreatedAbsencesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedAbsencesInput, UserUpdateWithoutCreatedAbsencesInput>, UserUncheckedUpdateWithoutCreatedAbsencesInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
    isSet?: boolean
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
    isSet?: boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
    isSet?: boolean
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumTaskTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskType | EnumTaskTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.TaskType[] | ListEnumTaskTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.TaskType[] | ListEnumTaskTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumTaskTypeNullableFilter<$PrismaModel> | $Enums.TaskType | null
    isSet?: boolean
  }

  export type NestedEnumTaskStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskStatus | EnumTaskStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTaskStatusFilter<$PrismaModel> | $Enums.TaskStatus
  }

  export type NestedEnumTaskTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskType | EnumTaskTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.TaskType[] | ListEnumTaskTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.TaskType[] | ListEnumTaskTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumTaskTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.TaskType | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumTaskTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumTaskTypeNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type NestedEnumTaskStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskStatus | EnumTaskStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTaskStatusWithAggregatesFilter<$PrismaModel> | $Enums.TaskStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTaskStatusFilter<$PrismaModel>
    _max?: NestedEnumTaskStatusFilter<$PrismaModel>
  }

  export type NestedEnumExchangeApprovalStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ExchangeApprovalStatus | EnumExchangeApprovalStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ExchangeApprovalStatus[] | ListEnumExchangeApprovalStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ExchangeApprovalStatus[] | ListEnumExchangeApprovalStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumExchangeApprovalStatusFilter<$PrismaModel> | $Enums.ExchangeApprovalStatus
  }

  export type NestedEnumExchangeApprovalStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ExchangeApprovalStatus | EnumExchangeApprovalStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ExchangeApprovalStatus[] | ListEnumExchangeApprovalStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ExchangeApprovalStatus[] | ListEnumExchangeApprovalStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumExchangeApprovalStatusWithAggregatesFilter<$PrismaModel> | $Enums.ExchangeApprovalStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumExchangeApprovalStatusFilter<$PrismaModel>
    _max?: NestedEnumExchangeApprovalStatusFilter<$PrismaModel>
  }

  export type NestedEnumNotificationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeFilter<$PrismaModel> | $Enums.NotificationType
  }

  export type NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel> | $Enums.NotificationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationTypeFilter<$PrismaModel>
    _max?: NestedEnumNotificationTypeFilter<$PrismaModel>
  }

  export type TaskCreateWithoutCreatorInput = {
    id?: string
    uin: string
    title: string
    description?: string | null
    taskType?: $Enums.TaskType | null
    status?: $Enums.TaskStatus
    expectedPublishDate?: Date | string | null
    platform?: string | null
    category?: string | null
    remarks?: string | null
    approvalDate?: Date | string | null
    expiryDate?: Date | string | null
    approvalProofUrl?: string | null
    publishDate?: Date | string | null
    publishedCopyUrl?: string | null
    closureComments?: string | null
    closureDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedProductIds?: TaskCreateassignedProductIdsInput | string[]
    assignedCompliance?: UserCreateNestedOneWithoutComplianceTasksInput
    versions?: VersionCreateNestedManyWithoutTaskInput
    comments?: CommentCreateNestedManyWithoutTaskInput
    exchangeApprovals?: ExchangeApprovalCreateNestedManyWithoutTaskInput
    auditLogs?: AuditLogCreateNestedManyWithoutTaskInput
    notifications?: NotificationCreateNestedManyWithoutTaskInput
  }

  export type TaskUncheckedCreateWithoutCreatorInput = {
    id?: string
    uin: string
    title: string
    description?: string | null
    taskType?: $Enums.TaskType | null
    status?: $Enums.TaskStatus
    expectedPublishDate?: Date | string | null
    platform?: string | null
    category?: string | null
    remarks?: string | null
    approvalDate?: Date | string | null
    expiryDate?: Date | string | null
    approvalProofUrl?: string | null
    publishDate?: Date | string | null
    publishedCopyUrl?: string | null
    closureComments?: string | null
    closureDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedProductIds?: TaskCreateassignedProductIdsInput | string[]
    assignedComplianceId?: string | null
    versions?: VersionUncheckedCreateNestedManyWithoutTaskInput
    comments?: CommentUncheckedCreateNestedManyWithoutTaskInput
    exchangeApprovals?: ExchangeApprovalUncheckedCreateNestedManyWithoutTaskInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutTaskInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutTaskInput
  }

  export type TaskCreateOrConnectWithoutCreatorInput = {
    where: TaskWhereUniqueInput
    create: XOR<TaskCreateWithoutCreatorInput, TaskUncheckedCreateWithoutCreatorInput>
  }

  export type TaskCreateManyCreatorInputEnvelope = {
    data: TaskCreateManyCreatorInput | TaskCreateManyCreatorInput[]
  }

  export type TaskCreateWithoutAssignedComplianceInput = {
    id?: string
    uin: string
    title: string
    description?: string | null
    taskType?: $Enums.TaskType | null
    status?: $Enums.TaskStatus
    expectedPublishDate?: Date | string | null
    platform?: string | null
    category?: string | null
    remarks?: string | null
    approvalDate?: Date | string | null
    expiryDate?: Date | string | null
    approvalProofUrl?: string | null
    publishDate?: Date | string | null
    publishedCopyUrl?: string | null
    closureComments?: string | null
    closureDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedProductIds?: TaskCreateassignedProductIdsInput | string[]
    creator: UserCreateNestedOneWithoutCreatedTasksInput
    versions?: VersionCreateNestedManyWithoutTaskInput
    comments?: CommentCreateNestedManyWithoutTaskInput
    exchangeApprovals?: ExchangeApprovalCreateNestedManyWithoutTaskInput
    auditLogs?: AuditLogCreateNestedManyWithoutTaskInput
    notifications?: NotificationCreateNestedManyWithoutTaskInput
  }

  export type TaskUncheckedCreateWithoutAssignedComplianceInput = {
    id?: string
    uin: string
    title: string
    description?: string | null
    taskType?: $Enums.TaskType | null
    status?: $Enums.TaskStatus
    expectedPublishDate?: Date | string | null
    platform?: string | null
    category?: string | null
    remarks?: string | null
    approvalDate?: Date | string | null
    expiryDate?: Date | string | null
    approvalProofUrl?: string | null
    publishDate?: Date | string | null
    publishedCopyUrl?: string | null
    closureComments?: string | null
    closureDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: string
    assignedProductIds?: TaskCreateassignedProductIdsInput | string[]
    versions?: VersionUncheckedCreateNestedManyWithoutTaskInput
    comments?: CommentUncheckedCreateNestedManyWithoutTaskInput
    exchangeApprovals?: ExchangeApprovalUncheckedCreateNestedManyWithoutTaskInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutTaskInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutTaskInput
  }

  export type TaskCreateOrConnectWithoutAssignedComplianceInput = {
    where: TaskWhereUniqueInput
    create: XOR<TaskCreateWithoutAssignedComplianceInput, TaskUncheckedCreateWithoutAssignedComplianceInput>
  }

  export type TaskCreateManyAssignedComplianceInputEnvelope = {
    data: TaskCreateManyAssignedComplianceInput | TaskCreateManyAssignedComplianceInput[]
  }

  export type CommentCreateWithoutAuthorInput = {
    id?: string
    content: string
    attachments?: CommentCreateattachmentsInput | string[]
    isGlobal?: boolean
    createdAt?: Date | string
    task: TaskCreateNestedOneWithoutCommentsInput
    version?: VersionCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateWithoutAuthorInput = {
    id?: string
    content: string
    attachments?: CommentCreateattachmentsInput | string[]
    isGlobal?: boolean
    createdAt?: Date | string
    taskId: string
    versionId?: string | null
  }

  export type CommentCreateOrConnectWithoutAuthorInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutAuthorInput, CommentUncheckedCreateWithoutAuthorInput>
  }

  export type CommentCreateManyAuthorInputEnvelope = {
    data: CommentCreateManyAuthorInput | CommentCreateManyAuthorInput[]
  }

  export type VersionCreateWithoutUploadedByInput = {
    id?: string
    versionNumber: string
    fileUrls?: VersionCreatefileUrlsInput | string[]
    remarks?: string | null
    uploadedAt?: Date | string
    task: TaskCreateNestedOneWithoutVersionsInput
    comments?: CommentCreateNestedManyWithoutVersionInput
  }

  export type VersionUncheckedCreateWithoutUploadedByInput = {
    id?: string
    versionNumber: string
    fileUrls?: VersionCreatefileUrlsInput | string[]
    remarks?: string | null
    uploadedAt?: Date | string
    taskId: string
    comments?: CommentUncheckedCreateNestedManyWithoutVersionInput
  }

  export type VersionCreateOrConnectWithoutUploadedByInput = {
    where: VersionWhereUniqueInput
    create: XOR<VersionCreateWithoutUploadedByInput, VersionUncheckedCreateWithoutUploadedByInput>
  }

  export type VersionCreateManyUploadedByInputEnvelope = {
    data: VersionCreateManyUploadedByInput | VersionCreateManyUploadedByInput[]
  }

  export type AuditLogCreateWithoutPerformedByUserInput = {
    id?: string
    action: string
    details: string
    timestamp?: Date | string
    task?: TaskCreateNestedOneWithoutAuditLogsInput
  }

  export type AuditLogUncheckedCreateWithoutPerformedByUserInput = {
    id?: string
    action: string
    details: string
    timestamp?: Date | string
    taskId?: string | null
  }

  export type AuditLogCreateOrConnectWithoutPerformedByUserInput = {
    where: AuditLogWhereUniqueInput
    create: XOR<AuditLogCreateWithoutPerformedByUserInput, AuditLogUncheckedCreateWithoutPerformedByUserInput>
  }

  export type AuditLogCreateManyPerformedByUserInputEnvelope = {
    data: AuditLogCreateManyPerformedByUserInput | AuditLogCreateManyPerformedByUserInput[]
  }

  export type NotificationCreateWithoutUserInput = {
    id?: string
    title: string
    message: string
    type: $Enums.NotificationType
    isRead?: boolean
    createdAt?: Date | string
    task?: TaskCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateWithoutUserInput = {
    id?: string
    title: string
    message: string
    type: $Enums.NotificationType
    isRead?: boolean
    createdAt?: Date | string
    taskId?: string | null
  }

  export type NotificationCreateOrConnectWithoutUserInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationCreateManyUserInputEnvelope = {
    data: NotificationCreateManyUserInput | NotificationCreateManyUserInput[]
  }

  export type AbsenceCreateWithoutUserInput = {
    id?: string
    fromDate: Date | string
    toDate: Date | string
    reason?: string | null
    createdAt?: Date | string
    createdBy: UserCreateNestedOneWithoutCreatedAbsencesInput
  }

  export type AbsenceUncheckedCreateWithoutUserInput = {
    id?: string
    fromDate: Date | string
    toDate: Date | string
    reason?: string | null
    createdAt?: Date | string
    createdById: string
  }

  export type AbsenceCreateOrConnectWithoutUserInput = {
    where: AbsenceWhereUniqueInput
    create: XOR<AbsenceCreateWithoutUserInput, AbsenceUncheckedCreateWithoutUserInput>
  }

  export type AbsenceCreateManyUserInputEnvelope = {
    data: AbsenceCreateManyUserInput | AbsenceCreateManyUserInput[]
  }

  export type AbsenceCreateWithoutCreatedByInput = {
    id?: string
    fromDate: Date | string
    toDate: Date | string
    reason?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutAbsencesInput
  }

  export type AbsenceUncheckedCreateWithoutCreatedByInput = {
    id?: string
    fromDate: Date | string
    toDate: Date | string
    reason?: string | null
    createdAt?: Date | string
    userId: string
  }

  export type AbsenceCreateOrConnectWithoutCreatedByInput = {
    where: AbsenceWhereUniqueInput
    create: XOR<AbsenceCreateWithoutCreatedByInput, AbsenceUncheckedCreateWithoutCreatedByInput>
  }

  export type AbsenceCreateManyCreatedByInputEnvelope = {
    data: AbsenceCreateManyCreatedByInput | AbsenceCreateManyCreatedByInput[]
  }

  export type ExchangeApprovalCreateWithoutUpdatedByInput = {
    id?: string
    exchangeName: string
    typeOfContent: string
    approvalStatus?: $Enums.ExchangeApprovalStatus
    approvalDate?: Date | string | null
    expiryDate?: Date | string | null
    referenceNumber?: string | null
    approvalEmailUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    task: TaskCreateNestedOneWithoutExchangeApprovalsInput
  }

  export type ExchangeApprovalUncheckedCreateWithoutUpdatedByInput = {
    id?: string
    exchangeName: string
    typeOfContent: string
    approvalStatus?: $Enums.ExchangeApprovalStatus
    approvalDate?: Date | string | null
    expiryDate?: Date | string | null
    referenceNumber?: string | null
    approvalEmailUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    taskId: string
  }

  export type ExchangeApprovalCreateOrConnectWithoutUpdatedByInput = {
    where: ExchangeApprovalWhereUniqueInput
    create: XOR<ExchangeApprovalCreateWithoutUpdatedByInput, ExchangeApprovalUncheckedCreateWithoutUpdatedByInput>
  }

  export type ExchangeApprovalCreateManyUpdatedByInputEnvelope = {
    data: ExchangeApprovalCreateManyUpdatedByInput | ExchangeApprovalCreateManyUpdatedByInput[]
  }

  export type TaskUpsertWithWhereUniqueWithoutCreatorInput = {
    where: TaskWhereUniqueInput
    update: XOR<TaskUpdateWithoutCreatorInput, TaskUncheckedUpdateWithoutCreatorInput>
    create: XOR<TaskCreateWithoutCreatorInput, TaskUncheckedCreateWithoutCreatorInput>
  }

  export type TaskUpdateWithWhereUniqueWithoutCreatorInput = {
    where: TaskWhereUniqueInput
    data: XOR<TaskUpdateWithoutCreatorInput, TaskUncheckedUpdateWithoutCreatorInput>
  }

  export type TaskUpdateManyWithWhereWithoutCreatorInput = {
    where: TaskScalarWhereInput
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyWithoutCreatorInput>
  }

  export type TaskScalarWhereInput = {
    AND?: TaskScalarWhereInput | TaskScalarWhereInput[]
    OR?: TaskScalarWhereInput[]
    NOT?: TaskScalarWhereInput | TaskScalarWhereInput[]
    id?: StringFilter<"Task"> | string
    uin?: StringFilter<"Task"> | string
    title?: StringFilter<"Task"> | string
    description?: StringNullableFilter<"Task"> | string | null
    taskType?: EnumTaskTypeNullableFilter<"Task"> | $Enums.TaskType | null
    status?: EnumTaskStatusFilter<"Task"> | $Enums.TaskStatus
    expectedPublishDate?: DateTimeNullableFilter<"Task"> | Date | string | null
    platform?: StringNullableFilter<"Task"> | string | null
    category?: StringNullableFilter<"Task"> | string | null
    remarks?: StringNullableFilter<"Task"> | string | null
    approvalDate?: DateTimeNullableFilter<"Task"> | Date | string | null
    expiryDate?: DateTimeNullableFilter<"Task"> | Date | string | null
    approvalProofUrl?: StringNullableFilter<"Task"> | string | null
    publishDate?: DateTimeNullableFilter<"Task"> | Date | string | null
    publishedCopyUrl?: StringNullableFilter<"Task"> | string | null
    closureComments?: StringNullableFilter<"Task"> | string | null
    closureDate?: DateTimeNullableFilter<"Task"> | Date | string | null
    createdAt?: DateTimeFilter<"Task"> | Date | string
    updatedAt?: DateTimeFilter<"Task"> | Date | string
    createdBy?: StringFilter<"Task"> | string
    assignedProductIds?: StringNullableListFilter<"Task">
    assignedComplianceId?: StringNullableFilter<"Task"> | string | null
  }

  export type TaskUpsertWithWhereUniqueWithoutAssignedComplianceInput = {
    where: TaskWhereUniqueInput
    update: XOR<TaskUpdateWithoutAssignedComplianceInput, TaskUncheckedUpdateWithoutAssignedComplianceInput>
    create: XOR<TaskCreateWithoutAssignedComplianceInput, TaskUncheckedCreateWithoutAssignedComplianceInput>
  }

  export type TaskUpdateWithWhereUniqueWithoutAssignedComplianceInput = {
    where: TaskWhereUniqueInput
    data: XOR<TaskUpdateWithoutAssignedComplianceInput, TaskUncheckedUpdateWithoutAssignedComplianceInput>
  }

  export type TaskUpdateManyWithWhereWithoutAssignedComplianceInput = {
    where: TaskScalarWhereInput
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyWithoutAssignedComplianceInput>
  }

  export type CommentUpsertWithWhereUniqueWithoutAuthorInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutAuthorInput, CommentUncheckedUpdateWithoutAuthorInput>
    create: XOR<CommentCreateWithoutAuthorInput, CommentUncheckedCreateWithoutAuthorInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutAuthorInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutAuthorInput, CommentUncheckedUpdateWithoutAuthorInput>
  }

  export type CommentUpdateManyWithWhereWithoutAuthorInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutAuthorInput>
  }

  export type CommentScalarWhereInput = {
    AND?: CommentScalarWhereInput | CommentScalarWhereInput[]
    OR?: CommentScalarWhereInput[]
    NOT?: CommentScalarWhereInput | CommentScalarWhereInput[]
    id?: StringFilter<"Comment"> | string
    content?: StringFilter<"Comment"> | string
    attachments?: StringNullableListFilter<"Comment">
    isGlobal?: BoolFilter<"Comment"> | boolean
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    taskId?: StringFilter<"Comment"> | string
    versionId?: StringNullableFilter<"Comment"> | string | null
    authorId?: StringFilter<"Comment"> | string
  }

  export type VersionUpsertWithWhereUniqueWithoutUploadedByInput = {
    where: VersionWhereUniqueInput
    update: XOR<VersionUpdateWithoutUploadedByInput, VersionUncheckedUpdateWithoutUploadedByInput>
    create: XOR<VersionCreateWithoutUploadedByInput, VersionUncheckedCreateWithoutUploadedByInput>
  }

  export type VersionUpdateWithWhereUniqueWithoutUploadedByInput = {
    where: VersionWhereUniqueInput
    data: XOR<VersionUpdateWithoutUploadedByInput, VersionUncheckedUpdateWithoutUploadedByInput>
  }

  export type VersionUpdateManyWithWhereWithoutUploadedByInput = {
    where: VersionScalarWhereInput
    data: XOR<VersionUpdateManyMutationInput, VersionUncheckedUpdateManyWithoutUploadedByInput>
  }

  export type VersionScalarWhereInput = {
    AND?: VersionScalarWhereInput | VersionScalarWhereInput[]
    OR?: VersionScalarWhereInput[]
    NOT?: VersionScalarWhereInput | VersionScalarWhereInput[]
    id?: StringFilter<"Version"> | string
    versionNumber?: StringFilter<"Version"> | string
    fileUrls?: StringNullableListFilter<"Version">
    remarks?: StringNullableFilter<"Version"> | string | null
    uploadedAt?: DateTimeFilter<"Version"> | Date | string
    taskId?: StringFilter<"Version"> | string
    uploadedById?: StringFilter<"Version"> | string
  }

  export type AuditLogUpsertWithWhereUniqueWithoutPerformedByUserInput = {
    where: AuditLogWhereUniqueInput
    update: XOR<AuditLogUpdateWithoutPerformedByUserInput, AuditLogUncheckedUpdateWithoutPerformedByUserInput>
    create: XOR<AuditLogCreateWithoutPerformedByUserInput, AuditLogUncheckedCreateWithoutPerformedByUserInput>
  }

  export type AuditLogUpdateWithWhereUniqueWithoutPerformedByUserInput = {
    where: AuditLogWhereUniqueInput
    data: XOR<AuditLogUpdateWithoutPerformedByUserInput, AuditLogUncheckedUpdateWithoutPerformedByUserInput>
  }

  export type AuditLogUpdateManyWithWhereWithoutPerformedByUserInput = {
    where: AuditLogScalarWhereInput
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyWithoutPerformedByUserInput>
  }

  export type AuditLogScalarWhereInput = {
    AND?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
    OR?: AuditLogScalarWhereInput[]
    NOT?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
    id?: StringFilter<"AuditLog"> | string
    action?: StringFilter<"AuditLog"> | string
    details?: StringFilter<"AuditLog"> | string
    timestamp?: DateTimeFilter<"AuditLog"> | Date | string
    performedBy?: StringFilter<"AuditLog"> | string
    taskId?: StringNullableFilter<"AuditLog"> | string | null
  }

  export type NotificationUpsertWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
  }

  export type NotificationUpdateManyWithWhereWithoutUserInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutUserInput>
  }

  export type NotificationScalarWhereInput = {
    AND?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    OR?: NotificationScalarWhereInput[]
    NOT?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    id?: StringFilter<"Notification"> | string
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    type?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    isRead?: BoolFilter<"Notification"> | boolean
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    userId?: StringFilter<"Notification"> | string
    taskId?: StringNullableFilter<"Notification"> | string | null
  }

  export type AbsenceUpsertWithWhereUniqueWithoutUserInput = {
    where: AbsenceWhereUniqueInput
    update: XOR<AbsenceUpdateWithoutUserInput, AbsenceUncheckedUpdateWithoutUserInput>
    create: XOR<AbsenceCreateWithoutUserInput, AbsenceUncheckedCreateWithoutUserInput>
  }

  export type AbsenceUpdateWithWhereUniqueWithoutUserInput = {
    where: AbsenceWhereUniqueInput
    data: XOR<AbsenceUpdateWithoutUserInput, AbsenceUncheckedUpdateWithoutUserInput>
  }

  export type AbsenceUpdateManyWithWhereWithoutUserInput = {
    where: AbsenceScalarWhereInput
    data: XOR<AbsenceUpdateManyMutationInput, AbsenceUncheckedUpdateManyWithoutUserInput>
  }

  export type AbsenceScalarWhereInput = {
    AND?: AbsenceScalarWhereInput | AbsenceScalarWhereInput[]
    OR?: AbsenceScalarWhereInput[]
    NOT?: AbsenceScalarWhereInput | AbsenceScalarWhereInput[]
    id?: StringFilter<"Absence"> | string
    fromDate?: DateTimeFilter<"Absence"> | Date | string
    toDate?: DateTimeFilter<"Absence"> | Date | string
    reason?: StringNullableFilter<"Absence"> | string | null
    createdAt?: DateTimeFilter<"Absence"> | Date | string
    userId?: StringFilter<"Absence"> | string
    createdById?: StringFilter<"Absence"> | string
  }

  export type AbsenceUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: AbsenceWhereUniqueInput
    update: XOR<AbsenceUpdateWithoutCreatedByInput, AbsenceUncheckedUpdateWithoutCreatedByInput>
    create: XOR<AbsenceCreateWithoutCreatedByInput, AbsenceUncheckedCreateWithoutCreatedByInput>
  }

  export type AbsenceUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: AbsenceWhereUniqueInput
    data: XOR<AbsenceUpdateWithoutCreatedByInput, AbsenceUncheckedUpdateWithoutCreatedByInput>
  }

  export type AbsenceUpdateManyWithWhereWithoutCreatedByInput = {
    where: AbsenceScalarWhereInput
    data: XOR<AbsenceUpdateManyMutationInput, AbsenceUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type ExchangeApprovalUpsertWithWhereUniqueWithoutUpdatedByInput = {
    where: ExchangeApprovalWhereUniqueInput
    update: XOR<ExchangeApprovalUpdateWithoutUpdatedByInput, ExchangeApprovalUncheckedUpdateWithoutUpdatedByInput>
    create: XOR<ExchangeApprovalCreateWithoutUpdatedByInput, ExchangeApprovalUncheckedCreateWithoutUpdatedByInput>
  }

  export type ExchangeApprovalUpdateWithWhereUniqueWithoutUpdatedByInput = {
    where: ExchangeApprovalWhereUniqueInput
    data: XOR<ExchangeApprovalUpdateWithoutUpdatedByInput, ExchangeApprovalUncheckedUpdateWithoutUpdatedByInput>
  }

  export type ExchangeApprovalUpdateManyWithWhereWithoutUpdatedByInput = {
    where: ExchangeApprovalScalarWhereInput
    data: XOR<ExchangeApprovalUpdateManyMutationInput, ExchangeApprovalUncheckedUpdateManyWithoutUpdatedByInput>
  }

  export type ExchangeApprovalScalarWhereInput = {
    AND?: ExchangeApprovalScalarWhereInput | ExchangeApprovalScalarWhereInput[]
    OR?: ExchangeApprovalScalarWhereInput[]
    NOT?: ExchangeApprovalScalarWhereInput | ExchangeApprovalScalarWhereInput[]
    id?: StringFilter<"ExchangeApproval"> | string
    exchangeName?: StringFilter<"ExchangeApproval"> | string
    typeOfContent?: StringFilter<"ExchangeApproval"> | string
    approvalStatus?: EnumExchangeApprovalStatusFilter<"ExchangeApproval"> | $Enums.ExchangeApprovalStatus
    approvalDate?: DateTimeNullableFilter<"ExchangeApproval"> | Date | string | null
    expiryDate?: DateTimeNullableFilter<"ExchangeApproval"> | Date | string | null
    referenceNumber?: StringNullableFilter<"ExchangeApproval"> | string | null
    approvalEmailUrl?: StringNullableFilter<"ExchangeApproval"> | string | null
    createdAt?: DateTimeFilter<"ExchangeApproval"> | Date | string
    updatedAt?: DateTimeFilter<"ExchangeApproval"> | Date | string
    taskId?: StringFilter<"ExchangeApproval"> | string
    updatedById?: StringNullableFilter<"ExchangeApproval"> | string | null
  }

  export type UserCreateWithoutCreatedTasksInput = {
    id?: string
    username: string
    email: string
    password: string
    fullName: string
    role: $Enums.Role
    isActive?: boolean
    team?: string | null
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    complianceTasks?: TaskCreateNestedManyWithoutAssignedComplianceInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    versions?: VersionCreateNestedManyWithoutUploadedByInput
    auditLogs?: AuditLogCreateNestedManyWithoutPerformedByUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    absences?: AbsenceCreateNestedManyWithoutUserInput
    createdAbsences?: AbsenceCreateNestedManyWithoutCreatedByInput
    exchangeApprovals?: ExchangeApprovalCreateNestedManyWithoutUpdatedByInput
  }

  export type UserUncheckedCreateWithoutCreatedTasksInput = {
    id?: string
    username: string
    email: string
    password: string
    fullName: string
    role: $Enums.Role
    isActive?: boolean
    team?: string | null
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    complianceTasks?: TaskUncheckedCreateNestedManyWithoutAssignedComplianceInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    versions?: VersionUncheckedCreateNestedManyWithoutUploadedByInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutPerformedByUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    absences?: AbsenceUncheckedCreateNestedManyWithoutUserInput
    createdAbsences?: AbsenceUncheckedCreateNestedManyWithoutCreatedByInput
    exchangeApprovals?: ExchangeApprovalUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type UserCreateOrConnectWithoutCreatedTasksInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedTasksInput, UserUncheckedCreateWithoutCreatedTasksInput>
  }

  export type UserCreateWithoutComplianceTasksInput = {
    id?: string
    username: string
    email: string
    password: string
    fullName: string
    role: $Enums.Role
    isActive?: boolean
    team?: string | null
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdTasks?: TaskCreateNestedManyWithoutCreatorInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    versions?: VersionCreateNestedManyWithoutUploadedByInput
    auditLogs?: AuditLogCreateNestedManyWithoutPerformedByUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    absences?: AbsenceCreateNestedManyWithoutUserInput
    createdAbsences?: AbsenceCreateNestedManyWithoutCreatedByInput
    exchangeApprovals?: ExchangeApprovalCreateNestedManyWithoutUpdatedByInput
  }

  export type UserUncheckedCreateWithoutComplianceTasksInput = {
    id?: string
    username: string
    email: string
    password: string
    fullName: string
    role: $Enums.Role
    isActive?: boolean
    team?: string | null
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdTasks?: TaskUncheckedCreateNestedManyWithoutCreatorInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    versions?: VersionUncheckedCreateNestedManyWithoutUploadedByInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutPerformedByUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    absences?: AbsenceUncheckedCreateNestedManyWithoutUserInput
    createdAbsences?: AbsenceUncheckedCreateNestedManyWithoutCreatedByInput
    exchangeApprovals?: ExchangeApprovalUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type UserCreateOrConnectWithoutComplianceTasksInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutComplianceTasksInput, UserUncheckedCreateWithoutComplianceTasksInput>
  }

  export type VersionCreateWithoutTaskInput = {
    id?: string
    versionNumber: string
    fileUrls?: VersionCreatefileUrlsInput | string[]
    remarks?: string | null
    uploadedAt?: Date | string
    uploadedBy: UserCreateNestedOneWithoutVersionsInput
    comments?: CommentCreateNestedManyWithoutVersionInput
  }

  export type VersionUncheckedCreateWithoutTaskInput = {
    id?: string
    versionNumber: string
    fileUrls?: VersionCreatefileUrlsInput | string[]
    remarks?: string | null
    uploadedAt?: Date | string
    uploadedById: string
    comments?: CommentUncheckedCreateNestedManyWithoutVersionInput
  }

  export type VersionCreateOrConnectWithoutTaskInput = {
    where: VersionWhereUniqueInput
    create: XOR<VersionCreateWithoutTaskInput, VersionUncheckedCreateWithoutTaskInput>
  }

  export type VersionCreateManyTaskInputEnvelope = {
    data: VersionCreateManyTaskInput | VersionCreateManyTaskInput[]
  }

  export type CommentCreateWithoutTaskInput = {
    id?: string
    content: string
    attachments?: CommentCreateattachmentsInput | string[]
    isGlobal?: boolean
    createdAt?: Date | string
    version?: VersionCreateNestedOneWithoutCommentsInput
    author: UserCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateWithoutTaskInput = {
    id?: string
    content: string
    attachments?: CommentCreateattachmentsInput | string[]
    isGlobal?: boolean
    createdAt?: Date | string
    versionId?: string | null
    authorId: string
  }

  export type CommentCreateOrConnectWithoutTaskInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutTaskInput, CommentUncheckedCreateWithoutTaskInput>
  }

  export type CommentCreateManyTaskInputEnvelope = {
    data: CommentCreateManyTaskInput | CommentCreateManyTaskInput[]
  }

  export type ExchangeApprovalCreateWithoutTaskInput = {
    id?: string
    exchangeName: string
    typeOfContent: string
    approvalStatus?: $Enums.ExchangeApprovalStatus
    approvalDate?: Date | string | null
    expiryDate?: Date | string | null
    referenceNumber?: string | null
    approvalEmailUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedBy?: UserCreateNestedOneWithoutExchangeApprovalsInput
  }

  export type ExchangeApprovalUncheckedCreateWithoutTaskInput = {
    id?: string
    exchangeName: string
    typeOfContent: string
    approvalStatus?: $Enums.ExchangeApprovalStatus
    approvalDate?: Date | string | null
    expiryDate?: Date | string | null
    referenceNumber?: string | null
    approvalEmailUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById?: string | null
  }

  export type ExchangeApprovalCreateOrConnectWithoutTaskInput = {
    where: ExchangeApprovalWhereUniqueInput
    create: XOR<ExchangeApprovalCreateWithoutTaskInput, ExchangeApprovalUncheckedCreateWithoutTaskInput>
  }

  export type ExchangeApprovalCreateManyTaskInputEnvelope = {
    data: ExchangeApprovalCreateManyTaskInput | ExchangeApprovalCreateManyTaskInput[]
  }

  export type AuditLogCreateWithoutTaskInput = {
    id?: string
    action: string
    details: string
    timestamp?: Date | string
    performedByUser: UserCreateNestedOneWithoutAuditLogsInput
  }

  export type AuditLogUncheckedCreateWithoutTaskInput = {
    id?: string
    action: string
    details: string
    timestamp?: Date | string
    performedBy: string
  }

  export type AuditLogCreateOrConnectWithoutTaskInput = {
    where: AuditLogWhereUniqueInput
    create: XOR<AuditLogCreateWithoutTaskInput, AuditLogUncheckedCreateWithoutTaskInput>
  }

  export type AuditLogCreateManyTaskInputEnvelope = {
    data: AuditLogCreateManyTaskInput | AuditLogCreateManyTaskInput[]
  }

  export type NotificationCreateWithoutTaskInput = {
    id?: string
    title: string
    message: string
    type: $Enums.NotificationType
    isRead?: boolean
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateWithoutTaskInput = {
    id?: string
    title: string
    message: string
    type: $Enums.NotificationType
    isRead?: boolean
    createdAt?: Date | string
    userId: string
  }

  export type NotificationCreateOrConnectWithoutTaskInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutTaskInput, NotificationUncheckedCreateWithoutTaskInput>
  }

  export type NotificationCreateManyTaskInputEnvelope = {
    data: NotificationCreateManyTaskInput | NotificationCreateManyTaskInput[]
  }

  export type UserUpsertWithoutCreatedTasksInput = {
    update: XOR<UserUpdateWithoutCreatedTasksInput, UserUncheckedUpdateWithoutCreatedTasksInput>
    create: XOR<UserCreateWithoutCreatedTasksInput, UserUncheckedCreateWithoutCreatedTasksInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedTasksInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedTasksInput, UserUncheckedUpdateWithoutCreatedTasksInput>
  }

  export type UserUpdateWithoutCreatedTasksInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    team?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    complianceTasks?: TaskUpdateManyWithoutAssignedComplianceNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    versions?: VersionUpdateManyWithoutUploadedByNestedInput
    auditLogs?: AuditLogUpdateManyWithoutPerformedByUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    absences?: AbsenceUpdateManyWithoutUserNestedInput
    createdAbsences?: AbsenceUpdateManyWithoutCreatedByNestedInput
    exchangeApprovals?: ExchangeApprovalUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedTasksInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    team?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    complianceTasks?: TaskUncheckedUpdateManyWithoutAssignedComplianceNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    versions?: VersionUncheckedUpdateManyWithoutUploadedByNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutPerformedByUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    absences?: AbsenceUncheckedUpdateManyWithoutUserNestedInput
    createdAbsences?: AbsenceUncheckedUpdateManyWithoutCreatedByNestedInput
    exchangeApprovals?: ExchangeApprovalUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUpsertWithoutComplianceTasksInput = {
    update: XOR<UserUpdateWithoutComplianceTasksInput, UserUncheckedUpdateWithoutComplianceTasksInput>
    create: XOR<UserCreateWithoutComplianceTasksInput, UserUncheckedCreateWithoutComplianceTasksInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutComplianceTasksInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutComplianceTasksInput, UserUncheckedUpdateWithoutComplianceTasksInput>
  }

  export type UserUpdateWithoutComplianceTasksInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    team?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdTasks?: TaskUpdateManyWithoutCreatorNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    versions?: VersionUpdateManyWithoutUploadedByNestedInput
    auditLogs?: AuditLogUpdateManyWithoutPerformedByUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    absences?: AbsenceUpdateManyWithoutUserNestedInput
    createdAbsences?: AbsenceUpdateManyWithoutCreatedByNestedInput
    exchangeApprovals?: ExchangeApprovalUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutComplianceTasksInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    team?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdTasks?: TaskUncheckedUpdateManyWithoutCreatorNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    versions?: VersionUncheckedUpdateManyWithoutUploadedByNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutPerformedByUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    absences?: AbsenceUncheckedUpdateManyWithoutUserNestedInput
    createdAbsences?: AbsenceUncheckedUpdateManyWithoutCreatedByNestedInput
    exchangeApprovals?: ExchangeApprovalUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type VersionUpsertWithWhereUniqueWithoutTaskInput = {
    where: VersionWhereUniqueInput
    update: XOR<VersionUpdateWithoutTaskInput, VersionUncheckedUpdateWithoutTaskInput>
    create: XOR<VersionCreateWithoutTaskInput, VersionUncheckedCreateWithoutTaskInput>
  }

  export type VersionUpdateWithWhereUniqueWithoutTaskInput = {
    where: VersionWhereUniqueInput
    data: XOR<VersionUpdateWithoutTaskInput, VersionUncheckedUpdateWithoutTaskInput>
  }

  export type VersionUpdateManyWithWhereWithoutTaskInput = {
    where: VersionScalarWhereInput
    data: XOR<VersionUpdateManyMutationInput, VersionUncheckedUpdateManyWithoutTaskInput>
  }

  export type CommentUpsertWithWhereUniqueWithoutTaskInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutTaskInput, CommentUncheckedUpdateWithoutTaskInput>
    create: XOR<CommentCreateWithoutTaskInput, CommentUncheckedCreateWithoutTaskInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutTaskInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutTaskInput, CommentUncheckedUpdateWithoutTaskInput>
  }

  export type CommentUpdateManyWithWhereWithoutTaskInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutTaskInput>
  }

  export type ExchangeApprovalUpsertWithWhereUniqueWithoutTaskInput = {
    where: ExchangeApprovalWhereUniqueInput
    update: XOR<ExchangeApprovalUpdateWithoutTaskInput, ExchangeApprovalUncheckedUpdateWithoutTaskInput>
    create: XOR<ExchangeApprovalCreateWithoutTaskInput, ExchangeApprovalUncheckedCreateWithoutTaskInput>
  }

  export type ExchangeApprovalUpdateWithWhereUniqueWithoutTaskInput = {
    where: ExchangeApprovalWhereUniqueInput
    data: XOR<ExchangeApprovalUpdateWithoutTaskInput, ExchangeApprovalUncheckedUpdateWithoutTaskInput>
  }

  export type ExchangeApprovalUpdateManyWithWhereWithoutTaskInput = {
    where: ExchangeApprovalScalarWhereInput
    data: XOR<ExchangeApprovalUpdateManyMutationInput, ExchangeApprovalUncheckedUpdateManyWithoutTaskInput>
  }

  export type AuditLogUpsertWithWhereUniqueWithoutTaskInput = {
    where: AuditLogWhereUniqueInput
    update: XOR<AuditLogUpdateWithoutTaskInput, AuditLogUncheckedUpdateWithoutTaskInput>
    create: XOR<AuditLogCreateWithoutTaskInput, AuditLogUncheckedCreateWithoutTaskInput>
  }

  export type AuditLogUpdateWithWhereUniqueWithoutTaskInput = {
    where: AuditLogWhereUniqueInput
    data: XOR<AuditLogUpdateWithoutTaskInput, AuditLogUncheckedUpdateWithoutTaskInput>
  }

  export type AuditLogUpdateManyWithWhereWithoutTaskInput = {
    where: AuditLogScalarWhereInput
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyWithoutTaskInput>
  }

  export type NotificationUpsertWithWhereUniqueWithoutTaskInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutTaskInput, NotificationUncheckedUpdateWithoutTaskInput>
    create: XOR<NotificationCreateWithoutTaskInput, NotificationUncheckedCreateWithoutTaskInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutTaskInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutTaskInput, NotificationUncheckedUpdateWithoutTaskInput>
  }

  export type NotificationUpdateManyWithWhereWithoutTaskInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutTaskInput>
  }

  export type TaskCreateWithoutVersionsInput = {
    id?: string
    uin: string
    title: string
    description?: string | null
    taskType?: $Enums.TaskType | null
    status?: $Enums.TaskStatus
    expectedPublishDate?: Date | string | null
    platform?: string | null
    category?: string | null
    remarks?: string | null
    approvalDate?: Date | string | null
    expiryDate?: Date | string | null
    approvalProofUrl?: string | null
    publishDate?: Date | string | null
    publishedCopyUrl?: string | null
    closureComments?: string | null
    closureDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedProductIds?: TaskCreateassignedProductIdsInput | string[]
    creator: UserCreateNestedOneWithoutCreatedTasksInput
    assignedCompliance?: UserCreateNestedOneWithoutComplianceTasksInput
    comments?: CommentCreateNestedManyWithoutTaskInput
    exchangeApprovals?: ExchangeApprovalCreateNestedManyWithoutTaskInput
    auditLogs?: AuditLogCreateNestedManyWithoutTaskInput
    notifications?: NotificationCreateNestedManyWithoutTaskInput
  }

  export type TaskUncheckedCreateWithoutVersionsInput = {
    id?: string
    uin: string
    title: string
    description?: string | null
    taskType?: $Enums.TaskType | null
    status?: $Enums.TaskStatus
    expectedPublishDate?: Date | string | null
    platform?: string | null
    category?: string | null
    remarks?: string | null
    approvalDate?: Date | string | null
    expiryDate?: Date | string | null
    approvalProofUrl?: string | null
    publishDate?: Date | string | null
    publishedCopyUrl?: string | null
    closureComments?: string | null
    closureDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: string
    assignedProductIds?: TaskCreateassignedProductIdsInput | string[]
    assignedComplianceId?: string | null
    comments?: CommentUncheckedCreateNestedManyWithoutTaskInput
    exchangeApprovals?: ExchangeApprovalUncheckedCreateNestedManyWithoutTaskInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutTaskInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutTaskInput
  }

  export type TaskCreateOrConnectWithoutVersionsInput = {
    where: TaskWhereUniqueInput
    create: XOR<TaskCreateWithoutVersionsInput, TaskUncheckedCreateWithoutVersionsInput>
  }

  export type UserCreateWithoutVersionsInput = {
    id?: string
    username: string
    email: string
    password: string
    fullName: string
    role: $Enums.Role
    isActive?: boolean
    team?: string | null
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdTasks?: TaskCreateNestedManyWithoutCreatorInput
    complianceTasks?: TaskCreateNestedManyWithoutAssignedComplianceInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    auditLogs?: AuditLogCreateNestedManyWithoutPerformedByUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    absences?: AbsenceCreateNestedManyWithoutUserInput
    createdAbsences?: AbsenceCreateNestedManyWithoutCreatedByInput
    exchangeApprovals?: ExchangeApprovalCreateNestedManyWithoutUpdatedByInput
  }

  export type UserUncheckedCreateWithoutVersionsInput = {
    id?: string
    username: string
    email: string
    password: string
    fullName: string
    role: $Enums.Role
    isActive?: boolean
    team?: string | null
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdTasks?: TaskUncheckedCreateNestedManyWithoutCreatorInput
    complianceTasks?: TaskUncheckedCreateNestedManyWithoutAssignedComplianceInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutPerformedByUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    absences?: AbsenceUncheckedCreateNestedManyWithoutUserInput
    createdAbsences?: AbsenceUncheckedCreateNestedManyWithoutCreatedByInput
    exchangeApprovals?: ExchangeApprovalUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type UserCreateOrConnectWithoutVersionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutVersionsInput, UserUncheckedCreateWithoutVersionsInput>
  }

  export type CommentCreateWithoutVersionInput = {
    id?: string
    content: string
    attachments?: CommentCreateattachmentsInput | string[]
    isGlobal?: boolean
    createdAt?: Date | string
    task: TaskCreateNestedOneWithoutCommentsInput
    author: UserCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateWithoutVersionInput = {
    id?: string
    content: string
    attachments?: CommentCreateattachmentsInput | string[]
    isGlobal?: boolean
    createdAt?: Date | string
    taskId: string
    authorId: string
  }

  export type CommentCreateOrConnectWithoutVersionInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutVersionInput, CommentUncheckedCreateWithoutVersionInput>
  }

  export type CommentCreateManyVersionInputEnvelope = {
    data: CommentCreateManyVersionInput | CommentCreateManyVersionInput[]
  }

  export type TaskUpsertWithoutVersionsInput = {
    update: XOR<TaskUpdateWithoutVersionsInput, TaskUncheckedUpdateWithoutVersionsInput>
    create: XOR<TaskCreateWithoutVersionsInput, TaskUncheckedCreateWithoutVersionsInput>
    where?: TaskWhereInput
  }

  export type TaskUpdateToOneWithWhereWithoutVersionsInput = {
    where?: TaskWhereInput
    data: XOR<TaskUpdateWithoutVersionsInput, TaskUncheckedUpdateWithoutVersionsInput>
  }

  export type TaskUpdateWithoutVersionsInput = {
    uin?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    taskType?: NullableEnumTaskTypeFieldUpdateOperationsInput | $Enums.TaskType | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    expectedPublishDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    platform?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    approvalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvalProofUrl?: NullableStringFieldUpdateOperationsInput | string | null
    publishDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    publishedCopyUrl?: NullableStringFieldUpdateOperationsInput | string | null
    closureComments?: NullableStringFieldUpdateOperationsInput | string | null
    closureDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedProductIds?: TaskUpdateassignedProductIdsInput | string[]
    creator?: UserUpdateOneRequiredWithoutCreatedTasksNestedInput
    assignedCompliance?: UserUpdateOneWithoutComplianceTasksNestedInput
    comments?: CommentUpdateManyWithoutTaskNestedInput
    exchangeApprovals?: ExchangeApprovalUpdateManyWithoutTaskNestedInput
    auditLogs?: AuditLogUpdateManyWithoutTaskNestedInput
    notifications?: NotificationUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateWithoutVersionsInput = {
    uin?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    taskType?: NullableEnumTaskTypeFieldUpdateOperationsInput | $Enums.TaskType | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    expectedPublishDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    platform?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    approvalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvalProofUrl?: NullableStringFieldUpdateOperationsInput | string | null
    publishDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    publishedCopyUrl?: NullableStringFieldUpdateOperationsInput | string | null
    closureComments?: NullableStringFieldUpdateOperationsInput | string | null
    closureDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    assignedProductIds?: TaskUpdateassignedProductIdsInput | string[]
    assignedComplianceId?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentUncheckedUpdateManyWithoutTaskNestedInput
    exchangeApprovals?: ExchangeApprovalUncheckedUpdateManyWithoutTaskNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutTaskNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutTaskNestedInput
  }

  export type UserUpsertWithoutVersionsInput = {
    update: XOR<UserUpdateWithoutVersionsInput, UserUncheckedUpdateWithoutVersionsInput>
    create: XOR<UserCreateWithoutVersionsInput, UserUncheckedCreateWithoutVersionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutVersionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutVersionsInput, UserUncheckedUpdateWithoutVersionsInput>
  }

  export type UserUpdateWithoutVersionsInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    team?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdTasks?: TaskUpdateManyWithoutCreatorNestedInput
    complianceTasks?: TaskUpdateManyWithoutAssignedComplianceNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    auditLogs?: AuditLogUpdateManyWithoutPerformedByUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    absences?: AbsenceUpdateManyWithoutUserNestedInput
    createdAbsences?: AbsenceUpdateManyWithoutCreatedByNestedInput
    exchangeApprovals?: ExchangeApprovalUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutVersionsInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    team?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdTasks?: TaskUncheckedUpdateManyWithoutCreatorNestedInput
    complianceTasks?: TaskUncheckedUpdateManyWithoutAssignedComplianceNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutPerformedByUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    absences?: AbsenceUncheckedUpdateManyWithoutUserNestedInput
    createdAbsences?: AbsenceUncheckedUpdateManyWithoutCreatedByNestedInput
    exchangeApprovals?: ExchangeApprovalUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type CommentUpsertWithWhereUniqueWithoutVersionInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutVersionInput, CommentUncheckedUpdateWithoutVersionInput>
    create: XOR<CommentCreateWithoutVersionInput, CommentUncheckedCreateWithoutVersionInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutVersionInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutVersionInput, CommentUncheckedUpdateWithoutVersionInput>
  }

  export type CommentUpdateManyWithWhereWithoutVersionInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutVersionInput>
  }

  export type TaskCreateWithoutCommentsInput = {
    id?: string
    uin: string
    title: string
    description?: string | null
    taskType?: $Enums.TaskType | null
    status?: $Enums.TaskStatus
    expectedPublishDate?: Date | string | null
    platform?: string | null
    category?: string | null
    remarks?: string | null
    approvalDate?: Date | string | null
    expiryDate?: Date | string | null
    approvalProofUrl?: string | null
    publishDate?: Date | string | null
    publishedCopyUrl?: string | null
    closureComments?: string | null
    closureDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedProductIds?: TaskCreateassignedProductIdsInput | string[]
    creator: UserCreateNestedOneWithoutCreatedTasksInput
    assignedCompliance?: UserCreateNestedOneWithoutComplianceTasksInput
    versions?: VersionCreateNestedManyWithoutTaskInput
    exchangeApprovals?: ExchangeApprovalCreateNestedManyWithoutTaskInput
    auditLogs?: AuditLogCreateNestedManyWithoutTaskInput
    notifications?: NotificationCreateNestedManyWithoutTaskInput
  }

  export type TaskUncheckedCreateWithoutCommentsInput = {
    id?: string
    uin: string
    title: string
    description?: string | null
    taskType?: $Enums.TaskType | null
    status?: $Enums.TaskStatus
    expectedPublishDate?: Date | string | null
    platform?: string | null
    category?: string | null
    remarks?: string | null
    approvalDate?: Date | string | null
    expiryDate?: Date | string | null
    approvalProofUrl?: string | null
    publishDate?: Date | string | null
    publishedCopyUrl?: string | null
    closureComments?: string | null
    closureDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: string
    assignedProductIds?: TaskCreateassignedProductIdsInput | string[]
    assignedComplianceId?: string | null
    versions?: VersionUncheckedCreateNestedManyWithoutTaskInput
    exchangeApprovals?: ExchangeApprovalUncheckedCreateNestedManyWithoutTaskInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutTaskInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutTaskInput
  }

  export type TaskCreateOrConnectWithoutCommentsInput = {
    where: TaskWhereUniqueInput
    create: XOR<TaskCreateWithoutCommentsInput, TaskUncheckedCreateWithoutCommentsInput>
  }

  export type VersionCreateWithoutCommentsInput = {
    id?: string
    versionNumber: string
    fileUrls?: VersionCreatefileUrlsInput | string[]
    remarks?: string | null
    uploadedAt?: Date | string
    task: TaskCreateNestedOneWithoutVersionsInput
    uploadedBy: UserCreateNestedOneWithoutVersionsInput
  }

  export type VersionUncheckedCreateWithoutCommentsInput = {
    id?: string
    versionNumber: string
    fileUrls?: VersionCreatefileUrlsInput | string[]
    remarks?: string | null
    uploadedAt?: Date | string
    taskId: string
    uploadedById: string
  }

  export type VersionCreateOrConnectWithoutCommentsInput = {
    where: VersionWhereUniqueInput
    create: XOR<VersionCreateWithoutCommentsInput, VersionUncheckedCreateWithoutCommentsInput>
  }

  export type UserCreateWithoutCommentsInput = {
    id?: string
    username: string
    email: string
    password: string
    fullName: string
    role: $Enums.Role
    isActive?: boolean
    team?: string | null
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdTasks?: TaskCreateNestedManyWithoutCreatorInput
    complianceTasks?: TaskCreateNestedManyWithoutAssignedComplianceInput
    versions?: VersionCreateNestedManyWithoutUploadedByInput
    auditLogs?: AuditLogCreateNestedManyWithoutPerformedByUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    absences?: AbsenceCreateNestedManyWithoutUserInput
    createdAbsences?: AbsenceCreateNestedManyWithoutCreatedByInput
    exchangeApprovals?: ExchangeApprovalCreateNestedManyWithoutUpdatedByInput
  }

  export type UserUncheckedCreateWithoutCommentsInput = {
    id?: string
    username: string
    email: string
    password: string
    fullName: string
    role: $Enums.Role
    isActive?: boolean
    team?: string | null
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdTasks?: TaskUncheckedCreateNestedManyWithoutCreatorInput
    complianceTasks?: TaskUncheckedCreateNestedManyWithoutAssignedComplianceInput
    versions?: VersionUncheckedCreateNestedManyWithoutUploadedByInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutPerformedByUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    absences?: AbsenceUncheckedCreateNestedManyWithoutUserInput
    createdAbsences?: AbsenceUncheckedCreateNestedManyWithoutCreatedByInput
    exchangeApprovals?: ExchangeApprovalUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type UserCreateOrConnectWithoutCommentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
  }

  export type TaskUpsertWithoutCommentsInput = {
    update: XOR<TaskUpdateWithoutCommentsInput, TaskUncheckedUpdateWithoutCommentsInput>
    create: XOR<TaskCreateWithoutCommentsInput, TaskUncheckedCreateWithoutCommentsInput>
    where?: TaskWhereInput
  }

  export type TaskUpdateToOneWithWhereWithoutCommentsInput = {
    where?: TaskWhereInput
    data: XOR<TaskUpdateWithoutCommentsInput, TaskUncheckedUpdateWithoutCommentsInput>
  }

  export type TaskUpdateWithoutCommentsInput = {
    uin?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    taskType?: NullableEnumTaskTypeFieldUpdateOperationsInput | $Enums.TaskType | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    expectedPublishDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    platform?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    approvalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvalProofUrl?: NullableStringFieldUpdateOperationsInput | string | null
    publishDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    publishedCopyUrl?: NullableStringFieldUpdateOperationsInput | string | null
    closureComments?: NullableStringFieldUpdateOperationsInput | string | null
    closureDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedProductIds?: TaskUpdateassignedProductIdsInput | string[]
    creator?: UserUpdateOneRequiredWithoutCreatedTasksNestedInput
    assignedCompliance?: UserUpdateOneWithoutComplianceTasksNestedInput
    versions?: VersionUpdateManyWithoutTaskNestedInput
    exchangeApprovals?: ExchangeApprovalUpdateManyWithoutTaskNestedInput
    auditLogs?: AuditLogUpdateManyWithoutTaskNestedInput
    notifications?: NotificationUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateWithoutCommentsInput = {
    uin?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    taskType?: NullableEnumTaskTypeFieldUpdateOperationsInput | $Enums.TaskType | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    expectedPublishDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    platform?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    approvalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvalProofUrl?: NullableStringFieldUpdateOperationsInput | string | null
    publishDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    publishedCopyUrl?: NullableStringFieldUpdateOperationsInput | string | null
    closureComments?: NullableStringFieldUpdateOperationsInput | string | null
    closureDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    assignedProductIds?: TaskUpdateassignedProductIdsInput | string[]
    assignedComplianceId?: NullableStringFieldUpdateOperationsInput | string | null
    versions?: VersionUncheckedUpdateManyWithoutTaskNestedInput
    exchangeApprovals?: ExchangeApprovalUncheckedUpdateManyWithoutTaskNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutTaskNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutTaskNestedInput
  }

  export type VersionUpsertWithoutCommentsInput = {
    update: XOR<VersionUpdateWithoutCommentsInput, VersionUncheckedUpdateWithoutCommentsInput>
    create: XOR<VersionCreateWithoutCommentsInput, VersionUncheckedCreateWithoutCommentsInput>
    where?: VersionWhereInput
  }

  export type VersionUpdateToOneWithWhereWithoutCommentsInput = {
    where?: VersionWhereInput
    data: XOR<VersionUpdateWithoutCommentsInput, VersionUncheckedUpdateWithoutCommentsInput>
  }

  export type VersionUpdateWithoutCommentsInput = {
    versionNumber?: StringFieldUpdateOperationsInput | string
    fileUrls?: VersionUpdatefileUrlsInput | string[]
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    task?: TaskUpdateOneRequiredWithoutVersionsNestedInput
    uploadedBy?: UserUpdateOneRequiredWithoutVersionsNestedInput
  }

  export type VersionUncheckedUpdateWithoutCommentsInput = {
    versionNumber?: StringFieldUpdateOperationsInput | string
    fileUrls?: VersionUpdatefileUrlsInput | string[]
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    taskId?: StringFieldUpdateOperationsInput | string
    uploadedById?: StringFieldUpdateOperationsInput | string
  }

  export type UserUpsertWithoutCommentsInput = {
    update: XOR<UserUpdateWithoutCommentsInput, UserUncheckedUpdateWithoutCommentsInput>
    create: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCommentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCommentsInput, UserUncheckedUpdateWithoutCommentsInput>
  }

  export type UserUpdateWithoutCommentsInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    team?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdTasks?: TaskUpdateManyWithoutCreatorNestedInput
    complianceTasks?: TaskUpdateManyWithoutAssignedComplianceNestedInput
    versions?: VersionUpdateManyWithoutUploadedByNestedInput
    auditLogs?: AuditLogUpdateManyWithoutPerformedByUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    absences?: AbsenceUpdateManyWithoutUserNestedInput
    createdAbsences?: AbsenceUpdateManyWithoutCreatedByNestedInput
    exchangeApprovals?: ExchangeApprovalUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutCommentsInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    team?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdTasks?: TaskUncheckedUpdateManyWithoutCreatorNestedInput
    complianceTasks?: TaskUncheckedUpdateManyWithoutAssignedComplianceNestedInput
    versions?: VersionUncheckedUpdateManyWithoutUploadedByNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutPerformedByUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    absences?: AbsenceUncheckedUpdateManyWithoutUserNestedInput
    createdAbsences?: AbsenceUncheckedUpdateManyWithoutCreatedByNestedInput
    exchangeApprovals?: ExchangeApprovalUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type TaskCreateWithoutExchangeApprovalsInput = {
    id?: string
    uin: string
    title: string
    description?: string | null
    taskType?: $Enums.TaskType | null
    status?: $Enums.TaskStatus
    expectedPublishDate?: Date | string | null
    platform?: string | null
    category?: string | null
    remarks?: string | null
    approvalDate?: Date | string | null
    expiryDate?: Date | string | null
    approvalProofUrl?: string | null
    publishDate?: Date | string | null
    publishedCopyUrl?: string | null
    closureComments?: string | null
    closureDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedProductIds?: TaskCreateassignedProductIdsInput | string[]
    creator: UserCreateNestedOneWithoutCreatedTasksInput
    assignedCompliance?: UserCreateNestedOneWithoutComplianceTasksInput
    versions?: VersionCreateNestedManyWithoutTaskInput
    comments?: CommentCreateNestedManyWithoutTaskInput
    auditLogs?: AuditLogCreateNestedManyWithoutTaskInput
    notifications?: NotificationCreateNestedManyWithoutTaskInput
  }

  export type TaskUncheckedCreateWithoutExchangeApprovalsInput = {
    id?: string
    uin: string
    title: string
    description?: string | null
    taskType?: $Enums.TaskType | null
    status?: $Enums.TaskStatus
    expectedPublishDate?: Date | string | null
    platform?: string | null
    category?: string | null
    remarks?: string | null
    approvalDate?: Date | string | null
    expiryDate?: Date | string | null
    approvalProofUrl?: string | null
    publishDate?: Date | string | null
    publishedCopyUrl?: string | null
    closureComments?: string | null
    closureDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: string
    assignedProductIds?: TaskCreateassignedProductIdsInput | string[]
    assignedComplianceId?: string | null
    versions?: VersionUncheckedCreateNestedManyWithoutTaskInput
    comments?: CommentUncheckedCreateNestedManyWithoutTaskInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutTaskInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutTaskInput
  }

  export type TaskCreateOrConnectWithoutExchangeApprovalsInput = {
    where: TaskWhereUniqueInput
    create: XOR<TaskCreateWithoutExchangeApprovalsInput, TaskUncheckedCreateWithoutExchangeApprovalsInput>
  }

  export type UserCreateWithoutExchangeApprovalsInput = {
    id?: string
    username: string
    email: string
    password: string
    fullName: string
    role: $Enums.Role
    isActive?: boolean
    team?: string | null
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdTasks?: TaskCreateNestedManyWithoutCreatorInput
    complianceTasks?: TaskCreateNestedManyWithoutAssignedComplianceInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    versions?: VersionCreateNestedManyWithoutUploadedByInput
    auditLogs?: AuditLogCreateNestedManyWithoutPerformedByUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    absences?: AbsenceCreateNestedManyWithoutUserInput
    createdAbsences?: AbsenceCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutExchangeApprovalsInput = {
    id?: string
    username: string
    email: string
    password: string
    fullName: string
    role: $Enums.Role
    isActive?: boolean
    team?: string | null
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdTasks?: TaskUncheckedCreateNestedManyWithoutCreatorInput
    complianceTasks?: TaskUncheckedCreateNestedManyWithoutAssignedComplianceInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    versions?: VersionUncheckedCreateNestedManyWithoutUploadedByInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutPerformedByUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    absences?: AbsenceUncheckedCreateNestedManyWithoutUserInput
    createdAbsences?: AbsenceUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutExchangeApprovalsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutExchangeApprovalsInput, UserUncheckedCreateWithoutExchangeApprovalsInput>
  }

  export type TaskUpsertWithoutExchangeApprovalsInput = {
    update: XOR<TaskUpdateWithoutExchangeApprovalsInput, TaskUncheckedUpdateWithoutExchangeApprovalsInput>
    create: XOR<TaskCreateWithoutExchangeApprovalsInput, TaskUncheckedCreateWithoutExchangeApprovalsInput>
    where?: TaskWhereInput
  }

  export type TaskUpdateToOneWithWhereWithoutExchangeApprovalsInput = {
    where?: TaskWhereInput
    data: XOR<TaskUpdateWithoutExchangeApprovalsInput, TaskUncheckedUpdateWithoutExchangeApprovalsInput>
  }

  export type TaskUpdateWithoutExchangeApprovalsInput = {
    uin?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    taskType?: NullableEnumTaskTypeFieldUpdateOperationsInput | $Enums.TaskType | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    expectedPublishDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    platform?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    approvalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvalProofUrl?: NullableStringFieldUpdateOperationsInput | string | null
    publishDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    publishedCopyUrl?: NullableStringFieldUpdateOperationsInput | string | null
    closureComments?: NullableStringFieldUpdateOperationsInput | string | null
    closureDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedProductIds?: TaskUpdateassignedProductIdsInput | string[]
    creator?: UserUpdateOneRequiredWithoutCreatedTasksNestedInput
    assignedCompliance?: UserUpdateOneWithoutComplianceTasksNestedInput
    versions?: VersionUpdateManyWithoutTaskNestedInput
    comments?: CommentUpdateManyWithoutTaskNestedInput
    auditLogs?: AuditLogUpdateManyWithoutTaskNestedInput
    notifications?: NotificationUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateWithoutExchangeApprovalsInput = {
    uin?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    taskType?: NullableEnumTaskTypeFieldUpdateOperationsInput | $Enums.TaskType | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    expectedPublishDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    platform?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    approvalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvalProofUrl?: NullableStringFieldUpdateOperationsInput | string | null
    publishDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    publishedCopyUrl?: NullableStringFieldUpdateOperationsInput | string | null
    closureComments?: NullableStringFieldUpdateOperationsInput | string | null
    closureDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    assignedProductIds?: TaskUpdateassignedProductIdsInput | string[]
    assignedComplianceId?: NullableStringFieldUpdateOperationsInput | string | null
    versions?: VersionUncheckedUpdateManyWithoutTaskNestedInput
    comments?: CommentUncheckedUpdateManyWithoutTaskNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutTaskNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutTaskNestedInput
  }

  export type UserUpsertWithoutExchangeApprovalsInput = {
    update: XOR<UserUpdateWithoutExchangeApprovalsInput, UserUncheckedUpdateWithoutExchangeApprovalsInput>
    create: XOR<UserCreateWithoutExchangeApprovalsInput, UserUncheckedCreateWithoutExchangeApprovalsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutExchangeApprovalsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutExchangeApprovalsInput, UserUncheckedUpdateWithoutExchangeApprovalsInput>
  }

  export type UserUpdateWithoutExchangeApprovalsInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    team?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdTasks?: TaskUpdateManyWithoutCreatorNestedInput
    complianceTasks?: TaskUpdateManyWithoutAssignedComplianceNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    versions?: VersionUpdateManyWithoutUploadedByNestedInput
    auditLogs?: AuditLogUpdateManyWithoutPerformedByUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    absences?: AbsenceUpdateManyWithoutUserNestedInput
    createdAbsences?: AbsenceUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutExchangeApprovalsInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    team?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdTasks?: TaskUncheckedUpdateManyWithoutCreatorNestedInput
    complianceTasks?: TaskUncheckedUpdateManyWithoutAssignedComplianceNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    versions?: VersionUncheckedUpdateManyWithoutUploadedByNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutPerformedByUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    absences?: AbsenceUncheckedUpdateManyWithoutUserNestedInput
    createdAbsences?: AbsenceUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type UserCreateWithoutNotificationsInput = {
    id?: string
    username: string
    email: string
    password: string
    fullName: string
    role: $Enums.Role
    isActive?: boolean
    team?: string | null
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdTasks?: TaskCreateNestedManyWithoutCreatorInput
    complianceTasks?: TaskCreateNestedManyWithoutAssignedComplianceInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    versions?: VersionCreateNestedManyWithoutUploadedByInput
    auditLogs?: AuditLogCreateNestedManyWithoutPerformedByUserInput
    absences?: AbsenceCreateNestedManyWithoutUserInput
    createdAbsences?: AbsenceCreateNestedManyWithoutCreatedByInput
    exchangeApprovals?: ExchangeApprovalCreateNestedManyWithoutUpdatedByInput
  }

  export type UserUncheckedCreateWithoutNotificationsInput = {
    id?: string
    username: string
    email: string
    password: string
    fullName: string
    role: $Enums.Role
    isActive?: boolean
    team?: string | null
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdTasks?: TaskUncheckedCreateNestedManyWithoutCreatorInput
    complianceTasks?: TaskUncheckedCreateNestedManyWithoutAssignedComplianceInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    versions?: VersionUncheckedCreateNestedManyWithoutUploadedByInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutPerformedByUserInput
    absences?: AbsenceUncheckedCreateNestedManyWithoutUserInput
    createdAbsences?: AbsenceUncheckedCreateNestedManyWithoutCreatedByInput
    exchangeApprovals?: ExchangeApprovalUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type UserCreateOrConnectWithoutNotificationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
  }

  export type TaskCreateWithoutNotificationsInput = {
    id?: string
    uin: string
    title: string
    description?: string | null
    taskType?: $Enums.TaskType | null
    status?: $Enums.TaskStatus
    expectedPublishDate?: Date | string | null
    platform?: string | null
    category?: string | null
    remarks?: string | null
    approvalDate?: Date | string | null
    expiryDate?: Date | string | null
    approvalProofUrl?: string | null
    publishDate?: Date | string | null
    publishedCopyUrl?: string | null
    closureComments?: string | null
    closureDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedProductIds?: TaskCreateassignedProductIdsInput | string[]
    creator: UserCreateNestedOneWithoutCreatedTasksInput
    assignedCompliance?: UserCreateNestedOneWithoutComplianceTasksInput
    versions?: VersionCreateNestedManyWithoutTaskInput
    comments?: CommentCreateNestedManyWithoutTaskInput
    exchangeApprovals?: ExchangeApprovalCreateNestedManyWithoutTaskInput
    auditLogs?: AuditLogCreateNestedManyWithoutTaskInput
  }

  export type TaskUncheckedCreateWithoutNotificationsInput = {
    id?: string
    uin: string
    title: string
    description?: string | null
    taskType?: $Enums.TaskType | null
    status?: $Enums.TaskStatus
    expectedPublishDate?: Date | string | null
    platform?: string | null
    category?: string | null
    remarks?: string | null
    approvalDate?: Date | string | null
    expiryDate?: Date | string | null
    approvalProofUrl?: string | null
    publishDate?: Date | string | null
    publishedCopyUrl?: string | null
    closureComments?: string | null
    closureDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: string
    assignedProductIds?: TaskCreateassignedProductIdsInput | string[]
    assignedComplianceId?: string | null
    versions?: VersionUncheckedCreateNestedManyWithoutTaskInput
    comments?: CommentUncheckedCreateNestedManyWithoutTaskInput
    exchangeApprovals?: ExchangeApprovalUncheckedCreateNestedManyWithoutTaskInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutTaskInput
  }

  export type TaskCreateOrConnectWithoutNotificationsInput = {
    where: TaskWhereUniqueInput
    create: XOR<TaskCreateWithoutNotificationsInput, TaskUncheckedCreateWithoutNotificationsInput>
  }

  export type UserUpsertWithoutNotificationsInput = {
    update: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserUpdateWithoutNotificationsInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    team?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdTasks?: TaskUpdateManyWithoutCreatorNestedInput
    complianceTasks?: TaskUpdateManyWithoutAssignedComplianceNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    versions?: VersionUpdateManyWithoutUploadedByNestedInput
    auditLogs?: AuditLogUpdateManyWithoutPerformedByUserNestedInput
    absences?: AbsenceUpdateManyWithoutUserNestedInput
    createdAbsences?: AbsenceUpdateManyWithoutCreatedByNestedInput
    exchangeApprovals?: ExchangeApprovalUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutNotificationsInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    team?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdTasks?: TaskUncheckedUpdateManyWithoutCreatorNestedInput
    complianceTasks?: TaskUncheckedUpdateManyWithoutAssignedComplianceNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    versions?: VersionUncheckedUpdateManyWithoutUploadedByNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutPerformedByUserNestedInput
    absences?: AbsenceUncheckedUpdateManyWithoutUserNestedInput
    createdAbsences?: AbsenceUncheckedUpdateManyWithoutCreatedByNestedInput
    exchangeApprovals?: ExchangeApprovalUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type TaskUpsertWithoutNotificationsInput = {
    update: XOR<TaskUpdateWithoutNotificationsInput, TaskUncheckedUpdateWithoutNotificationsInput>
    create: XOR<TaskCreateWithoutNotificationsInput, TaskUncheckedCreateWithoutNotificationsInput>
    where?: TaskWhereInput
  }

  export type TaskUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: TaskWhereInput
    data: XOR<TaskUpdateWithoutNotificationsInput, TaskUncheckedUpdateWithoutNotificationsInput>
  }

  export type TaskUpdateWithoutNotificationsInput = {
    uin?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    taskType?: NullableEnumTaskTypeFieldUpdateOperationsInput | $Enums.TaskType | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    expectedPublishDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    platform?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    approvalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvalProofUrl?: NullableStringFieldUpdateOperationsInput | string | null
    publishDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    publishedCopyUrl?: NullableStringFieldUpdateOperationsInput | string | null
    closureComments?: NullableStringFieldUpdateOperationsInput | string | null
    closureDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedProductIds?: TaskUpdateassignedProductIdsInput | string[]
    creator?: UserUpdateOneRequiredWithoutCreatedTasksNestedInput
    assignedCompliance?: UserUpdateOneWithoutComplianceTasksNestedInput
    versions?: VersionUpdateManyWithoutTaskNestedInput
    comments?: CommentUpdateManyWithoutTaskNestedInput
    exchangeApprovals?: ExchangeApprovalUpdateManyWithoutTaskNestedInput
    auditLogs?: AuditLogUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateWithoutNotificationsInput = {
    uin?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    taskType?: NullableEnumTaskTypeFieldUpdateOperationsInput | $Enums.TaskType | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    expectedPublishDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    platform?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    approvalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvalProofUrl?: NullableStringFieldUpdateOperationsInput | string | null
    publishDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    publishedCopyUrl?: NullableStringFieldUpdateOperationsInput | string | null
    closureComments?: NullableStringFieldUpdateOperationsInput | string | null
    closureDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    assignedProductIds?: TaskUpdateassignedProductIdsInput | string[]
    assignedComplianceId?: NullableStringFieldUpdateOperationsInput | string | null
    versions?: VersionUncheckedUpdateManyWithoutTaskNestedInput
    comments?: CommentUncheckedUpdateManyWithoutTaskNestedInput
    exchangeApprovals?: ExchangeApprovalUncheckedUpdateManyWithoutTaskNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutTaskNestedInput
  }

  export type UserCreateWithoutAuditLogsInput = {
    id?: string
    username: string
    email: string
    password: string
    fullName: string
    role: $Enums.Role
    isActive?: boolean
    team?: string | null
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdTasks?: TaskCreateNestedManyWithoutCreatorInput
    complianceTasks?: TaskCreateNestedManyWithoutAssignedComplianceInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    versions?: VersionCreateNestedManyWithoutUploadedByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    absences?: AbsenceCreateNestedManyWithoutUserInput
    createdAbsences?: AbsenceCreateNestedManyWithoutCreatedByInput
    exchangeApprovals?: ExchangeApprovalCreateNestedManyWithoutUpdatedByInput
  }

  export type UserUncheckedCreateWithoutAuditLogsInput = {
    id?: string
    username: string
    email: string
    password: string
    fullName: string
    role: $Enums.Role
    isActive?: boolean
    team?: string | null
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdTasks?: TaskUncheckedCreateNestedManyWithoutCreatorInput
    complianceTasks?: TaskUncheckedCreateNestedManyWithoutAssignedComplianceInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    versions?: VersionUncheckedCreateNestedManyWithoutUploadedByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    absences?: AbsenceUncheckedCreateNestedManyWithoutUserInput
    createdAbsences?: AbsenceUncheckedCreateNestedManyWithoutCreatedByInput
    exchangeApprovals?: ExchangeApprovalUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type UserCreateOrConnectWithoutAuditLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
  }

  export type TaskCreateWithoutAuditLogsInput = {
    id?: string
    uin: string
    title: string
    description?: string | null
    taskType?: $Enums.TaskType | null
    status?: $Enums.TaskStatus
    expectedPublishDate?: Date | string | null
    platform?: string | null
    category?: string | null
    remarks?: string | null
    approvalDate?: Date | string | null
    expiryDate?: Date | string | null
    approvalProofUrl?: string | null
    publishDate?: Date | string | null
    publishedCopyUrl?: string | null
    closureComments?: string | null
    closureDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedProductIds?: TaskCreateassignedProductIdsInput | string[]
    creator: UserCreateNestedOneWithoutCreatedTasksInput
    assignedCompliance?: UserCreateNestedOneWithoutComplianceTasksInput
    versions?: VersionCreateNestedManyWithoutTaskInput
    comments?: CommentCreateNestedManyWithoutTaskInput
    exchangeApprovals?: ExchangeApprovalCreateNestedManyWithoutTaskInput
    notifications?: NotificationCreateNestedManyWithoutTaskInput
  }

  export type TaskUncheckedCreateWithoutAuditLogsInput = {
    id?: string
    uin: string
    title: string
    description?: string | null
    taskType?: $Enums.TaskType | null
    status?: $Enums.TaskStatus
    expectedPublishDate?: Date | string | null
    platform?: string | null
    category?: string | null
    remarks?: string | null
    approvalDate?: Date | string | null
    expiryDate?: Date | string | null
    approvalProofUrl?: string | null
    publishDate?: Date | string | null
    publishedCopyUrl?: string | null
    closureComments?: string | null
    closureDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: string
    assignedProductIds?: TaskCreateassignedProductIdsInput | string[]
    assignedComplianceId?: string | null
    versions?: VersionUncheckedCreateNestedManyWithoutTaskInput
    comments?: CommentUncheckedCreateNestedManyWithoutTaskInput
    exchangeApprovals?: ExchangeApprovalUncheckedCreateNestedManyWithoutTaskInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutTaskInput
  }

  export type TaskCreateOrConnectWithoutAuditLogsInput = {
    where: TaskWhereUniqueInput
    create: XOR<TaskCreateWithoutAuditLogsInput, TaskUncheckedCreateWithoutAuditLogsInput>
  }

  export type UserUpsertWithoutAuditLogsInput = {
    update: XOR<UserUpdateWithoutAuditLogsInput, UserUncheckedUpdateWithoutAuditLogsInput>
    create: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAuditLogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAuditLogsInput, UserUncheckedUpdateWithoutAuditLogsInput>
  }

  export type UserUpdateWithoutAuditLogsInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    team?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdTasks?: TaskUpdateManyWithoutCreatorNestedInput
    complianceTasks?: TaskUpdateManyWithoutAssignedComplianceNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    versions?: VersionUpdateManyWithoutUploadedByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    absences?: AbsenceUpdateManyWithoutUserNestedInput
    createdAbsences?: AbsenceUpdateManyWithoutCreatedByNestedInput
    exchangeApprovals?: ExchangeApprovalUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutAuditLogsInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    team?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdTasks?: TaskUncheckedUpdateManyWithoutCreatorNestedInput
    complianceTasks?: TaskUncheckedUpdateManyWithoutAssignedComplianceNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    versions?: VersionUncheckedUpdateManyWithoutUploadedByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    absences?: AbsenceUncheckedUpdateManyWithoutUserNestedInput
    createdAbsences?: AbsenceUncheckedUpdateManyWithoutCreatedByNestedInput
    exchangeApprovals?: ExchangeApprovalUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type TaskUpsertWithoutAuditLogsInput = {
    update: XOR<TaskUpdateWithoutAuditLogsInput, TaskUncheckedUpdateWithoutAuditLogsInput>
    create: XOR<TaskCreateWithoutAuditLogsInput, TaskUncheckedCreateWithoutAuditLogsInput>
    where?: TaskWhereInput
  }

  export type TaskUpdateToOneWithWhereWithoutAuditLogsInput = {
    where?: TaskWhereInput
    data: XOR<TaskUpdateWithoutAuditLogsInput, TaskUncheckedUpdateWithoutAuditLogsInput>
  }

  export type TaskUpdateWithoutAuditLogsInput = {
    uin?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    taskType?: NullableEnumTaskTypeFieldUpdateOperationsInput | $Enums.TaskType | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    expectedPublishDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    platform?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    approvalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvalProofUrl?: NullableStringFieldUpdateOperationsInput | string | null
    publishDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    publishedCopyUrl?: NullableStringFieldUpdateOperationsInput | string | null
    closureComments?: NullableStringFieldUpdateOperationsInput | string | null
    closureDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedProductIds?: TaskUpdateassignedProductIdsInput | string[]
    creator?: UserUpdateOneRequiredWithoutCreatedTasksNestedInput
    assignedCompliance?: UserUpdateOneWithoutComplianceTasksNestedInput
    versions?: VersionUpdateManyWithoutTaskNestedInput
    comments?: CommentUpdateManyWithoutTaskNestedInput
    exchangeApprovals?: ExchangeApprovalUpdateManyWithoutTaskNestedInput
    notifications?: NotificationUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateWithoutAuditLogsInput = {
    uin?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    taskType?: NullableEnumTaskTypeFieldUpdateOperationsInput | $Enums.TaskType | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    expectedPublishDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    platform?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    approvalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvalProofUrl?: NullableStringFieldUpdateOperationsInput | string | null
    publishDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    publishedCopyUrl?: NullableStringFieldUpdateOperationsInput | string | null
    closureComments?: NullableStringFieldUpdateOperationsInput | string | null
    closureDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    assignedProductIds?: TaskUpdateassignedProductIdsInput | string[]
    assignedComplianceId?: NullableStringFieldUpdateOperationsInput | string | null
    versions?: VersionUncheckedUpdateManyWithoutTaskNestedInput
    comments?: CommentUncheckedUpdateManyWithoutTaskNestedInput
    exchangeApprovals?: ExchangeApprovalUncheckedUpdateManyWithoutTaskNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutTaskNestedInput
  }

  export type UserCreateWithoutAbsencesInput = {
    id?: string
    username: string
    email: string
    password: string
    fullName: string
    role: $Enums.Role
    isActive?: boolean
    team?: string | null
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdTasks?: TaskCreateNestedManyWithoutCreatorInput
    complianceTasks?: TaskCreateNestedManyWithoutAssignedComplianceInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    versions?: VersionCreateNestedManyWithoutUploadedByInput
    auditLogs?: AuditLogCreateNestedManyWithoutPerformedByUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    createdAbsences?: AbsenceCreateNestedManyWithoutCreatedByInput
    exchangeApprovals?: ExchangeApprovalCreateNestedManyWithoutUpdatedByInput
  }

  export type UserUncheckedCreateWithoutAbsencesInput = {
    id?: string
    username: string
    email: string
    password: string
    fullName: string
    role: $Enums.Role
    isActive?: boolean
    team?: string | null
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdTasks?: TaskUncheckedCreateNestedManyWithoutCreatorInput
    complianceTasks?: TaskUncheckedCreateNestedManyWithoutAssignedComplianceInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    versions?: VersionUncheckedCreateNestedManyWithoutUploadedByInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutPerformedByUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    createdAbsences?: AbsenceUncheckedCreateNestedManyWithoutCreatedByInput
    exchangeApprovals?: ExchangeApprovalUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type UserCreateOrConnectWithoutAbsencesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAbsencesInput, UserUncheckedCreateWithoutAbsencesInput>
  }

  export type UserCreateWithoutCreatedAbsencesInput = {
    id?: string
    username: string
    email: string
    password: string
    fullName: string
    role: $Enums.Role
    isActive?: boolean
    team?: string | null
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdTasks?: TaskCreateNestedManyWithoutCreatorInput
    complianceTasks?: TaskCreateNestedManyWithoutAssignedComplianceInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    versions?: VersionCreateNestedManyWithoutUploadedByInput
    auditLogs?: AuditLogCreateNestedManyWithoutPerformedByUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    absences?: AbsenceCreateNestedManyWithoutUserInput
    exchangeApprovals?: ExchangeApprovalCreateNestedManyWithoutUpdatedByInput
  }

  export type UserUncheckedCreateWithoutCreatedAbsencesInput = {
    id?: string
    username: string
    email: string
    password: string
    fullName: string
    role: $Enums.Role
    isActive?: boolean
    team?: string | null
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdTasks?: TaskUncheckedCreateNestedManyWithoutCreatorInput
    complianceTasks?: TaskUncheckedCreateNestedManyWithoutAssignedComplianceInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    versions?: VersionUncheckedCreateNestedManyWithoutUploadedByInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutPerformedByUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    absences?: AbsenceUncheckedCreateNestedManyWithoutUserInput
    exchangeApprovals?: ExchangeApprovalUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type UserCreateOrConnectWithoutCreatedAbsencesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedAbsencesInput, UserUncheckedCreateWithoutCreatedAbsencesInput>
  }

  export type UserUpsertWithoutAbsencesInput = {
    update: XOR<UserUpdateWithoutAbsencesInput, UserUncheckedUpdateWithoutAbsencesInput>
    create: XOR<UserCreateWithoutAbsencesInput, UserUncheckedCreateWithoutAbsencesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAbsencesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAbsencesInput, UserUncheckedUpdateWithoutAbsencesInput>
  }

  export type UserUpdateWithoutAbsencesInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    team?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdTasks?: TaskUpdateManyWithoutCreatorNestedInput
    complianceTasks?: TaskUpdateManyWithoutAssignedComplianceNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    versions?: VersionUpdateManyWithoutUploadedByNestedInput
    auditLogs?: AuditLogUpdateManyWithoutPerformedByUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    createdAbsences?: AbsenceUpdateManyWithoutCreatedByNestedInput
    exchangeApprovals?: ExchangeApprovalUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutAbsencesInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    team?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdTasks?: TaskUncheckedUpdateManyWithoutCreatorNestedInput
    complianceTasks?: TaskUncheckedUpdateManyWithoutAssignedComplianceNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    versions?: VersionUncheckedUpdateManyWithoutUploadedByNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutPerformedByUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    createdAbsences?: AbsenceUncheckedUpdateManyWithoutCreatedByNestedInput
    exchangeApprovals?: ExchangeApprovalUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUpsertWithoutCreatedAbsencesInput = {
    update: XOR<UserUpdateWithoutCreatedAbsencesInput, UserUncheckedUpdateWithoutCreatedAbsencesInput>
    create: XOR<UserCreateWithoutCreatedAbsencesInput, UserUncheckedCreateWithoutCreatedAbsencesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedAbsencesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedAbsencesInput, UserUncheckedUpdateWithoutCreatedAbsencesInput>
  }

  export type UserUpdateWithoutCreatedAbsencesInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    team?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdTasks?: TaskUpdateManyWithoutCreatorNestedInput
    complianceTasks?: TaskUpdateManyWithoutAssignedComplianceNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    versions?: VersionUpdateManyWithoutUploadedByNestedInput
    auditLogs?: AuditLogUpdateManyWithoutPerformedByUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    absences?: AbsenceUpdateManyWithoutUserNestedInput
    exchangeApprovals?: ExchangeApprovalUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedAbsencesInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    team?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdTasks?: TaskUncheckedUpdateManyWithoutCreatorNestedInput
    complianceTasks?: TaskUncheckedUpdateManyWithoutAssignedComplianceNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    versions?: VersionUncheckedUpdateManyWithoutUploadedByNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutPerformedByUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    absences?: AbsenceUncheckedUpdateManyWithoutUserNestedInput
    exchangeApprovals?: ExchangeApprovalUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type TaskCreateManyCreatorInput = {
    id?: string
    uin: string
    title: string
    description?: string | null
    taskType?: $Enums.TaskType | null
    status?: $Enums.TaskStatus
    expectedPublishDate?: Date | string | null
    platform?: string | null
    category?: string | null
    remarks?: string | null
    approvalDate?: Date | string | null
    expiryDate?: Date | string | null
    approvalProofUrl?: string | null
    publishDate?: Date | string | null
    publishedCopyUrl?: string | null
    closureComments?: string | null
    closureDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedProductIds?: TaskCreateassignedProductIdsInput | string[]
    assignedComplianceId?: string | null
  }

  export type TaskCreateManyAssignedComplianceInput = {
    id?: string
    uin: string
    title: string
    description?: string | null
    taskType?: $Enums.TaskType | null
    status?: $Enums.TaskStatus
    expectedPublishDate?: Date | string | null
    platform?: string | null
    category?: string | null
    remarks?: string | null
    approvalDate?: Date | string | null
    expiryDate?: Date | string | null
    approvalProofUrl?: string | null
    publishDate?: Date | string | null
    publishedCopyUrl?: string | null
    closureComments?: string | null
    closureDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: string
    assignedProductIds?: TaskCreateassignedProductIdsInput | string[]
  }

  export type CommentCreateManyAuthorInput = {
    id?: string
    content: string
    attachments?: CommentCreateattachmentsInput | string[]
    isGlobal?: boolean
    createdAt?: Date | string
    taskId: string
    versionId?: string | null
  }

  export type VersionCreateManyUploadedByInput = {
    id?: string
    versionNumber: string
    fileUrls?: VersionCreatefileUrlsInput | string[]
    remarks?: string | null
    uploadedAt?: Date | string
    taskId: string
  }

  export type AuditLogCreateManyPerformedByUserInput = {
    id?: string
    action: string
    details: string
    timestamp?: Date | string
    taskId?: string | null
  }

  export type NotificationCreateManyUserInput = {
    id?: string
    title: string
    message: string
    type: $Enums.NotificationType
    isRead?: boolean
    createdAt?: Date | string
    taskId?: string | null
  }

  export type AbsenceCreateManyUserInput = {
    id?: string
    fromDate: Date | string
    toDate: Date | string
    reason?: string | null
    createdAt?: Date | string
    createdById: string
  }

  export type AbsenceCreateManyCreatedByInput = {
    id?: string
    fromDate: Date | string
    toDate: Date | string
    reason?: string | null
    createdAt?: Date | string
    userId: string
  }

  export type ExchangeApprovalCreateManyUpdatedByInput = {
    id?: string
    exchangeName: string
    typeOfContent: string
    approvalStatus?: $Enums.ExchangeApprovalStatus
    approvalDate?: Date | string | null
    expiryDate?: Date | string | null
    referenceNumber?: string | null
    approvalEmailUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    taskId: string
  }

  export type TaskUpdateWithoutCreatorInput = {
    uin?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    taskType?: NullableEnumTaskTypeFieldUpdateOperationsInput | $Enums.TaskType | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    expectedPublishDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    platform?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    approvalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvalProofUrl?: NullableStringFieldUpdateOperationsInput | string | null
    publishDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    publishedCopyUrl?: NullableStringFieldUpdateOperationsInput | string | null
    closureComments?: NullableStringFieldUpdateOperationsInput | string | null
    closureDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedProductIds?: TaskUpdateassignedProductIdsInput | string[]
    assignedCompliance?: UserUpdateOneWithoutComplianceTasksNestedInput
    versions?: VersionUpdateManyWithoutTaskNestedInput
    comments?: CommentUpdateManyWithoutTaskNestedInput
    exchangeApprovals?: ExchangeApprovalUpdateManyWithoutTaskNestedInput
    auditLogs?: AuditLogUpdateManyWithoutTaskNestedInput
    notifications?: NotificationUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateWithoutCreatorInput = {
    uin?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    taskType?: NullableEnumTaskTypeFieldUpdateOperationsInput | $Enums.TaskType | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    expectedPublishDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    platform?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    approvalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvalProofUrl?: NullableStringFieldUpdateOperationsInput | string | null
    publishDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    publishedCopyUrl?: NullableStringFieldUpdateOperationsInput | string | null
    closureComments?: NullableStringFieldUpdateOperationsInput | string | null
    closureDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedProductIds?: TaskUpdateassignedProductIdsInput | string[]
    assignedComplianceId?: NullableStringFieldUpdateOperationsInput | string | null
    versions?: VersionUncheckedUpdateManyWithoutTaskNestedInput
    comments?: CommentUncheckedUpdateManyWithoutTaskNestedInput
    exchangeApprovals?: ExchangeApprovalUncheckedUpdateManyWithoutTaskNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutTaskNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateManyWithoutCreatorInput = {
    uin?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    taskType?: NullableEnumTaskTypeFieldUpdateOperationsInput | $Enums.TaskType | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    expectedPublishDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    platform?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    approvalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvalProofUrl?: NullableStringFieldUpdateOperationsInput | string | null
    publishDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    publishedCopyUrl?: NullableStringFieldUpdateOperationsInput | string | null
    closureComments?: NullableStringFieldUpdateOperationsInput | string | null
    closureDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedProductIds?: TaskUpdateassignedProductIdsInput | string[]
    assignedComplianceId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TaskUpdateWithoutAssignedComplianceInput = {
    uin?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    taskType?: NullableEnumTaskTypeFieldUpdateOperationsInput | $Enums.TaskType | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    expectedPublishDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    platform?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    approvalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvalProofUrl?: NullableStringFieldUpdateOperationsInput | string | null
    publishDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    publishedCopyUrl?: NullableStringFieldUpdateOperationsInput | string | null
    closureComments?: NullableStringFieldUpdateOperationsInput | string | null
    closureDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedProductIds?: TaskUpdateassignedProductIdsInput | string[]
    creator?: UserUpdateOneRequiredWithoutCreatedTasksNestedInput
    versions?: VersionUpdateManyWithoutTaskNestedInput
    comments?: CommentUpdateManyWithoutTaskNestedInput
    exchangeApprovals?: ExchangeApprovalUpdateManyWithoutTaskNestedInput
    auditLogs?: AuditLogUpdateManyWithoutTaskNestedInput
    notifications?: NotificationUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateWithoutAssignedComplianceInput = {
    uin?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    taskType?: NullableEnumTaskTypeFieldUpdateOperationsInput | $Enums.TaskType | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    expectedPublishDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    platform?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    approvalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvalProofUrl?: NullableStringFieldUpdateOperationsInput | string | null
    publishDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    publishedCopyUrl?: NullableStringFieldUpdateOperationsInput | string | null
    closureComments?: NullableStringFieldUpdateOperationsInput | string | null
    closureDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    assignedProductIds?: TaskUpdateassignedProductIdsInput | string[]
    versions?: VersionUncheckedUpdateManyWithoutTaskNestedInput
    comments?: CommentUncheckedUpdateManyWithoutTaskNestedInput
    exchangeApprovals?: ExchangeApprovalUncheckedUpdateManyWithoutTaskNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutTaskNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateManyWithoutAssignedComplianceInput = {
    uin?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    taskType?: NullableEnumTaskTypeFieldUpdateOperationsInput | $Enums.TaskType | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    expectedPublishDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    platform?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    approvalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvalProofUrl?: NullableStringFieldUpdateOperationsInput | string | null
    publishDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    publishedCopyUrl?: NullableStringFieldUpdateOperationsInput | string | null
    closureComments?: NullableStringFieldUpdateOperationsInput | string | null
    closureDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    assignedProductIds?: TaskUpdateassignedProductIdsInput | string[]
  }

  export type CommentUpdateWithoutAuthorInput = {
    content?: StringFieldUpdateOperationsInput | string
    attachments?: CommentUpdateattachmentsInput | string[]
    isGlobal?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    task?: TaskUpdateOneRequiredWithoutCommentsNestedInput
    version?: VersionUpdateOneWithoutCommentsNestedInput
  }

  export type CommentUncheckedUpdateWithoutAuthorInput = {
    content?: StringFieldUpdateOperationsInput | string
    attachments?: CommentUpdateattachmentsInput | string[]
    isGlobal?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    taskId?: StringFieldUpdateOperationsInput | string
    versionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CommentUncheckedUpdateManyWithoutAuthorInput = {
    content?: StringFieldUpdateOperationsInput | string
    attachments?: CommentUpdateattachmentsInput | string[]
    isGlobal?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    taskId?: StringFieldUpdateOperationsInput | string
    versionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type VersionUpdateWithoutUploadedByInput = {
    versionNumber?: StringFieldUpdateOperationsInput | string
    fileUrls?: VersionUpdatefileUrlsInput | string[]
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    task?: TaskUpdateOneRequiredWithoutVersionsNestedInput
    comments?: CommentUpdateManyWithoutVersionNestedInput
  }

  export type VersionUncheckedUpdateWithoutUploadedByInput = {
    versionNumber?: StringFieldUpdateOperationsInput | string
    fileUrls?: VersionUpdatefileUrlsInput | string[]
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    taskId?: StringFieldUpdateOperationsInput | string
    comments?: CommentUncheckedUpdateManyWithoutVersionNestedInput
  }

  export type VersionUncheckedUpdateManyWithoutUploadedByInput = {
    versionNumber?: StringFieldUpdateOperationsInput | string
    fileUrls?: VersionUpdatefileUrlsInput | string[]
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    taskId?: StringFieldUpdateOperationsInput | string
  }

  export type AuditLogUpdateWithoutPerformedByUserInput = {
    action?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    task?: TaskUpdateOneWithoutAuditLogsNestedInput
  }

  export type AuditLogUncheckedUpdateWithoutPerformedByUserInput = {
    action?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AuditLogUncheckedUpdateManyWithoutPerformedByUserInput = {
    action?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NotificationUpdateWithoutUserInput = {
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    task?: TaskUpdateOneWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateWithoutUserInput = {
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NotificationUncheckedUpdateManyWithoutUserInput = {
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AbsenceUpdateWithoutUserInput = {
    fromDate?: DateTimeFieldUpdateOperationsInput | Date | string
    toDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutCreatedAbsencesNestedInput
  }

  export type AbsenceUncheckedUpdateWithoutUserInput = {
    fromDate?: DateTimeFieldUpdateOperationsInput | Date | string
    toDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
  }

  export type AbsenceUncheckedUpdateManyWithoutUserInput = {
    fromDate?: DateTimeFieldUpdateOperationsInput | Date | string
    toDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
  }

  export type AbsenceUpdateWithoutCreatedByInput = {
    fromDate?: DateTimeFieldUpdateOperationsInput | Date | string
    toDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAbsencesNestedInput
  }

  export type AbsenceUncheckedUpdateWithoutCreatedByInput = {
    fromDate?: DateTimeFieldUpdateOperationsInput | Date | string
    toDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type AbsenceUncheckedUpdateManyWithoutCreatedByInput = {
    fromDate?: DateTimeFieldUpdateOperationsInput | Date | string
    toDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ExchangeApprovalUpdateWithoutUpdatedByInput = {
    exchangeName?: StringFieldUpdateOperationsInput | string
    typeOfContent?: StringFieldUpdateOperationsInput | string
    approvalStatus?: EnumExchangeApprovalStatusFieldUpdateOperationsInput | $Enums.ExchangeApprovalStatus
    approvalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    referenceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    approvalEmailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    task?: TaskUpdateOneRequiredWithoutExchangeApprovalsNestedInput
  }

  export type ExchangeApprovalUncheckedUpdateWithoutUpdatedByInput = {
    exchangeName?: StringFieldUpdateOperationsInput | string
    typeOfContent?: StringFieldUpdateOperationsInput | string
    approvalStatus?: EnumExchangeApprovalStatusFieldUpdateOperationsInput | $Enums.ExchangeApprovalStatus
    approvalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    referenceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    approvalEmailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    taskId?: StringFieldUpdateOperationsInput | string
  }

  export type ExchangeApprovalUncheckedUpdateManyWithoutUpdatedByInput = {
    exchangeName?: StringFieldUpdateOperationsInput | string
    typeOfContent?: StringFieldUpdateOperationsInput | string
    approvalStatus?: EnumExchangeApprovalStatusFieldUpdateOperationsInput | $Enums.ExchangeApprovalStatus
    approvalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    referenceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    approvalEmailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    taskId?: StringFieldUpdateOperationsInput | string
  }

  export type VersionCreateManyTaskInput = {
    id?: string
    versionNumber: string
    fileUrls?: VersionCreatefileUrlsInput | string[]
    remarks?: string | null
    uploadedAt?: Date | string
    uploadedById: string
  }

  export type CommentCreateManyTaskInput = {
    id?: string
    content: string
    attachments?: CommentCreateattachmentsInput | string[]
    isGlobal?: boolean
    createdAt?: Date | string
    versionId?: string | null
    authorId: string
  }

  export type ExchangeApprovalCreateManyTaskInput = {
    id?: string
    exchangeName: string
    typeOfContent: string
    approvalStatus?: $Enums.ExchangeApprovalStatus
    approvalDate?: Date | string | null
    expiryDate?: Date | string | null
    referenceNumber?: string | null
    approvalEmailUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById?: string | null
  }

  export type AuditLogCreateManyTaskInput = {
    id?: string
    action: string
    details: string
    timestamp?: Date | string
    performedBy: string
  }

  export type NotificationCreateManyTaskInput = {
    id?: string
    title: string
    message: string
    type: $Enums.NotificationType
    isRead?: boolean
    createdAt?: Date | string
    userId: string
  }

  export type VersionUpdateWithoutTaskInput = {
    versionNumber?: StringFieldUpdateOperationsInput | string
    fileUrls?: VersionUpdatefileUrlsInput | string[]
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uploadedBy?: UserUpdateOneRequiredWithoutVersionsNestedInput
    comments?: CommentUpdateManyWithoutVersionNestedInput
  }

  export type VersionUncheckedUpdateWithoutTaskInput = {
    versionNumber?: StringFieldUpdateOperationsInput | string
    fileUrls?: VersionUpdatefileUrlsInput | string[]
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uploadedById?: StringFieldUpdateOperationsInput | string
    comments?: CommentUncheckedUpdateManyWithoutVersionNestedInput
  }

  export type VersionUncheckedUpdateManyWithoutTaskInput = {
    versionNumber?: StringFieldUpdateOperationsInput | string
    fileUrls?: VersionUpdatefileUrlsInput | string[]
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uploadedById?: StringFieldUpdateOperationsInput | string
  }

  export type CommentUpdateWithoutTaskInput = {
    content?: StringFieldUpdateOperationsInput | string
    attachments?: CommentUpdateattachmentsInput | string[]
    isGlobal?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    version?: VersionUpdateOneWithoutCommentsNestedInput
    author?: UserUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type CommentUncheckedUpdateWithoutTaskInput = {
    content?: StringFieldUpdateOperationsInput | string
    attachments?: CommentUpdateattachmentsInput | string[]
    isGlobal?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    versionId?: NullableStringFieldUpdateOperationsInput | string | null
    authorId?: StringFieldUpdateOperationsInput | string
  }

  export type CommentUncheckedUpdateManyWithoutTaskInput = {
    content?: StringFieldUpdateOperationsInput | string
    attachments?: CommentUpdateattachmentsInput | string[]
    isGlobal?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    versionId?: NullableStringFieldUpdateOperationsInput | string | null
    authorId?: StringFieldUpdateOperationsInput | string
  }

  export type ExchangeApprovalUpdateWithoutTaskInput = {
    exchangeName?: StringFieldUpdateOperationsInput | string
    typeOfContent?: StringFieldUpdateOperationsInput | string
    approvalStatus?: EnumExchangeApprovalStatusFieldUpdateOperationsInput | $Enums.ExchangeApprovalStatus
    approvalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    referenceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    approvalEmailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: UserUpdateOneWithoutExchangeApprovalsNestedInput
  }

  export type ExchangeApprovalUncheckedUpdateWithoutTaskInput = {
    exchangeName?: StringFieldUpdateOperationsInput | string
    typeOfContent?: StringFieldUpdateOperationsInput | string
    approvalStatus?: EnumExchangeApprovalStatusFieldUpdateOperationsInput | $Enums.ExchangeApprovalStatus
    approvalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    referenceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    approvalEmailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ExchangeApprovalUncheckedUpdateManyWithoutTaskInput = {
    exchangeName?: StringFieldUpdateOperationsInput | string
    typeOfContent?: StringFieldUpdateOperationsInput | string
    approvalStatus?: EnumExchangeApprovalStatusFieldUpdateOperationsInput | $Enums.ExchangeApprovalStatus
    approvalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    referenceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    approvalEmailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AuditLogUpdateWithoutTaskInput = {
    action?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    performedByUser?: UserUpdateOneRequiredWithoutAuditLogsNestedInput
  }

  export type AuditLogUncheckedUpdateWithoutTaskInput = {
    action?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    performedBy?: StringFieldUpdateOperationsInput | string
  }

  export type AuditLogUncheckedUpdateManyWithoutTaskInput = {
    action?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    performedBy?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationUpdateWithoutTaskInput = {
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateWithoutTaskInput = {
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationUncheckedUpdateManyWithoutTaskInput = {
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type CommentCreateManyVersionInput = {
    id?: string
    content: string
    attachments?: CommentCreateattachmentsInput | string[]
    isGlobal?: boolean
    createdAt?: Date | string
    taskId: string
    authorId: string
  }

  export type CommentUpdateWithoutVersionInput = {
    content?: StringFieldUpdateOperationsInput | string
    attachments?: CommentUpdateattachmentsInput | string[]
    isGlobal?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    task?: TaskUpdateOneRequiredWithoutCommentsNestedInput
    author?: UserUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type CommentUncheckedUpdateWithoutVersionInput = {
    content?: StringFieldUpdateOperationsInput | string
    attachments?: CommentUpdateattachmentsInput | string[]
    isGlobal?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    taskId?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
  }

  export type CommentUncheckedUpdateManyWithoutVersionInput = {
    content?: StringFieldUpdateOperationsInput | string
    attachments?: CommentUpdateattachmentsInput | string[]
    isGlobal?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    taskId?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TaskCountOutputTypeDefaultArgs instead
     */
    export type TaskCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TaskCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VersionCountOutputTypeDefaultArgs instead
     */
    export type VersionCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VersionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TaskDefaultArgs instead
     */
    export type TaskArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TaskDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VersionDefaultArgs instead
     */
    export type VersionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VersionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CommentDefaultArgs instead
     */
    export type CommentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CommentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ExchangeApprovalDefaultArgs instead
     */
    export type ExchangeApprovalArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ExchangeApprovalDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NotificationDefaultArgs instead
     */
    export type NotificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NotificationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AuditLogDefaultArgs instead
     */
    export type AuditLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AuditLogDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AbsenceDefaultArgs instead
     */
    export type AbsenceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AbsenceDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}